; OM File Header - Saved 2022/08/02 12:49:18
; (6.2 :patc (om-make-point 448.0 10) (om-make-point 241 10) (om-make-point 720 615) "" 183 0 "2022/07/25 9:34:01" "2022/07/27 6:36:20")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "TesteMidi" (quote ((let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 94 472) (om-make-point 130 70) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 253 497) (om-make-point 130 90) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 320 346) (om-make-point 130 90) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (list (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 81 265) (om-make-point 51 32) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 178 257) (om-make-point 28 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 176 24) (om-make-point 78 32) "Vibrafone" "\"Vibrafone\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 328 128) (om-make-point 28 32) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 " 2" (quote midievent) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfunmenu1 (quote input-funmenu) "midi event type" "ev-type" (quote :keyon) (list (list "Note" (quote :note)) (list "KeyOn " (quote :keyon)) (list "KeyOff" (quote :keyoff)) (list "KeyPress" (quote :keypress)) (list "CtrlChange" (quote :ctrlchange)) (list "ProgChange" (quote :progchange)) (list "ChanPress" (quote :chanpress)) (list "PitchWheel/PitchBend" (quote :pitchbend)) (list "SongPos" (quote :songpos)) (list "SongSel" (quote :songsel)) (list "Clock" (quote :clock)) (list "Start" (quote :start)) (list "Continue" (quote :continue)) (list "Stop" (quote :stop)) (list "Tune" (quote :tune)) (list "ActiveSens" (quote :activesens)) (list "Reset" (quote :reset)) (list "SysEx" (quote :sysex)) (list "Stream" (quote :stream)) (list "Private" (quote :private)) (list "Process" (quote :process)) (list "DProcess" (quote :dprocess)) (list "QFrame" (quote :qframe)) (list "Ctrl14b" (quote :ctrl14b)) (list "NonRegParam" (quote :nonregparam)) (list "RegParam" (quote :regparam)) (list "SeqNum" (quote :seqnum)) (list "Textual" (quote :textual)) (list "Copyright" (quote :copyright)) (list "SeqName" (quote :seqname)) (list "InstrName" (quote :instrname)) (list "Lyric" (quote :lyric)) (list "Marker" (quote :marker)) (list "CuePoint" (quote :cuepoint)) (list "ChanPrefix" (quote :chanprefix)) (list "EndTrack" (quote :endtrack)) (list "Tempo" (quote :tempo)) (list "SMPTEOffset" (quote :smpteoffset)) (list "TimeSign" (quote :timesign)) (list "KeySign" (quote :keysign)) (list "Specific" (quote :specific)))) (om-load-inputfun (quote input-funbox) "date" "ev-date" 0) (om-load-inputfun (quote input-funbox) "track" "ev-ref" 0) (om-load-inputfun (quote input-funbox) "port" "ev-port" 0) (om-load-inputfun (quote input-funbox) "channel" "ev-chan" 1) (om-load-inputfun (quote input-funbox) "event content" "ev-fields" nil))) (om-make-point 301 181) (om-make-point 70 70) (if (find-class (quote midievent) nil) (let ((newobj (make-instance (quote midievent) :ev-type (quote :keyon) :ev-date 0 :ev-ref 0 :ev-port 0 :ev-chan 1 :ev-fields nil :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GM-PROGRAM 2" (quote gm-program) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "Instrument name" "PROGNAME" nil (list (list "0 - Acoustic Grand Piano" 0) (list "1 - Bright Acoustic Piano" 1) (list "2 - Electric Grand Piano" 2) (list "3 - Honki Tonk Piano" 3) (list "4 - Electric Piano 1" 4) (list "5 - Electric Piano 2" 5) (list "6 - Harpsichord" 6) (list "7 - Clavinet" 7) (list "8 - Celesta" 8) (list "9 - Glockenspiel" 9) (list "10 - Music Box" 10) (list "11 - Vibraphone" 11) (list "12 - Marimba" 12) (list "13 - Xylophone" 13) (list "14 - Tubular bells" 14) (list "15 - Dulcimer" 15) (list "16 - Drawbar Organ" 16) (list "17 - Percussive Organ" 17) (list "18 - Rock Organ" 18) (list "19 - Church Organ" 19) (list "20 - Reed Organ" 20) (list "21 - Accordion" 21) (list "22 - Harmonica" 22) (list "23 - Tango Accordion" 23) (list "24 - Nylon Acoustic Guitar" 24) (list "25 - Steel Acoustic Guitar" 25) (list "26 - Jazz Electric Guitar" 26) (list "27 - Clean Electric Guitar" 27) (list "28 - Muted Electric Guitar" 28) (list "29 - Overdrive Guitar" 29) (list "30 - Distorted Guitar" 30) (list "31 - Guitar Harmonics" 31) (list "32 - Acoustic Bass" 32) (list "33 - Electric Fingered Bass" 33) (list "34 - Electric Picked Bass" 34) (list "35 - Fretless Bass" 35) (list "36 - Slap Bass 1" 36) (list "37 - Slap Bass 2" 37) (list "38 - Synth Bass 1" 38) (list "39 - Synth Bass 2" 39) (list "40 - Violin" 40) (list "41 - Viola" 41) (list "42 - Cello" 42) (list "43 - Contrabass" 43) (list "44 - Tremolo Strings" 44) (list "45 - Pizzicato Strings" 45) (list "46 - Orchestral Harp" 46) (list "47 - Timpani" 47) (list "48 - String Ensemble 1" 48) (list "49 - String Ensemble 2" 49) (list "50 - Synth Strings 1" 50) (list "51 - Synth Strings 2" 51) (list "52 - Choir Aahs" 52) (list "53 - Voice Oohs" 53) (list "54 - Synth Voice" 54) (list "55 - Orchestra Hit" 55) (list "56 - Trumpet" 56) (list "57 - Trombone" 57) (list "58 - Tuba" 58) (list "59 - Muted Trumpet" 59) (list "60 - French Horn" 60) (list "61 - Brass Section" 61) (list "62 - Synth Brass 1" 62) (list "63 - Synth Brass 2" 63) (list "64 - Soprano Sax" 64) (list "65 - Alto Sax" 65) (list "66 - Tenor Sax" 66) (list "67 - Baritone Sax" 67) (list "68 - Oboe" 68) (list "69 - English Horn" 69) (list "70 - Bassoon" 70) (list "71 - Clarinet" 71) (list "72 - Piccolo" 72) (list "73 - Flute" 73) (list "74 - Recorder" 74) (list "75 - Pan Flute" 75) (list "76 - Bottle Blow" 76) (list "77 - Shakuhachi" 77) (list "78 - Whistle" 78) (list "79 - Ocarina" 79) (list "80 - Syn Square Wave" 80) (list "81 - Syn Sawtooth Wave" 81) (list "82 - Syn Calliope" 82) (list "83 - Syn Chiff" 83) (list "84 - Syn Charang" 84) (list "85 - Syn Voice" 85) (list "86 - Syn Fifths Sawtooth w-Wave" 86) (list "87 - Syn Brass and Lead" 87) (list "88 - New Age Syn Pad" 88) (list "89 - Warm Syn Pad" 89) (list "90 - Polysynth Syn Pad" 90) (list "91 - Choir Syn Pad" 91) (list "92 - Bowed Syn Pad" 92) (list "93 - Metal Syn Pad" 93) (list "94 - Halo Syn Pad" 94) (list "95 - Sweep Syn Pad" 95) (list "96 - FX Rain" 96) (list "97 - FX Soundtrack" 97) (list "98 - FX Crystal" 98) (list "99 - FX Atmosphere" 99) (list "100 - FX Brightness" 100) (list "101 - FX Goblins" 101) (list "102 - FX Echoes" 102) (list "103 - FX Sci-fi" 103) (list "104 - Sitar" 104) (list "105 - Banjo" 105) (list "106 - Shamisen" 106) (list "107 - Koto" 107) (list "108 - Kalimba" 108) (list "109 - Bag Pipe" 109) (list "110 - Fiddle" 110) (list "111 - Shanai" 111) (list "112 - Tinkle Bell" 112) (list "113 - Agogo" 113) (list "114 - Steel Drums" 114) (list "115 - Woodblock" 115) (list "116 - Taiko Drum" 116) (list "117 - Melodic Tom" 117) (list "118 - Syn Drum" 118) (list "119 - Reverse Cymbal" 119) (list "120 - Guitar Fret Noise" 120) (list "121 - Breath Noise" 121) (list "122 - Seashore" 122) (list "123 - Bird Tweet" 123) (list "124 - Telephone Ring" 124) (list "125 - Helicopter" 125) (list "126 - Applause" 126) (list "127 - Gun Shot" 127))))) (om-make-point 333 70) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 166 139) (om-make-point 18 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "" (quote midievent) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfunmenu1 (quote input-funmenu) "midi event type" "ev-type" (quote :keyon) (list (list "Note" (quote :note)) (list "KeyOn " (quote :keyon)) (list "KeyOff" (quote :keyoff)) (list "KeyPress" (quote :keypress)) (list "CtrlChange" (quote :ctrlchange)) (list "ProgChange" (quote :progchange)) (list "ChanPress" (quote :chanpress)) (list "PitchWheel/PitchBend" (quote :pitchbend)) (list "SongPos" (quote :songpos)) (list "SongSel" (quote :songsel)) (list "Clock" (quote :clock)) (list "Start" (quote :start)) (list "Continue" (quote :continue)) (list "Stop" (quote :stop)) (list "Tune" (quote :tune)) (list "ActiveSens" (quote :activesens)) (list "Reset" (quote :reset)) (list "SysEx" (quote :sysex)) (list "Stream" (quote :stream)) (list "Private" (quote :private)) (list "Process" (quote :process)) (list "DProcess" (quote :dprocess)) (list "QFrame" (quote :qframe)) (list "Ctrl14b" (quote :ctrl14b)) (list "NonRegParam" (quote :nonregparam)) (list "RegParam" (quote :regparam)) (list "SeqNum" (quote :seqnum)) (list "Textual" (quote :textual)) (list "Copyright" (quote :copyright)) (list "SeqName" (quote :seqname)) (list "InstrName" (quote :instrname)) (list "Lyric" (quote :lyric)) (list "Marker" (quote :marker)) (list "CuePoint" (quote :cuepoint)) (list "ChanPrefix" (quote :chanprefix)) (list "EndTrack" (quote :endtrack)) (list "Tempo" (quote :tempo)) (list "SMPTEOffset" (quote :smpteoffset)) (list "TimeSign" (quote :timesign)) (list "KeySign" (quote :keysign)) (list "Specific" (quote :specific)))) (om-load-inputfun (quote input-funbox) "date" "ev-date" 0) (om-load-inputfun (quote input-funbox) "track" "ev-ref" 0) (om-load-inputfun (quote input-funbox) "port" "ev-port" 0) (om-load-inputfun (quote input-funbox) "channel" "ev-chan" 1) (om-load-inputfun (quote input-funbox) "event content" "ev-fields" nil))) (om-make-point 119 179) (om-make-point 70 70) (if (find-class (quote midievent) nil) (let ((newobj (make-instance (quote midievent) :ev-type (quote :keyon) :ev-date 0 :ev-ref 0 :ev-port 0 :ev-chan 1 :ev-fields nil :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GM-PROGRAM" (quote gm-program) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "Instrument name" "PROGNAME" nil (list (list "0 - Acoustic Grand Piano" 0) (list "1 - Bright Acoustic Piano" 1) (list "2 - Electric Grand Piano" 2) (list "3 - Honki Tonk Piano" 3) (list "4 - Electric Piano 1" 4) (list "5 - Electric Piano 2" 5) (list "6 - Harpsichord" 6) (list "7 - Clavinet" 7) (list "8 - Celesta" 8) (list "9 - Glockenspiel" 9) (list "10 - Music Box" 10) (list "11 - Vibraphone" 11) (list "12 - Marimba" 12) (list "13 - Xylophone" 13) (list "14 - Tubular bells" 14) (list "15 - Dulcimer" 15) (list "16 - Drawbar Organ" 16) (list "17 - Percussive Organ" 17) (list "18 - Rock Organ" 18) (list "19 - Church Organ" 19) (list "20 - Reed Organ" 20) (list "21 - Accordion" 21) (list "22 - Harmonica" 22) (list "23 - Tango Accordion" 23) (list "24 - Nylon Acoustic Guitar" 24) (list "25 - Steel Acoustic Guitar" 25) (list "26 - Jazz Electric Guitar" 26) (list "27 - Clean Electric Guitar" 27) (list "28 - Muted Electric Guitar" 28) (list "29 - Overdrive Guitar" 29) (list "30 - Distorted Guitar" 30) (list "31 - Guitar Harmonics" 31) (list "32 - Acoustic Bass" 32) (list "33 - Electric Fingered Bass" 33) (list "34 - Electric Picked Bass" 34) (list "35 - Fretless Bass" 35) (list "36 - Slap Bass 1" 36) (list "37 - Slap Bass 2" 37) (list "38 - Synth Bass 1" 38) (list "39 - Synth Bass 2" 39) (list "40 - Violin" 40) (list "41 - Viola" 41) (list "42 - Cello" 42) (list "43 - Contrabass" 43) (list "44 - Tremolo Strings" 44) (list "45 - Pizzicato Strings" 45) (list "46 - Orchestral Harp" 46) (list "47 - Timpani" 47) (list "48 - String Ensemble 1" 48) (list "49 - String Ensemble 2" 49) (list "50 - Synth Strings 1" 50) (list "51 - Synth Strings 2" 51) (list "52 - Choir Aahs" 52) (list "53 - Voice Oohs" 53) (list "54 - Synth Voice" 54) (list "55 - Orchestra Hit" 55) (list "56 - Trumpet" 56) (list "57 - Trombone" 57) (list "58 - Tuba" 58) (list "59 - Muted Trumpet" 59) (list "60 - French Horn" 60) (list "61 - Brass Section" 61) (list "62 - Synth Brass 1" 62) (list "63 - Synth Brass 2" 63) (list "64 - Soprano Sax" 64) (list "65 - Alto Sax" 65) (list "66 - Tenor Sax" 66) (list "67 - Baritone Sax" 67) (list "68 - Oboe" 68) (list "69 - English Horn" 69) (list "70 - Bassoon" 70) (list "71 - Clarinet" 71) (list "72 - Piccolo" 72) (list "73 - Flute" 73) (list "74 - Recorder" 74) (list "75 - Pan Flute" 75) (list "76 - Bottle Blow" 76) (list "77 - Shakuhachi" 77) (list "78 - Whistle" 78) (list "79 - Ocarina" 79) (list "80 - Syn Square Wave" 80) (list "81 - Syn Sawtooth Wave" 81) (list "82 - Syn Calliope" 82) (list "83 - Syn Chiff" 83) (list "84 - Syn Charang" 84) (list "85 - Syn Voice" 85) (list "86 - Syn Fifths Sawtooth w-Wave" 86) (list "87 - Syn Brass and Lead" 87) (list "88 - New Age Syn Pad" 88) (list "89 - Warm Syn Pad" 89) (list "90 - Polysynth Syn Pad" 90) (list "91 - Choir Syn Pad" 91) (list "92 - Bowed Syn Pad" 92) (list "93 - Metal Syn Pad" 93) (list "94 - Halo Syn Pad" 94) (list "95 - Sweep Syn Pad" 95) (list "96 - FX Rain" 96) (list "97 - FX Soundtrack" 97) (list "98 - FX Crystal" 98) (list "99 - FX Atmosphere" 99) (list "100 - FX Brightness" 100) (list "101 - FX Goblins" 101) (list "102 - FX Echoes" 102) (list "103 - FX Sci-fi" 103) (list "104 - Sitar" 104) (list "105 - Banjo" 105) (list "106 - Shamisen" 106) (list "107 - Koto" 107) (list "108 - Kalimba" 108) (list "109 - Bag Pipe" 109) (list "110 - Fiddle" 110) (list "111 - Shanai" 111) (list "112 - Tinkle Bell" 112) (list "113 - Agogo" 113) (list "114 - Steel Drums" 114) (list "115 - Woodblock" 115) (list "116 - Taiko Drum" 116) (list "117 - Melodic Tom" 117) (list "118 - Syn Drum" 118) (list "119 - Reverse Cymbal" 119) (list "120 - Guitar Fret Noise" 120) (list "121 - Breath Noise" 121) (list "122 - Seashore" 122) (list "123 - Bird Tweet" 123) (list "124 - Telephone Ring" 124) (list "125 - Helicopter" 125) (list "126 - Applause" 126) (list "127 - Gun Shot" 127))))) (om-make-point 171 81) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 7 5 nil 0) (8 0 7 6 nil 0) (9 0 10 5 nil 0) (11 0 10 6 nil 0) (5 0 11 0 nil 0))) nil 6.2))
