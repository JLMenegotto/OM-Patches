; OM File Header - Saved 2022/07/30 9:49:05
; (6.2 :patc (om-make-point 45.0 70) (om-make-point -8 -8) (om-make-point 1540 596) "" 183 0 "2022/07/26 7:10:33" "2022/07/28 17:30:00")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "Unificado" (quote ((let ((box (om-load-boxin "acorde" 5 (om-make-point 613 5) "" "acorde" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "voz" 4 (om-make-point 577 4) "" "voz" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "tempos" 3 (om-make-point 516 3) "" "tempos" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 549 331) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 379 339) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 410 415) (om-make-point 50 32) (list 4 4) "(4 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "tonica" 2 (om-make-point 469 4) "" "tonica" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "Esca" 1 (om-make-point 413 4) "" "Esca" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "Coord" 0 (om-make-point 356 3) "" "Coord" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 2" 1 (om-make-point 546 572) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "Alturas" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 373 569) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "Tempos" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MKTREE" (quote mktree) (quote ((om-load-inputfun (quote input-funbox) "list of integer ratios" "RHYTHM" (list 1/4 1/4 1/4 1/4)) (om-load-inputfun (quote input-funbox) "list of time signatures" "TIMESIGNS" (list 4 4)))) (om-make-point 376 474) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "lispfunction" (om-load-lisp-abspatch "lispfunction" 6.2 "(lambda ( toques escala tonica tempos voz aco)$$         (setq$               notas   '()$               ritmo   '()$               escala1 '()$               escala2 '()$               tot      (length toques)$               i        0$               metade   (/ tot  2)$               quarta   (/ tot  4)$               decimo   (/ tot 10)$               tom      tonica$               escalat  escala$               moda     0$               modd     0$          )$$          (repeat (length escala) (setq escala1 (append '(1) escala1)))$          (repeat (length escala) (setq escala2 (append '(2) escala2)))$$          (repeat voz $                      (setq notas (append (list (* tom 100)) notas))$                      (setq ritmo (append (list  -1        ) ritmo))$          )             $$          (setq mt (length tempos ))$          (setq me (length escala ))$$          (repeat tot$                      (setq toq   (nth i toques)$                            moda  (mod  toq  me)$                            modd  (mod  toq  mt)$$                            tom   (cond   ((eq (mod i  8) t) (+ tom 1))$                                          ((eq (mod i  3) t) (+ tom 3))$                                          ((eq (mod i  2) t) (+ tom 4))$                                          ( t                   tom   )$                                  )$$                            claal (+ (* tom 100) (* 100 (nth moda escalat)))$                            altur (if aco  (cond $                                                 ((eq (mod i 8) 0)  (list  claal (+ claal  300) (+ claal  700))) $                                                 ((eq (mod i 4) 0)  (list  claal (- claal  400) (+ claal  700)))  $                                                 (t                        claal                               )$                                           )$                                           claal$                                  ) $                            durac (/    1  (nth modd tempos))$                            notas (append notas (list altur))$                            ritmo (append ritmo (list durac))  $                            i     (1+ i)$                      )$         ) $         (list ritmo notas) $)$$$") (quote ((om-load-inputfun (quote input-funbox) "" "TOQUES" nil) (om-load-inputfun (quote input-funbox) "" "ESCALA" nil) (om-load-inputfun (quote input-funbox) "" "TONICA" nil) (om-load-inputfun (quote input-funbox) "" "TEMPOS" nil) (om-load-inputfun (quote input-funbox) "" "VOZ" nil) (om-load-inputfun (quote input-funbox) "" "ACO" nil))) (om-make-point 450 120) nil (list nil) nil "lispfunction"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((12 0 3 0 nil 0) (12 0 4 0 nil 0) (3 0 9 0 nil 0) (11 0 10 0 nil 0) (4 0 11 0 nil 0) (5 0 11 1 nil 0) (8 0 12 0 nil 0) (7 0 12 1 nil 0) (6 0 12 2 nil 0) (2 0 12 3 nil 0) (1 0 12 4 nil 0) (0 0 12 5 nil 0))) nil 6.2))
