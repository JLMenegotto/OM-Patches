; OM File Header - Saved 2022/08/04 14:01:54
; (6.2 :patc (om-make-point 661.0 190) (om-make-point -161 55) (om-make-point 1920 658) "" 183 0 "2022/08/04 12:24:47" "2022/08/04 12:33:05")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "acordes_lista" (quote ((let ((box (om-load-boxout "output 2" 1 (om-make-point 385 378) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "onsets" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 386 294) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "inverte3" 4 (om-make-point 489 45) "" "inverte3" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "inverte2" 3 (om-make-point 422 45) "" "inverte2" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "inverte1" 2 (om-make-point 356 45) "" "inverte1" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "dura" 1 (om-make-point 306 45) "" "dura" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "grau" 0 (om-make-point 256 45) "" "grau" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 335 379) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "notas" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 341 296) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Acordes_Listas" (om-load-lisp-abspatch "Acordes_Listas" 6.2 "(lambda ( graus durs i j k ) $          $          (setq acordes (loop for n from 0 to (1- (length graus)) collect (list $                                                                                (* 100 (+ (nth n graus) 0 i))$                                                                                (* 100 (+ (nth n graus) 4 j))$                                                                                (* 100 (+ (nth n graus) 7 k))))$                onsets  (loop for n from 0 to (1- (length durs )) collect (abs             (nth n durs)))$          )$          (list acordes  onsets)$)$") (quote ((om-load-inputfun (quote input-funbox) "" "GRAUS" nil) (om-load-inputfun (quote input-funbox) "" "DURS" nil) (om-load-inputfun (quote input-funbox) "" "I" nil) (om-load-inputfun (quote input-funbox) "" "J" nil) (om-load-inputfun (quote input-funbox) "" "K" nil))) (om-make-point 334 169) nil (list (list (list (list 6000 6400 6700) (list 7200 7600 7900) (list 8400 8800 9100) (list 9600 10000 10300)) (list 0 500 1000 1500))) nil "Acordes_Listas"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (9 0 1 0 nil 0) (8 0 7 0 nil 0) (9 0 8 0 nil 0) (6 0 9 0 nil 0) (5 0 9 1 nil 0) (4 0 9 2 nil 0) (3 0 9 3 nil 0) (2 0 9 4 nil 0))) nil 6.2))
