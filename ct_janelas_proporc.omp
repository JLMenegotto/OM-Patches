; OM File Header - Saved 2022/08/04 14:01:52
; (6.2 :patc (om-make-point 22.0 10) (om-make-point -8 -8) (om-make-point 1920 978) "" 183 0 "2022/07/15 8:56:06" "2022/07/25 16:14:33")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"C:Intervalos.omp\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "ct_janelas_proporc" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 28" (quote t) (quote nil) (om-make-point 1626 210) (om-make-point 51 32) 1100 "1100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 27" (quote t) (quote nil) (om-make-point 1525 210) (om-make-point 28 32) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 26" (quote t) (quote nil) (om-make-point 1417 131) (om-make-point 28 32) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "Intervalos 4" (quote ("elements" "Intervalos")) (quote ((om-load-inputfun (quote input-funbox) "" "Lista de Alturas" (list 1 2 3 4 5)) (om-load-inputfun (quote input-funbox) "" "Notas desloca" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1355 174) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 25" (quote t) (quote nil) (om-make-point 1434 210) (om-make-point 36 32) 76 "76" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 24" (quote t) (quote nil) (om-make-point 1473 210) (om-make-point 50 32) (list 4 4) "(4 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 23" (quote t) (quote nil) (om-make-point 1528 377) (om-make-point 36 32) 60 "60" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 1509 81) (om-make-point 38 32) (list 0) "(0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Notas 4" (om-load-lisp-abspatch "Notas" 6.2 "(lambda ( toques tonic tra)$$         (setq tot     (length toques)$               notas  '( )$               escala '(0 2 3 5 7 9 10 12)$               i        0$         )$         (repeat tot$                 (setq toq    (nth i    toques)$                       j      (mod toq (length escala))  $                 )$                 (setq alt    (+ (* 100 tonic) (* 100 (nth j escala)) tra)$                       i      (+ i 1)$                       notas  (append notas (list alt))  $                 )$         ) $         notas  $)$") (quote ((om-load-inputfun (quote input-funbox) "" "TOQUES" nil) (om-load-inputfun (quote input-funbox) "" "TONIC" nil) (om-load-inputfun (quote input-funbox) "" "TRA" nil))) (om-make-point 1571 259) nil (list (append (list 6600 6600 6400 6900 7100 6200 5900 6200 6900 6900 6600 5900 6400 6100 6600 6800 6900 6400 6400 6200 6400 6800 6100 6100 6100 6100 6100 6100 6100 6100 6100 6100 6100 6100 6100 6100 6100 6100 5900 6900 6400 6900 5900 6400 5900 6900 6400 6900 5900 6400 5900 6900 6400 6900 5900 6400 5900 6900 6400 6900 5900 6400 5900 6900 6400 6900 5900 6400 5900 6900 6400 6900 5900 6400 5900 6900 6400 6900 5900 6400 5900 6900 6400 6900 5900 6400 5900 6800 6400 6800 5900 6400 5900 6800 6400 6800 5900 6400 5900 6800 6400 6800 5900 6400 5900 6800 6400 6800 5900 6400 5900 6800 6400 6800 5900 6400 5900 6800 6400 6800 5900 6400 5900 6800 6400 6800 5900 6400 5900 6800 6400 6800 5900 6400 7100 6800 6200 6800 7100 6200 7100 6800 6200 6800 7100 6200 7100 6800 6200 6800 7100 6200 7100 6800 6200 6800 7100 6200 7100 6800 6200 6800 7100 6200 7100 6800 6200 6800 7100 6200 7100 6800 6200 6800 7100 6200 7100 6800 6200 6800 7100 6200 7100 6600 6200 6600 7100 6200 7100 6600 6200 6600 7100 6200 7100 6600 6200 6600 7100 6200 7100 6600 6200 6600 7100 6200 7100 6600 6200 6600 7100 6200 7100 6600 6200 6600 7100 6200 7100 6600 6200 6600 7100 6200 7100 6600 6200 6600 7100 6200 5900 6200 6800 6200 5900 6800 5900 6200 6800 6200 5900 6800 5900 6200 6800 6200 5900 6800 5900 6200 6800 6200 5900 6800 5900 6200 6800 6200 5900 6800 5900 6200 6800 6200 5900 6800 5900 6200 6800 6200 5900 6800 5900 6200 6800 6200 5900 6800 5900 6400 6800 6400 5900 6800 5900 6400 6800 6400 5900 6800 5900 6400 6800 6400 5900 6800 5900 6400 6800 6400 5900 6800 5900 6400 6800 6400 5900 6800 5900 6400 6800 6400 5900 6800 5900 6400 6800 6400 5900 6800 5900 6400 6800 6400 5900 6800 6100 6400 6900 6400 6100 6900 6100 6400 6900 6400 6100 6900 6100 6400 6900 6400 6100 6900 6100 6400 6900 6400 6100 6900 6100 6400 6900 6400 6100 6900 6100 6400 6900 6400 6100 6900 6100 6400 6900 6400 6100 6900 6100 6400 6900 6400 6100 6900 6100 6600 6900 6600 6100 6900 6100 6600 6900 6600 6100 6900 6100 6600 6900 6600 6100 6900 6100 6600 6900 6600 6100 6900 6100 6600 6900 6600 6100 6900 6100 6600 6900 6600 6100 6900 6100 6600 6900 6600 6100 6900 6100 6600 6900 6600 6100 6900 6600 6200 7100 6200 6600 7100 6600 6200 7100 6200 6600 7100 6600 6200 7100 6200 6600 7100 6600 6200 7100 6200 6600 7100 6600 6200 7100 6200 6600 7100 6600 6200 7100 6200 6600 7100 6600 6200 7100 6200 6600 7100 6600 6200 7100 6200 6600 7100 6600 6100 7100 6100 6600 7100 6600 6100 7100 6100 6600 7100 6600 6100 7100 6100 6600 7100 6600 6100 7100 6100 6600 7100 6600 6100 7100 6100 6600 7100 6600 6100 7100 6100 6600 7100 6600 6100 7100 6100 6600 7100 6600 6100 7100 6100 6600 7100 6400 6100 6900 6100 6400 6900 6400 6100 6900 6100 6400 6900 6400 6100 6900 6100 6400 6900 6400 6100 6900 6100 6400 6900 6400 6100 6900 6100 6400 6900 6400 6100 6900 6100 6400 6900 6400 6100 6900 6100 6400 6900 6400 6100 6900 6100 6400 6900 6400 5900 6900 5900 6400 6400 5900 6900 5900 6400 6900 6400 5900 6900 5900 6400 6900 6400 5900 6900 5900 6400 6900 6400 5900 6900 5900 6400 6900 6400 5900 6900 5900 6400 6900 6400 5900 6900 5900 6400 6900 6400 5900 6900 5900 6400 6900 7100 6200 6600 6200 7100 6600 7100 6200 6600 6200 7100 6600 7100 6200 6600 6200 7100 6600 7100 6200 6600 6200 7100 6600 7100 6200 6600 6200 7100 6600 7100 6200 6600 6200 7100 6600 7100 6200 6600 6200 7100 6600 7100 6200 6600 6200 7100 6600 6800 7100 6200 7100 6800 6200 6800 7100 6200 7100 6800 6200 6800 7100 6200 7100 6800 6200 6800 7100 6200 7100 6800 6200 6800 7100 6200 7100 6800 6200 6800 7100 6200 7100 6800 6200 6800 7100 6200 7100 6800 6200 6800 7100 6200 7100 6800 6200 6800 5900 6200 5900 6800 6200 6800 5900 6200 5900 6800 6200 6800 5900 6200 5900 6800 6200 6800 5900 6200 5900 6800 6200 6800 5900 6200 5900 6800 6200 6800 5900 6200 5900 6800 6200 6800 5900 6200 5900 6800 6200 6800 5900 6200 5900 6800 6200 6200 6800 7100 6800 6200 7100 6200 6800 7100 6800 6200 7100 6200 6800 7100 6800 6200 7100 6200 6800 7100 6800 6200 7100 6200 6800 7100 6800 6200 7100 6200 6800 7100 6800 6200 7100 6200 6800 7100 6800 6200 7100 6200 6800 7100 6800 6200 7100 6400 6800 5900 6800 6400 5900 6400 6800 5900 6800 6400 5900 6400 6800 5900 6800 6400 5900 6400 6800 5900 6800 6400 5900 6400 6800 5900 6800 6400 5900 6400 6800 5900 6800 6400 5900 6400 6800 5900 6800 6400 5900 6400 6800 5900 6800 6400 5900 6400 6900 5900 6900 6400 5900 6400 6900 5900 6900 6400 5900 6400 6900 5900 6900 6400 5900 6400 6900 5900 6900 6400 5900 6400 6900 5900 6900 6400 5900 6400 6900 5900 6900 6400 5900 6400 6900 5900 6900 6400 5900 6400 6900 5900 6900 6400 5900 6100 7100 6600 7100 6100 6600 6100 7100 6600 7100 6100 6600 6100 7100 6600 7100 6100 6600 6100 7100 6600 7100 6100 6600 6100 7100 6600 7100 6100 6600 6100 7100 6600 7100 6100 6600 6100 7100 6600 7100 6100 6600 6100 7100 6600 7100 6100 6600 6100 6900 6600 6900 6100 6600 6100 6900 6600 6900 6100 6600 6100 6900 6600 6900 6100 6600 6100 6900 6600 6900 6100 6600 6100 6900 6600 6900 6100 6600 6100 6900 6600 6900 6100 6600 6100 6900 6600 6900 6100 6600 6100 6900 6600 6900 6100 6600 7100 6800 6200 6800 7100 6200 7100 6800 6200 6800 7100 6200 7100 6800 6200 6800 7100 6200 7100 6800 6200 6800 7100 6200 7100 6800 6200 6800 7100 6200 7100 6800 6200 6800 7100 6200 7100 6800 6200 6800 7100 6200 7100 6800 6200 6800 7100 6200 7100 6600 6100 6600 7100 6100 7100 6600 6100 6600 7100 6100 7100 6600 6100 6600 7100 6100 7100 6600 6100 6600 7100 6100 7100 6600 6100 6600 7100 6100 7100 6600 6100 6600 7100 6100 7100 6600 6100 6600 7100 6100 7100 6600 6100 6600 7100 6100 6900 6600 6100 6600 6900 6100 6900 6600 6100 6600 6900 6100 6900 6600 6100 6600 6900 6100 6900 6600 6100 6600 6900 6100 6900 6600 6100 6600 6900 6100 6900 6600 6100 6600 6900 6100 6900 6600 6100 6600 6900 6100 6900 6600 6100 6600 6900 6100 5900 6400 6800 6400 5900 6800 5900 6400 6800 6400 5900 6800 5900 6400 6800 6400 5900 6800 5900 6400 6800 6400 5900 6800 5900 6400 6800 6400 5900 6800 5900 6400 6800 6400 5900 6800 5900 6400 6800 6400 5900 6800 5900 6400 6800 6400 5900 6800 5900 6400 6900 6400 5900 6900 5900 6400 6900 6400 5900 6900 5900 6400 6900 6400 5900 6900 5900 6400 6900 6400 5900 6900 5900 6400 6900 6400 5900 6900 5900 6400 6900 6400 5900 6900 5900 6400 6900 6400 5900 6900 5900 6400 6900 6400 5900 6900 7100 7100 7100 7100 7100 7100 7100 7100 7100 7100 7100 7100 7100 7100 7100 7100 6800 6800 7100 6200 7100 6800 6200 6100 7100 6600 7100 6100 6600 6600 6900 6100 6900 6600 6100 5900 6900 6400 6900 5900 6400 6400 6800 5900 6800 6400 5900 7100 6600 6200 6600 7100 6200 6200 6800 7100 6800 6200 7100 6900 6400 5900 6400 6900 5900 6100 6600 6900 6600 6100 6900 7100 6600 6100 6600 7100 6100 5900 6400 6800 6400 5900 6800 7100 7100 6200 5900 6800 5900 6200 6800 6900 5900 6400 5900 6900 6400 6400 6100 6900 6100 6400 6900 7100 6100 6600 6100 7100 6600 7100 6200 6800 6200 7100 6800 6600 6200 7100 6200 6600 7100 6200 6600 7100 6600 6200 7100 6900 6600 6100 6600 6900 6100 6900 6400 6100 6400 6900 6100 5900 6400 6800 6400 5900 6800 6800 6200 5900 6200 6800 5900 6200 6800 7100 6800 6200 7100 5900 5900 6600 6900 6100 5900 6900 6400 6400 6800 5900 7100 6600 6200 6200 6800 7100 6900 6400 5900 6100 6600 6900 7100 6600 6100 5900 6400 6800 7100 6200 5900 6800 6900 5900 6400 6400 6100 6900 7100 6100 6600 7100 6200 6800 6600 6200 7100 6200 6600 7100 6900 6600 6100 6900 6400 6100 5900 6400 6800 6800 6200 5900 6200 6800 7100 5900 6800 7100 6200 7100 6800 6200 6100 7100 6600 7100 6100 6600 6600 6900 6100 6900 6600 6100 5900 6900 6400 6900 5900 6400 6400 6800 5900 6800 6400 5900 7100 6600 6200 6600 7100 6200 6200 6800 7100 6800 6200 7100 6900 6400 5900 6400 6900 5900 6100 6600 6900 6600 6100 6900 7100 6600 6100 6600 7100 6100 5900 6400 6800 6400 5900 6800 7100 7100 6200 5900 6800 5900 6200 6800 6900 5900 6400 5900 6900 6400 6400 6100 6900 6100 6400 6900 7100 6100 6600 6100 7100 6600 7100 6200 6800 6200 7100 6800 6600 6200 7100 6200 6600 7100 6200 6600 7100 6600 6200 7100 6900 6600 6100 6600 6900 6100 6900 6400 6100 6400 6900 6100 5900 6400 6800 6400 5900 6800 6800 6200 5900 6200 6800 5900 6200 6800 7100 6800 6200 7100 5900 5900 6600 6900 6100 5900 6900 6400 6400 6800 5900 7100 6600 6200 6200 6800 7100 6900 6400 5900 6100 6600 6900 7100 6600 6100 5900 6400 6800 7100 6200 5900 6800 6900 5900 6400 6400 6100 6900 7100 6100 6600 7100 6200 6800 6600 6200 7100 6200 6600 7100 6900 6600 6100 6900 6400 6100 5900 6400 6800 6800 6200 5900 6200 6800 7100 5900 6600 7100 6100 6600 7100 6100 6800 6400 6900 6100 6100 6400 5900 6900 6600 6900 6800 6400 7100 7100 6900 6400 6800 6600 6600 6600 7100 6200 6600 7100 6200 7100 6600 6100 7100 6600 6100 6400 6900 6100 6400 6900 6100 6900 6400 5900 6900 6400 5900 6200 6800 5900 6200 6800 5900 6600 7100 6200 6600 7100 6200 7100 6600 6100 7100 6600 6100 6400 6900 6100 6400 6900 6100 6900 6400 5900 6900 6400 5900 6200 6800 5900 6200 6800 5900 6100 7100 6800 6900 6200 5900 6100 6600 6200 7100 6800 7100 5900 6400 6100 6900 6600 6400 6600 6900 5900 7100 5900 6400 6100 6600 6800 6800 6400 6100 6200 5900 6900 6900 6600 6200 6400 6100 7100 5900 6100 6600 6200 6800 6900 7100 6800 6400 6600 6200 5900 6100 6200 6800 6400 6900 7100 7100 6900 6600 6800 6200 6100 6400 6800 6600 7100 5900 6200 7100 5900 6400 6900 6800 6900 6200 5900 6100 6800 6600 6100 7100 6800 6900 6200 6400 5900 6100 6600 6200 7100 6800 7100 5900 6400 6100 6900 6600 6400 6600 6900 7100 6200 5900 7100 5900 6400 6100 6600 6800 6800 6400 6100 6200 5900 6900 6900 6600 6200 6400 6100 7100 5900 6100 6600 6200 6800 6900 7100 6800 6400 6600 6200 5900 6100 6200 6800 6400 6900 7100 7100 6900 6600 6800 6200 6100 6400 6800 6600 7100 5900 6200 7100 5900 6400 6900 6800 6900 6200 5900 6100 6200 7100 6400 6600 6800 6900 6200 6100 7100 6400 6600 6900 6100 5900 7100 6200 6100 5900 6600 6800 7100 6400 6200 6600 6400 7100 5900 6100 6900 6600 6400 7100 6100 6200 6800 6900 5900 6400 6200 6100 6800 6900 7100 5900 6100 6200 6900 6800 6600 6100 6200 6400 7100 6900 6800 7100 6800 6600 5900 6200 6400 7100 6900 6800 6100 6200 6600 6200 6400 6600 5900 7100 6800 5900 7100 6900 6200 6400 6800 6100 5900 6900 6800 6800 6800 6900 7100 6100 6200 6400 6600 6900 7100 5900 6100 6400 6600 6600 6800 5900 6900 6600 6200 6100 5900 7100 6800 6900 7100 5900 6200 6400 5900 6100 6400 6600 6800 6600 6800 6800 6800 6800 6800 6800 6800 6800 6800 6800 6800 6800 6800 6800 6800) (list 6800 6800 6800 6200 7100 7100 7100 7100 7100 7100 7100 7100 5900 6100 6900 6800 6600 6400 6100 5900 7100 6900 6600 6400 6200 6100 7100 6900 6800 6800 5900 6100 6200 6600 6900 5900 6100 6200 6400 6800 6600 6400 6200 5900 7100 6900 6800 6600 6400 6100 5900 6200 6200 6100 7100 6900 6800 6600 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 7100 6100 6900 6600 6900 6100 6600 6100 6900 6600 6900 6100 6600 6100 6900 6600 6900 6100 6600 6100 6900 6600 6900 6100 6600 6800 6900 7100 6100 6200 6400 6600 6900 7100 5900 6100 6400 6600 6600 6200 6100 5900 7100 6800 6800 6400 6200 6100 5900 6900 6900 7100 5900 6200 6400 6600 6800 6900 5900 6100 7100 5900 6100 6400 6600 6800 6900 6600 6400 5900 6100 6200 6600 6800 7100 6800 6600 6400 6200 5900 6100 6200 6400 6800 6900 7100 5900 7100 6900 6600 6400 6100 6400 6600 6800 6900 5900 6900 6800 6400 6200 6100 7100 6200 5900 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 5900 7100 6900 6600 6400 6100 6400 6600 6800 6900 7100 6900 6800 6400 6200 6100 7100 6200 6100 7100 6900 6600 6400 6200 6100 7100 6900 6800 6600 6200 6100 5900 7100 6800 6600 6400 6200 5900 7100 6900 6800 6400 6200 6100 6100 6200 6600 6800 6900 7100 6200 6100 5900 7100 6800 6600 6400 6100 6200 6400 6800 6900 7100 5900 5900 6900 6800 6600 6600 6900 7100 5900 5900 7100 6800 6600 6400 6200 5900 6800 7100 6100 6200 6900 6400 5900 6600 6600 6600 6600 6600 6600 7100 7100 7100 7100 7100 7100 6400 5900 7100 6800 6800 5900 5900 6200 7100 6200 5900 6400 6400 6400 6200 6200 6200 6200 6200 6200 6200 5900 5900 6800 6800 6200 6200 6900 6900 5900 5900 6400 6400 5900 5900 6900 6900 6400 6400 6900 6900 6100 6100 6400 6400 6100 6100 6900 6900 6400 6400 7100 7100 6100 6100 6600 6600 6100 6100 7100 7100 6600 6600 6800 6800 6200 6200 5900 5900 6200 6200 6800 6800 5900 5900 6800 6800 6400 6400 5900 5900 6400 6400 6800 6800 5900 5900 6900 6900 6400 6400 6100 6100 6400 6400 6900 6900 6100 6100 7100 7100 6800 6800 6200 6200 6400 6400 6800 6800 5900 5900 6800 6800 6400 6400 5900 5900 6400 6400 6900 6900 5900 5900 6900 6900 6400 6400 5900 5900 6900 6900 6100 6100 6900 6900 6600 6600 6100 6100 6200 6200 6600 6600 7100 7100 6900 6900 6600 6600 6100 6100 6600 6600 6200 6200 7100 7100 7100 7100 6200 6200 6600 6600 6600 6600 6200 6200 7100 7100 7100 7100 6200 6200 6600 6600 7100 7100 6600 6600 6200 6200 6100 6100 6600 6600 6900 6900 6800 6800 5900 5900 6200 6200 5900 5900 6800 6800 6200 6200 6900 6900 5900 5900 6400 6400 5900 5900 6900 6900 6400 6400 6900 6900 6100 6100 6400 6400 6100 6100 6900 6900 6400 6400 7100 7100 6100 6100 6600 6600 6100 6100 7100 7100 6600 6600 6800 6800 6200 6200 5900 5900 6200 6200 6800 6800 5900 5900 6800 6800 6400 6400 5900 5900 6400 6400 6800 6800 5900 5900 6900 6900 6400 6400 6100 6100 6400 6400 6900 6900 6100 6100 6200 6200 6800 6800 7100 7100 6800 6800 6200 6200 7100 7100 6400 6400 6800 6800 5900 5900 6800 6800 6400 6400 5900 5900 6400 6400 6900 6900 5900 5900 6900 6900 6400 6400 5900 5900 6600 6600 6900 6900 6100 6100 6900 6900 6600 6600 6100 6100 6200 6200 6600 6600 7100 7100 6900 6900 6600 6600 6100 6100 6600 6600 6200 6200 7100 7100 7100 7100 6200 6200 6600 6600 6600 6600 6200 6200 7100 7100 7100 7100 6200 6200 6600 6600 7100 7100 6600 6600 6200 6200 6100 6100 6600 6600 6900 6900 6800 6800 5900 5900 6200 6200 5900 5900 6800 6800 6200 6200 6900 6900 5900 5900 6400 6400 5900 5900 6900 6900 6400 6400 6900 6900 6100 6100 6400 6400 6100 6100 6900 6900 6400 6400 7100 7100 6100 6100 6600 6600 6100 6100 7100 7100 6600 6600 6800 6800 6200 6200 5900 5900 6200 6200 6800 6800 5900 5900 6800 6800 6400 6400 5900 5900 6400 6400 6800 6800 5900 5900 6900 6900 6400 6400 6100 6100 6400 6400 6900 6900 6100 6100 6200 6200 6800 6800 7100 7100 6800 6800 6200 6200 7100 7100 6400 6400 6800 6800 5900 5900 6800 6800 6400 6400 5900 5900 6400 6400 6900 6900 5900 5900 6900 6900 6400 6400 5900 5900 6600 6600 6900 6900 6100 6100 6900 6900 6600 6600 6100 6100 6200 6200 6600 6600 7100 7100 6900 6900 6600 6600 6100 6100 6600 6600 6200 6200 7100 7100 7100 7100 6200 6200 6600 6600 6600 6600 6200 6200 7100 7100 7100 7100 6200 6200 6600 6600 7100 7100 6600 6600 6200 6200 6100 6100 6600 6600 6900 6900 6800 6800 5900 5900 6200 6200 5900 5900 6800 6800 6200 6200 6900 6900 5900 5900 6400 6400 5900 5900 6900 6900 6400 6400 6900 6900 6100 6100 6400 6400 6100 6100 6900 6900 6400 6400 7100 7100 6100 6100 6600 6600 6100 6100 7100 7100 6600 6600 6800 6800 6200 6200 5900 5900 6200 6200 6800 6800 5900 5900 6800 6800 6400 6400 5900 5900 6400 6400 6800 6800 5900 5900 6900 6900 6400 6400 6100 6100 6400 6400 6900 6900 6100 6100 6200 6200 6800 6800 7100 7100 6800 6800 6200 6200 7100 7100 6400 6400 6800 6800 5900 5900 6800 6800 6400 6400 5900 5900 6400 6400 6900 6900 5900 5900 6900 6900 6400 6400 5900 5900 6600 6600 6900 6900 6100 6100 6900 6900 6600 6600 6100 6100 6200 6200 6600 6600 7100 7100 6900 6900 6600 6600 6100 6100 6600 6600 6200 6200 7100 7100 7100 7100 6200 6200 6600 6600 6600 6600 6200 6200 7100 7100 7100 7100 6200 6200 6600 6600 7100 7100 6600 6600 6200 6200 6100 6100 6600 6600 6900 6900 6200 6200 5900 5900 6800 6800 6400 6400 5900 5900 6900 6900 6400 6400 6100 6100 6900 6900 6600 6600 6100 6100 7100 7100 5900 5900 6200 6200 6800 6800 5900 5900 6400 6400 6800 6800 6100 6100 6400 6400 6900 6900 7100 7100 6800 6800 6200 6200 5900 5900 6800 6800 6400 6400 5900 5900 6900 6900 6400 6400 6100 6100 6900 6900 6600 6600 6200 6200 6600 6600 7100 7100 6900 6900 6600 6600 6100 6100 6600 6600 6200 6200 7100 7100 7100 7100 6200 6200 6600 6600 6200 6200 5900 5900 6800 6800 6400 6400 5900 5900 6900 6900 6400 6400 6100 6100 6900 6900 6600 6600 6100 6100 7100 7100 5900 5900 6200 6200 6800 6800 5900 5900 6400 6400 6800 6800 6100 6100 6400 6400 6900 6900 5900 5900 6800 6800 6400 6400 5900 5900 6900 6900 6400 6400 6100 6100 6900 6900 6600 6600 6900 6900 6600 6600 6100 6100 6600 6600 6200 6200 7100 7100 7100 7100 6200 6200 6600 6600 6800 5900 6400 6100 6900 6400 6900 6100 6600 6600 6400 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6100 6800 6900 5900 6100 6400 6100 5900 7100 6600 6900 6400 6200 6100 7100 6800 6900 5900 6100 6200 6600 6800 6900 7100 6800 6600 6400 6200 5900 6100 6200 6400 6800 6900 7100 5900 6900 6800 6600 6400 6100 5900 7100 6900 6600 6400 6200 6100 7100 6900 6800 5900 6100 6200 6600 6600 7100 6800 6600 6200 6100 5900 7100 6800 5900 6100 6200 6400 6800 6400 6400 6200 5900 6900 6800 6600 6400 6600 6900 7100 5900 6400 6200 6100 6100 6100 6100 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6800 6400 6200 6100 5900 6900 7100 5900 6200 6400 6600 6600 6900 6100 6900 6600 6100 6600 6900 6100 6900 6600 6100 6600 6900 6100 6900 6600 6100 6600 6900 6100 6900 6600 6100 6400 6600 6900 7100 5900 6200 6800 7100 7100 7100 6100 6200 6400 6600 6900 6800 6600 6400 6100 5900 7100 6900 6800 6800 6800 6900 5900 6100 6200 6600 6800 7100 6800 6600 6400 6200 5900 6100 6200 6400 6800 6900 7100 5900 7100 7100 7100 7100 7100 7100 7100 7100 7100 7100 7100 7100 7100 7100 7100 7100 7100 7100 7100 7100 7100 7100 7100 7100 7100 7100 7100 7100 5900 6100 6200 6600 6800 7100 7100 6800 6600 6400 6200 5900 6800 6800 6800 6800 6800 6800 6800 6800 6800 6800 6800 6800 6800 6800 6800 6800 6800 6800 6800 6800 6800 6800 6800 6800 6800 6800 6800 6800 6800 6800 6800 6800 6800 6800 6800 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 6200 7100 6900 7100 6100 6200 6400 6400 6100 5900 7100 6900 6600 6900 7100 5900 6200 6400 6600 6600 6200 6100 5900 7100 6800 6800 6400 6200 6100 5900 6900 7100 5900 6100 6400 6600 6800 6900 6600 6400 6200 6100 7100 7100 7100 7100 5900 7100 6200 6200 6200 6900 6900 7100 7100 7100 7100 7100 6900 7100 7100 7100 6900 6800 6800 6800 5900 6800 5900 6600 6600))) nil "Notas"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMQUANTIFY 3" (quote omquantify) (quote ((om-load-inputfun (quote input-funbox) "durations (list)" "SELF" (list 100)) (om-load-inputfun (quote input-funbox) "tempi (number or list)" "TEMPI" 76) (om-load-inputfun (quote input-funbox) "list of time signature(s)" "MEASURES" (list 4 4)) (om-load-inputfun (quote input-funbox) "maximum subdivision" "MAX/" 8))) (om-make-point 1451 259) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE 4" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 1449 411) (om-make-point 130 70) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (63/4 (((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) (1 (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) 1 (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((3 4) ((1 (1 1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1339 418) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 22" (quote t) (quote nil) (om-make-point 1588 210) (om-make-point 36 32) 48 "48" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 21" (quote t) (quote nil) (om-make-point 1292 216) (om-make-point 43 32) 700 "700" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 20" (quote t) (quote nil) (om-make-point 1191 216) (om-make-point 28 32) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 19" (quote t) (quote nil) (om-make-point 1083 137) (om-make-point 28 32) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "Intervalos 3" (quote ("elements" "Intervalos")) (quote ((om-load-inputfun (quote input-funbox) "" "Lista de Alturas" (list 1 2 3 4 5)) (om-load-inputfun (quote input-funbox) "" "Notas desloca" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1021 180) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 18" (quote t) (quote nil) (om-make-point 1100 216) (om-make-point 36 32) 76 "76" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 15" (quote t) (quote nil) (om-make-point 1139 216) (om-make-point 50 32) (list 4 4) "(4 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 14" (quote t) (quote nil) (om-make-point 1194 383) (om-make-point 36 32) 60 "60" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 1175 87) (om-make-point 38 32) (list 0) "(0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Notas 3" (om-load-lisp-abspatch "Notas" 6.2 "(lambda ( toques tonic tra)$$         (setq tot     (length toques)$               notas  '( )$               escala '(0 2 3 5 7 9 10 12)$               i        0$         )$         (repeat tot$                 (setq toq    (nth i    toques)$                       j      (mod toq (length escala))  $                 )$                 (setq alt    (+ (* 100 tonic) (* 100 (nth j escala)) tra)$                       i      (+ i 1)$                       notas  (append notas (list alt))  $                 )$         ) $         notas  $)$") (quote ((om-load-inputfun (quote input-funbox) "" "TOQUES" nil) (om-load-inputfun (quote input-funbox) "" "TONIC" nil) (om-load-inputfun (quote input-funbox) "" "TRA" nil))) (om-make-point 1237 265) nil (list (append (list 6200 6200 6000 6500 6700 5800 5500 5800 6500 6500 6200 5500 6000 5700 6200 6400 6500 6000 6000 5800 6000 6400 5700 5700 5700 5700 5700 5700 5700 5700 5700 5700 5700 5700 5700 5700 5700 5700 5500 6500 6000 6500 5500 6000 5500 6500 6000 6500 5500 6000 5500 6500 6000 6500 5500 6000 5500 6500 6000 6500 5500 6000 5500 6500 6000 6500 5500 6000 5500 6500 6000 6500 5500 6000 5500 6500 6000 6500 5500 6000 5500 6500 6000 6500 5500 6000 5500 6400 6000 6400 5500 6000 5500 6400 6000 6400 5500 6000 5500 6400 6000 6400 5500 6000 5500 6400 6000 6400 5500 6000 5500 6400 6000 6400 5500 6000 5500 6400 6000 6400 5500 6000 5500 6400 6000 6400 5500 6000 5500 6400 6000 6400 5500 6000 6700 6400 5800 6400 6700 5800 6700 6400 5800 6400 6700 5800 6700 6400 5800 6400 6700 5800 6700 6400 5800 6400 6700 5800 6700 6400 5800 6400 6700 5800 6700 6400 5800 6400 6700 5800 6700 6400 5800 6400 6700 5800 6700 6400 5800 6400 6700 5800 6700 6200 5800 6200 6700 5800 6700 6200 5800 6200 6700 5800 6700 6200 5800 6200 6700 5800 6700 6200 5800 6200 6700 5800 6700 6200 5800 6200 6700 5800 6700 6200 5800 6200 6700 5800 6700 6200 5800 6200 6700 5800 6700 6200 5800 6200 6700 5800 5500 5800 6400 5800 5500 6400 5500 5800 6400 5800 5500 6400 5500 5800 6400 5800 5500 6400 5500 5800 6400 5800 5500 6400 5500 5800 6400 5800 5500 6400 5500 5800 6400 5800 5500 6400 5500 5800 6400 5800 5500 6400 5500 5800 6400 5800 5500 6400 5500 6000 6400 6000 5500 6400 5500 6000 6400 6000 5500 6400 5500 6000 6400 6000 5500 6400 5500 6000 6400 6000 5500 6400 5500 6000 6400 6000 5500 6400 5500 6000 6400 6000 5500 6400 5500 6000 6400 6000 5500 6400 5500 6000 6400 6000 5500 6400 5700 6000 6500 6000 5700 6500 5700 6000 6500 6000 5700 6500 5700 6000 6500 6000 5700 6500 5700 6000 6500 6000 5700 6500 5700 6000 6500 6000 5700 6500 5700 6000 6500 6000 5700 6500 5700 6000 6500 6000 5700 6500 5700 6000 6500 6000 5700 6500 5700 6200 6500 6200 5700 6500 5700 6200 6500 6200 5700 6500 5700 6200 6500 6200 5700 6500 5700 6200 6500 6200 5700 6500 5700 6200 6500 6200 5700 6500 5700 6200 6500 6200 5700 6500 5700 6200 6500 6200 5700 6500 5700 6200 6500 6200 5700 6500 6200 5800 6700 5800 6200 6700 6200 5800 6700 5800 6200 6700 6200 5800 6700 5800 6200 6700 6200 5800 6700 5800 6200 6700 6200 5800 6700 5800 6200 6700 6200 5800 6700 5800 6200 6700 6200 5800 6700 5800 6200 6700 6200 5800 6700 5800 6200 6700 6200 5700 6700 5700 6200 6700 6200 5700 6700 5700 6200 6700 6200 5700 6700 5700 6200 6700 6200 5700 6700 5700 6200 6700 6200 5700 6700 5700 6200 6700 6200 5700 6700 5700 6200 6700 6200 5700 6700 5700 6200 6700 6200 5700 6700 5700 6200 6700 6000 5700 6500 5700 6000 6500 6000 5700 6500 5700 6000 6500 6000 5700 6500 5700 6000 6500 6000 5700 6500 5700 6000 6500 6000 5700 6500 5700 6000 6500 6000 5700 6500 5700 6000 6500 6000 5700 6500 5700 6000 6500 6000 5700 6500 5700 6000 6500 6000 5500 6500 5500 6000 6000 5500 6500 5500 6000 6500 6000 5500 6500 5500 6000 6500 6000 5500 6500 5500 6000 6500 6000 5500 6500 5500 6000 6500 6000 5500 6500 5500 6000 6500 6000 5500 6500 5500 6000 6500 6000 5500 6500 5500 6000 6500 6700 5800 6200 5800 6700 6200 6700 5800 6200 5800 6700 6200 6700 5800 6200 5800 6700 6200 6700 5800 6200 5800 6700 6200 6700 5800 6200 5800 6700 6200 6700 5800 6200 5800 6700 6200 6700 5800 6200 5800 6700 6200 6700 5800 6200 5800 6700 6200 6400 6700 5800 6700 6400 5800 6400 6700 5800 6700 6400 5800 6400 6700 5800 6700 6400 5800 6400 6700 5800 6700 6400 5800 6400 6700 5800 6700 6400 5800 6400 6700 5800 6700 6400 5800 6400 6700 5800 6700 6400 5800 6400 6700 5800 6700 6400 5800 6400 5500 5800 5500 6400 5800 6400 5500 5800 5500 6400 5800 6400 5500 5800 5500 6400 5800 6400 5500 5800 5500 6400 5800 6400 5500 5800 5500 6400 5800 6400 5500 5800 5500 6400 5800 6400 5500 5800 5500 6400 5800 6400 5500 5800 5500 6400 5800 5800 6400 6700 6400 5800 6700 5800 6400 6700 6400 5800 6700 5800 6400 6700 6400 5800 6700 5800 6400 6700 6400 5800 6700 5800 6400 6700 6400 5800 6700 5800 6400 6700 6400 5800 6700 5800 6400 6700 6400 5800 6700 5800 6400 6700 6400 5800 6700 6000 6400 5500 6400 6000 5500 6000 6400 5500 6400 6000 5500 6000 6400 5500 6400 6000 5500 6000 6400 5500 6400 6000 5500 6000 6400 5500 6400 6000 5500 6000 6400 5500 6400 6000 5500 6000 6400 5500 6400 6000 5500 6000 6400 5500 6400 6000 5500 6000 6500 5500 6500 6000 5500 6000 6500 5500 6500 6000 5500 6000 6500 5500 6500 6000 5500 6000 6500 5500 6500 6000 5500 6000 6500 5500 6500 6000 5500 6000 6500 5500 6500 6000 5500 6000 6500 5500 6500 6000 5500 6000 6500 5500 6500 6000 5500 5700 6700 6200 6700 5700 6200 5700 6700 6200 6700 5700 6200 5700 6700 6200 6700 5700 6200 5700 6700 6200 6700 5700 6200 5700 6700 6200 6700 5700 6200 5700 6700 6200 6700 5700 6200 5700 6700 6200 6700 5700 6200 5700 6700 6200 6700 5700 6200 5700 6500 6200 6500 5700 6200 5700 6500 6200 6500 5700 6200 5700 6500 6200 6500 5700 6200 5700 6500 6200 6500 5700 6200 5700 6500 6200 6500 5700 6200 5700 6500 6200 6500 5700 6200 5700 6500 6200 6500 5700 6200 5700 6500 6200 6500 5700 6200 6700 6400 5800 6400 6700 5800 6700 6400 5800 6400 6700 5800 6700 6400 5800 6400 6700 5800 6700 6400 5800 6400 6700 5800 6700 6400 5800 6400 6700 5800 6700 6400 5800 6400 6700 5800 6700 6400 5800 6400 6700 5800 6700 6400 5800 6400 6700 5800 6700 6200 5700 6200 6700 5700 6700 6200 5700 6200 6700 5700 6700 6200 5700 6200 6700 5700 6700 6200 5700 6200 6700 5700 6700 6200 5700 6200 6700 5700 6700 6200 5700 6200 6700 5700 6700 6200 5700 6200 6700 5700 6700 6200 5700 6200 6700 5700 6500 6200 5700 6200 6500 5700 6500 6200 5700 6200 6500 5700 6500 6200 5700 6200 6500 5700 6500 6200 5700 6200 6500 5700 6500 6200 5700 6200 6500 5700 6500 6200 5700 6200 6500 5700 6500 6200 5700 6200 6500 5700 6500 6200 5700 6200 6500 5700 5500 6000 6400 6000 5500 6400 5500 6000 6400 6000 5500 6400 5500 6000 6400 6000 5500 6400 5500 6000 6400 6000 5500 6400 5500 6000 6400 6000 5500 6400 5500 6000 6400 6000 5500 6400 5500 6000 6400 6000 5500 6400 5500 6000 6400 6000 5500 6400 5500 6000 6500 6000 5500 6500 5500 6000 6500 6000 5500 6500 5500 6000 6500 6000 5500 6500 5500 6000 6500 6000 5500 6500 5500 6000 6500 6000 5500 6500 5500 6000 6500 6000 5500 6500 5500 6000 6500 6000 5500 6500 5500 6000 6500 6000 5500 6500 6700 6700 6700 6700 6700 6700 6700 6700 6700 6700 6700 6700 6700 6700 6700 6700 6400 6400 6700 5800 6700 6400 5800 5700 6700 6200 6700 5700 6200 6200 6500 5700 6500 6200 5700 5500 6500 6000 6500 5500 6000 6000 6400 5500 6400 6000 5500 6700 6200 5800 6200 6700 5800 5800 6400 6700 6400 5800 6700 6500 6000 5500 6000 6500 5500 5700 6200 6500 6200 5700 6500 6700 6200 5700 6200 6700 5700 5500 6000 6400 6000 5500 6400 6700 6700 5800 5500 6400 5500 5800 6400 6500 5500 6000 5500 6500 6000 6000 5700 6500 5700 6000 6500 6700 5700 6200 5700 6700 6200 6700 5800 6400 5800 6700 6400 6200 5800 6700 5800 6200 6700 5800 6200 6700 6200 5800 6700 6500 6200 5700 6200 6500 5700 6500 6000 5700 6000 6500 5700 5500 6000 6400 6000 5500 6400 6400 5800 5500 5800 6400 5500 5800 6400 6700 6400 5800 6700 5500 5500 6200 6500 5700 5500 6500 6000 6000 6400 5500 6700 6200 5800 5800 6400 6700 6500 6000 5500 5700 6200 6500 6700 6200 5700 5500 6000 6400 6700 5800 5500 6400 6500 5500 6000 6000 5700 6500 6700 5700 6200 6700 5800 6400 6200 5800 6700 5800 6200 6700 6500 6200 5700 6500 6000 5700 5500 6000 6400 6400 5800 5500 5800 6400 6700 5500 6400 6700 5800 6700 6400 5800 5700 6700 6200 6700 5700 6200 6200 6500 5700 6500 6200 5700 5500 6500 6000 6500 5500 6000 6000 6400 5500 6400 6000 5500 6700 6200 5800 6200 6700 5800 5800 6400 6700 6400 5800 6700 6500 6000 5500 6000 6500 5500 5700 6200 6500 6200 5700 6500 6700 6200 5700 6200 6700 5700 5500 6000 6400 6000 5500 6400 6700 6700 5800 5500 6400 5500 5800 6400 6500 5500 6000 5500 6500 6000 6000 5700 6500 5700 6000 6500 6700 5700 6200 5700 6700 6200 6700 5800 6400 5800 6700 6400 6200 5800 6700 5800 6200 6700 5800 6200 6700 6200 5800 6700 6500 6200 5700 6200 6500 5700 6500 6000 5700 6000 6500 5700 5500 6000 6400 6000 5500 6400 6400 5800 5500 5800 6400 5500 5800 6400 6700 6400 5800 6700 5500 5500 6200 6500 5700 5500 6500 6000 6000 6400 5500 6700 6200 5800 5800 6400 6700 6500 6000 5500 5700 6200 6500 6700 6200 5700 5500 6000 6400 6700 5800 5500 6400 6500 5500 6000 6000 5700 6500 6700 5700 6200 6700 5800 6400 6200 5800 6700 5800 6200 6700 6500 6200 5700 6500 6000 5700 5500 6000 6400 6400 5800 5500 5800 6400 6700 5500 6200 6700 5700 6200 6700 5700 6400 6000 6500 5700 5700 6000 5500 6500 6200 6500 6400 6000 6700 6700 6500 6000 6400 6200 6200 6200 6700 5800 6200 6700 5800 6700 6200 5700 6700 6200 5700 6000 6500 5700 6000 6500 5700 6500 6000 5500 6500 6000 5500 5800 6400 5500 5800 6400 5500 6200 6700 5800 6200 6700 5800 6700 6200 5700 6700 6200 5700 6000 6500 5700 6000 6500 5700 6500 6000 5500 6500 6000 5500 5800 6400 5500 5800 6400 5500 5700 6700 6400 6500 5800 5500 5700 6200 5800 6700 6400 6700 5500 6000 5700 6500 6200 6000 6200 6500 5500 6700 5500 6000 5700 6200 6400 6400 6000 5700 5800 5500 6500 6500 6200 5800 6000 5700 6700 5500 5700 6200 5800 6400 6500 6700 6400 6000 6200 5800 5500 5700 5800 6400 6000 6500 6700 6700 6500 6200 6400 5800 5700 6000 6400 6200 6700 5500 5800 6700 5500 6000 6500 6400 6500 5800 5500 5700 6400 6200 5700 6700 6400 6500 5800 6000 5500 5700 6200 5800 6700 6400 6700 5500 6000 5700 6500 6200 6000 6200 6500 6700 5800 5500 6700 5500 6000 5700 6200 6400 6400 6000 5700 5800 5500 6500 6500 6200 5800 6000 5700 6700 5500 5700 6200 5800 6400 6500 6700 6400 6000 6200 5800 5500 5700 5800 6400 6000 6500 6700 6700 6500 6200 6400 5800 5700 6000 6400 6200 6700 5500 5800 6700 5500 6000 6500 6400 6500 5800 5500 5700 5800 6700 6000 6200 6400 6500 5800 5700 6700 6000 6200 6500 5700 5500 6700 5800 5700 5500 6200 6400 6700 6000 5800 6200 6000 6700 5500 5700 6500 6200 6000 6700 5700 5800 6400 6500 5500 6000 5800 5700 6400 6500 6700 5500 5700 5800 6500 6400 6200 5700 5800 6000 6700 6500 6400 6700 6400 6200 5500 5800 6000 6700 6500 6400 5700 5800 6200 5800 6000 6200 5500 6700 6400 5500 6700 6500 5800 6000 6400 5700 5500 6500 6400 6400 6400 6500 6700 5700 5800 6000 6200 6500 6700 5500 5700 6000 6200 6200 6400 5500 6500 6200 5800 5700 5500 6700 6400 6500 6700 5500 5800 6000 5500 5700 6000 6200 6400 6200 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400) (list 6400 6400 6400 5800 6700 6700 6700 6700 6700 6700 6700 6700 5500 5700 6500 6400 6200 6000 5700 5500 6700 6500 6200 6000 5800 5700 6700 6500 6400 6400 5500 5700 5800 6200 6500 5500 5700 5800 6000 6400 6200 6000 5800 5500 6700 6500 6400 6200 6000 5700 5500 5800 5800 5700 6700 6500 6400 6200 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 6700 5700 6500 6200 6500 5700 6200 5700 6500 6200 6500 5700 6200 5700 6500 6200 6500 5700 6200 5700 6500 6200 6500 5700 6200 6400 6500 6700 5700 5800 6000 6200 6500 6700 5500 5700 6000 6200 6200 5800 5700 5500 6700 6400 6400 6000 5800 5700 5500 6500 6500 6700 5500 5800 6000 6200 6400 6500 5500 5700 6700 5500 5700 6000 6200 6400 6500 6200 6000 5500 5700 5800 6200 6400 6700 6400 6200 6000 5800 5500 5700 5800 6000 6400 6500 6700 5500 6700 6500 6200 6000 5700 6000 6200 6400 6500 5500 6500 6400 6000 5800 5700 6700 5800 5500 6000 6000 6000 6000 6000 6000 6000 6000 6000 6000 6000 6000 6000 6000 5500 6700 6500 6200 6000 5700 6000 6200 6400 6500 6700 6500 6400 6000 5800 5700 6700 5800 5700 6700 6500 6200 6000 5800 5700 6700 6500 6400 6200 5800 5700 5500 6700 6400 6200 6000 5800 5500 6700 6500 6400 6000 5800 5700 5700 5800 6200 6400 6500 6700 5800 5700 5500 6700 6400 6200 6000 5700 5800 6000 6400 6500 6700 5500 5500 6500 6400 6200 6200 6500 6700 5500 5500 6700 6400 6200 6000 5800 5500 6400 6700 5700 5800 6500 6000 5500 6200 6200 6200 6200 6200 6200 6700 6700 6700 6700 6700 6700 6000 5500 6700 6400 6400 5500 5500 5800 6700 5800 5500 6000 6000 6000 5800 5800 5800 5800 5800 5800 5800 5500 5500 6400 6400 5800 5800 6500 6500 5500 5500 6000 6000 5500 5500 6500 6500 6000 6000 6500 6500 5700 5700 6000 6000 5700 5700 6500 6500 6000 6000 6700 6700 5700 5700 6200 6200 5700 5700 6700 6700 6200 6200 6400 6400 5800 5800 5500 5500 5800 5800 6400 6400 5500 5500 6400 6400 6000 6000 5500 5500 6000 6000 6400 6400 5500 5500 6500 6500 6000 6000 5700 5700 6000 6000 6500 6500 5700 5700 6700 6700 6400 6400 5800 5800 6000 6000 6400 6400 5500 5500 6400 6400 6000 6000 5500 5500 6000 6000 6500 6500 5500 5500 6500 6500 6000 6000 5500 5500 6500 6500 5700 5700 6500 6500 6200 6200 5700 5700 5800 5800 6200 6200 6700 6700 6500 6500 6200 6200 5700 5700 6200 6200 5800 5800 6700 6700 6700 6700 5800 5800 6200 6200 6200 6200 5800 5800 6700 6700 6700 6700 5800 5800 6200 6200 6700 6700 6200 6200 5800 5800 5700 5700 6200 6200 6500 6500 6400 6400 5500 5500 5800 5800 5500 5500 6400 6400 5800 5800 6500 6500 5500 5500 6000 6000 5500 5500 6500 6500 6000 6000 6500 6500 5700 5700 6000 6000 5700 5700 6500 6500 6000 6000 6700 6700 5700 5700 6200 6200 5700 5700 6700 6700 6200 6200 6400 6400 5800 5800 5500 5500 5800 5800 6400 6400 5500 5500 6400 6400 6000 6000 5500 5500 6000 6000 6400 6400 5500 5500 6500 6500 6000 6000 5700 5700 6000 6000 6500 6500 5700 5700 5800 5800 6400 6400 6700 6700 6400 6400 5800 5800 6700 6700 6000 6000 6400 6400 5500 5500 6400 6400 6000 6000 5500 5500 6000 6000 6500 6500 5500 5500 6500 6500 6000 6000 5500 5500 6200 6200 6500 6500 5700 5700 6500 6500 6200 6200 5700 5700 5800 5800 6200 6200 6700 6700 6500 6500 6200 6200 5700 5700 6200 6200 5800 5800 6700 6700 6700 6700 5800 5800 6200 6200 6200 6200 5800 5800 6700 6700 6700 6700 5800 5800 6200 6200 6700 6700 6200 6200 5800 5800 5700 5700 6200 6200 6500 6500 6400 6400 5500 5500 5800 5800 5500 5500 6400 6400 5800 5800 6500 6500 5500 5500 6000 6000 5500 5500 6500 6500 6000 6000 6500 6500 5700 5700 6000 6000 5700 5700 6500 6500 6000 6000 6700 6700 5700 5700 6200 6200 5700 5700 6700 6700 6200 6200 6400 6400 5800 5800 5500 5500 5800 5800 6400 6400 5500 5500 6400 6400 6000 6000 5500 5500 6000 6000 6400 6400 5500 5500 6500 6500 6000 6000 5700 5700 6000 6000 6500 6500 5700 5700 5800 5800 6400 6400 6700 6700 6400 6400 5800 5800 6700 6700 6000 6000 6400 6400 5500 5500 6400 6400 6000 6000 5500 5500 6000 6000 6500 6500 5500 5500 6500 6500 6000 6000 5500 5500 6200 6200 6500 6500 5700 5700 6500 6500 6200 6200 5700 5700 5800 5800 6200 6200 6700 6700 6500 6500 6200 6200 5700 5700 6200 6200 5800 5800 6700 6700 6700 6700 5800 5800 6200 6200 6200 6200 5800 5800 6700 6700 6700 6700 5800 5800 6200 6200 6700 6700 6200 6200 5800 5800 5700 5700 6200 6200 6500 6500 6400 6400 5500 5500 5800 5800 5500 5500 6400 6400 5800 5800 6500 6500 5500 5500 6000 6000 5500 5500 6500 6500 6000 6000 6500 6500 5700 5700 6000 6000 5700 5700 6500 6500 6000 6000 6700 6700 5700 5700 6200 6200 5700 5700 6700 6700 6200 6200 6400 6400 5800 5800 5500 5500 5800 5800 6400 6400 5500 5500 6400 6400 6000 6000 5500 5500 6000 6000 6400 6400 5500 5500 6500 6500 6000 6000 5700 5700 6000 6000 6500 6500 5700 5700 5800 5800 6400 6400 6700 6700 6400 6400 5800 5800 6700 6700 6000 6000 6400 6400 5500 5500 6400 6400 6000 6000 5500 5500 6000 6000 6500 6500 5500 5500 6500 6500 6000 6000 5500 5500 6200 6200 6500 6500 5700 5700 6500 6500 6200 6200 5700 5700 5800 5800 6200 6200 6700 6700 6500 6500 6200 6200 5700 5700 6200 6200 5800 5800 6700 6700 6700 6700 5800 5800 6200 6200 6200 6200 5800 5800 6700 6700 6700 6700 5800 5800 6200 6200 6700 6700 6200 6200 5800 5800 5700 5700 6200 6200 6500 6500 5800 5800 5500 5500 6400 6400 6000 6000 5500 5500 6500 6500 6000 6000 5700 5700 6500 6500 6200 6200 5700 5700 6700 6700 5500 5500 5800 5800 6400 6400 5500 5500 6000 6000 6400 6400 5700 5700 6000 6000 6500 6500 6700 6700 6400 6400 5800 5800 5500 5500 6400 6400 6000 6000 5500 5500 6500 6500 6000 6000 5700 5700 6500 6500 6200 6200 5800 5800 6200 6200 6700 6700 6500 6500 6200 6200 5700 5700 6200 6200 5800 5800 6700 6700 6700 6700 5800 5800 6200 6200 5800 5800 5500 5500 6400 6400 6000 6000 5500 5500 6500 6500 6000 6000 5700 5700 6500 6500 6200 6200 5700 5700 6700 6700 5500 5500 5800 5800 6400 6400 5500 5500 6000 6000 6400 6400 5700 5700 6000 6000 6500 6500 5500 5500 6400 6400 6000 6000 5500 5500 6500 6500 6000 6000 5700 5700 6500 6500 6200 6200 6500 6500 6200 6200 5700 5700 6200 6200 5800 5800 6700 6700 6700 6700 5800 5800 6200 6200 6400 5500 6000 5700 6500 6000 6500 5700 6200 6200 6000 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5700 6400 6500 5500 5700 6000 5700 5500 6700 6200 6500 6000 5800 5700 6700 6400 6500 5500 5700 5800 6200 6400 6500 6700 6400 6200 6000 5800 5500 5700 5800 6000 6400 6500 6700 5500 6500 6400 6200 6000 5700 5500 6700 6500 6200 6000 5800 5700 6700 6500 6400 5500 5700 5800 6200 6200 6700 6400 6200 5800 5700 5500 6700 6400 5500 5700 5800 6000 6400 6000 6000 5800 5500 6500 6400 6200 6000 6200 6500 6700 5500 6000 5800 5700 5700 5700 5700 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 6400 6000 5800 5700 5500 6500 6700 5500 5800 6000 6200 6200 6500 5700 6500 6200 5700 6200 6500 5700 6500 6200 5700 6200 6500 5700 6500 6200 5700 6200 6500 5700 6500 6200 5700 6000 6200 6500 6700 5500 5800 6400 6700 6700 6700 5700 5800 6000 6200 6500 6400 6200 6000 5700 5500 6700 6500 6400 6400 6400 6500 5500 5700 5800 6200 6400 6700 6400 6200 6000 5800 5500 5700 5800 6000 6400 6500 6700 5500 6700 6700 6700 6700 6700 6700 6700 6700 6700 6700 6700 6700 6700 6700 6700 6700 6700 6700 6700 6700 6700 6700 6700 6700 6700 6700 6700 6700 5500 5700 5800 6200 6400 6700 6700 6400 6200 6000 5800 5500 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 5800 6700 6500 6700 5700 5800 6000 6000 5700 5500 6700 6500 6200 6500 6700 5500 5800 6000 6200 6200 5800 5700 5500 6700 6400 6400 6000 5800 5700 5500 6500 6700 5500 5700 6000 6200 6400 6500 6200 6000 5800 5700 6700 6700 6700 6700 5500 6700 5800 5800 5800 6500 6500 6700 6700 6700 6700 6700 6500 6700 6700 6700 6500 6400 6400 6400 5500 6400 5500 6200 6200))) nil "Notas"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMQUANTIFY 2" (quote omquantify) (quote ((om-load-inputfun (quote input-funbox) "durations (list)" "SELF" (list 100)) (om-load-inputfun (quote input-funbox) "tempi (number or list)" "TEMPI" 76) (om-load-inputfun (quote input-funbox) "list of time signature(s)" "MEASURES" (list 4 4)) (om-load-inputfun (quote input-funbox) "maximum subdivision" "MAX/" 8))) (om-make-point 1117 265) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE 3" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 1115 417) (om-make-point 130 70) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (43/4 (((4 4) ((1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1)) (1 (1 1 1)) (1 (1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)) (1 (1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)))) ((3 4) ((1 (1 1 -1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1339 418) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 1254 216) (om-make-point 36 32) 48 "48" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 3" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 849 547) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 764 141) (om-make-point 28 32) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "Intervalos 2" (quote ("elements" "Intervalos")) (quote ((om-load-inputfun (quote input-funbox) "" "Lista de Alturas" (list 1 2 3 4 5)) (om-load-inputfun (quote input-funbox) "" "Notas desloca" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 702 184) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 781 220) (om-make-point 36 32) 76 "76" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 820 220) (om-make-point 50 32) (list 4 4) "(4 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 875 387) (om-make-point 36 32) 60 "60" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 872 220) (om-make-point 28 32) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 856 91) (om-make-point 38 32) (list 0) "(0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Notas 2" (om-load-lisp-abspatch "Notas" 6.2 "(lambda ( toques tonic tra)$$         (setq tot     (length toques)$               notas  '( )$               escala '(0 2 3 5 7 9 10 12)$               i        0$         )$         (repeat tot$                 (setq toq    (nth i    toques)$                       j      (mod toq (length escala))  $                 )$                 (setq alt    (+ (* 100 tonic) (* 100 (nth j escala)) tra)$                       i      (+ i 1)$                       notas  (append notas (list alt))  $                 )$         ) $         notas  $)$") (quote ((om-load-inputfun (quote input-funbox) "" "TOQUES" nil) (om-load-inputfun (quote input-funbox) "" "TONIC" nil) (om-load-inputfun (quote input-funbox) "" "TRA" nil))) (om-make-point 918 269) nil (list (append (list 5900 5900 5700 6200 6400 5500 5200 5500 6200 6200 5900 5200 5700 5400 5900 6100 6200 5700 5700 5500 5700 6100 5400 5400 5400 5400 5400 5400 5400 5400 5400 5400 5400 5400 5400 5400 5400 5400 5200 6200 5700 6200 5200 5700 5200 6200 5700 6200 5200 5700 5200 6200 5700 6200 5200 5700 5200 6200 5700 6200 5200 5700 5200 6200 5700 6200 5200 5700 5200 6200 5700 6200 5200 5700 5200 6200 5700 6200 5200 5700 5200 6200 5700 6200 5200 5700 5200 6100 5700 6100 5200 5700 5200 6100 5700 6100 5200 5700 5200 6100 5700 6100 5200 5700 5200 6100 5700 6100 5200 5700 5200 6100 5700 6100 5200 5700 5200 6100 5700 6100 5200 5700 5200 6100 5700 6100 5200 5700 5200 6100 5700 6100 5200 5700 6400 6100 5500 6100 6400 5500 6400 6100 5500 6100 6400 5500 6400 6100 5500 6100 6400 5500 6400 6100 5500 6100 6400 5500 6400 6100 5500 6100 6400 5500 6400 6100 5500 6100 6400 5500 6400 6100 5500 6100 6400 5500 6400 6100 5500 6100 6400 5500 6400 5900 5500 5900 6400 5500 6400 5900 5500 5900 6400 5500 6400 5900 5500 5900 6400 5500 6400 5900 5500 5900 6400 5500 6400 5900 5500 5900 6400 5500 6400 5900 5500 5900 6400 5500 6400 5900 5500 5900 6400 5500 6400 5900 5500 5900 6400 5500 5200 5500 6100 5500 5200 6100 5200 5500 6100 5500 5200 6100 5200 5500 6100 5500 5200 6100 5200 5500 6100 5500 5200 6100 5200 5500 6100 5500 5200 6100 5200 5500 6100 5500 5200 6100 5200 5500 6100 5500 5200 6100 5200 5500 6100 5500 5200 6100 5200 5700 6100 5700 5200 6100 5200 5700 6100 5700 5200 6100 5200 5700 6100 5700 5200 6100 5200 5700 6100 5700 5200 6100 5200 5700 6100 5700 5200 6100 5200 5700 6100 5700 5200 6100 5200 5700 6100 5700 5200 6100 5200 5700 6100 5700 5200 6100 5400 5700 6200 5700 5400 6200 5400 5700 6200 5700 5400 6200 5400 5700 6200 5700 5400 6200 5400 5700 6200 5700 5400 6200 5400 5700 6200 5700 5400 6200 5400 5700 6200 5700 5400 6200 5400 5700 6200 5700 5400 6200 5400 5700 6200 5700 5400 6200 5400 5900 6200 5900 5400 6200 5400 5900 6200 5900 5400 6200 5400 5900 6200 5900 5400 6200 5400 5900 6200 5900 5400 6200 5400 5900 6200 5900 5400 6200 5400 5900 6200 5900 5400 6200 5400 5900 6200 5900 5400 6200 5400 5900 6200 5900 5400 6200 5900 5500 6400 5500 5900 6400 5900 5500 6400 5500 5900 6400 5900 5500 6400 5500 5900 6400 5900 5500 6400 5500 5900 6400 5900 5500 6400 5500 5900 6400 5900 5500 6400 5500 5900 6400 5900 5500 6400 5500 5900 6400 5900 5500 6400 5500 5900 6400 5900 5400 6400 5400 5900 6400 5900 5400 6400 5400 5900 6400 5900 5400 6400 5400 5900 6400 5900 5400 6400 5400 5900 6400 5900 5400 6400 5400 5900 6400 5900 5400 6400 5400 5900 6400 5900 5400 6400 5400 5900 6400 5900 5400 6400 5400 5900 6400 5700 5400 6200 5400 5700 6200 5700 5400 6200 5400 5700 6200 5700 5400 6200 5400 5700 6200 5700 5400 6200 5400 5700 6200 5700 5400 6200 5400 5700 6200 5700 5400 6200 5400 5700 6200 5700 5400 6200 5400 5700 6200 5700 5400 6200 5400 5700 6200 5700 5200 6200 5200 5700 5700 5200 6200 5200 5700 6200 5700 5200 6200 5200 5700 6200 5700 5200 6200 5200 5700 6200 5700 5200 6200 5200 5700 6200 5700 5200 6200 5200 5700 6200 5700 5200 6200 5200 5700 6200 5700 5200 6200 5200 5700 6200 6400 5500 5900 5500 6400 5900 6400 5500 5900 5500 6400 5900 6400 5500 5900 5500 6400 5900 6400 5500 5900 5500 6400 5900 6400 5500 5900 5500 6400 5900 6400 5500 5900 5500 6400 5900 6400 5500 5900 5500 6400 5900 6400 5500 5900 5500 6400 5900 6100 6400 5500 6400 6100 5500 6100 6400 5500 6400 6100 5500 6100 6400 5500 6400 6100 5500 6100 6400 5500 6400 6100 5500 6100 6400 5500 6400 6100 5500 6100 6400 5500 6400 6100 5500 6100 6400 5500 6400 6100 5500 6100 6400 5500 6400 6100 5500 6100 5200 5500 5200 6100 5500 6100 5200 5500 5200 6100 5500 6100 5200 5500 5200 6100 5500 6100 5200 5500 5200 6100 5500 6100 5200 5500 5200 6100 5500 6100 5200 5500 5200 6100 5500 6100 5200 5500 5200 6100 5500 6100 5200 5500 5200 6100 5500 5500 6100 6400 6100 5500 6400 5500 6100 6400 6100 5500 6400 5500 6100 6400 6100 5500 6400 5500 6100 6400 6100 5500 6400 5500 6100 6400 6100 5500 6400 5500 6100 6400 6100 5500 6400 5500 6100 6400 6100 5500 6400 5500 6100 6400 6100 5500 6400 5700 6100 5200 6100 5700 5200 5700 6100 5200 6100 5700 5200 5700 6100 5200 6100 5700 5200 5700 6100 5200 6100 5700 5200 5700 6100 5200 6100 5700 5200 5700 6100 5200 6100 5700 5200 5700 6100 5200 6100 5700 5200 5700 6100 5200 6100 5700 5200 5700 6200 5200 6200 5700 5200 5700 6200 5200 6200 5700 5200 5700 6200 5200 6200 5700 5200 5700 6200 5200 6200 5700 5200 5700 6200 5200 6200 5700 5200 5700 6200 5200 6200 5700 5200 5700 6200 5200 6200 5700 5200 5700 6200 5200 6200 5700 5200 5400 6400 5900 6400 5400 5900 5400 6400 5900 6400 5400 5900 5400 6400 5900 6400 5400 5900 5400 6400 5900 6400 5400 5900 5400 6400 5900 6400 5400 5900 5400 6400 5900 6400 5400 5900 5400 6400 5900 6400 5400 5900 5400 6400 5900 6400 5400 5900 5400 6200 5900 6200 5400 5900 5400 6200 5900 6200 5400 5900 5400 6200 5900 6200 5400 5900 5400 6200 5900 6200 5400 5900 5400 6200 5900 6200 5400 5900 5400 6200 5900 6200 5400 5900 5400 6200 5900 6200 5400 5900 5400 6200 5900 6200 5400 5900 6400 6100 5500 6100 6400 5500 6400 6100 5500 6100 6400 5500 6400 6100 5500 6100 6400 5500 6400 6100 5500 6100 6400 5500 6400 6100 5500 6100 6400 5500 6400 6100 5500 6100 6400 5500 6400 6100 5500 6100 6400 5500 6400 6100 5500 6100 6400 5500 6400 5900 5400 5900 6400 5400 6400 5900 5400 5900 6400 5400 6400 5900 5400 5900 6400 5400 6400 5900 5400 5900 6400 5400 6400 5900 5400 5900 6400 5400 6400 5900 5400 5900 6400 5400 6400 5900 5400 5900 6400 5400 6400 5900 5400 5900 6400 5400 6200 5900 5400 5900 6200 5400 6200 5900 5400 5900 6200 5400 6200 5900 5400 5900 6200 5400 6200 5900 5400 5900 6200 5400 6200 5900 5400 5900 6200 5400 6200 5900 5400 5900 6200 5400 6200 5900 5400 5900 6200 5400 6200 5900 5400 5900 6200 5400 5200 5700 6100 5700 5200 6100 5200 5700 6100 5700 5200 6100 5200 5700 6100 5700 5200 6100 5200 5700 6100 5700 5200 6100 5200 5700 6100 5700 5200 6100 5200 5700 6100 5700 5200 6100 5200 5700 6100 5700 5200 6100 5200 5700 6100 5700 5200 6100 5200 5700 6200 5700 5200 6200 5200 5700 6200 5700 5200 6200 5200 5700 6200 5700 5200 6200 5200 5700 6200 5700 5200 6200 5200 5700 6200 5700 5200 6200 5200 5700 6200 5700 5200 6200 5200 5700 6200 5700 5200 6200 5200 5700 6200 5700 5200 6200 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6100 6100 6400 5500 6400 6100 5500 5400 6400 5900 6400 5400 5900 5900 6200 5400 6200 5900 5400 5200 6200 5700 6200 5200 5700 5700 6100 5200 6100 5700 5200 6400 5900 5500 5900 6400 5500 5500 6100 6400 6100 5500 6400 6200 5700 5200 5700 6200 5200 5400 5900 6200 5900 5400 6200 6400 5900 5400 5900 6400 5400 5200 5700 6100 5700 5200 6100 6400 6400 5500 5200 6100 5200 5500 6100 6200 5200 5700 5200 6200 5700 5700 5400 6200 5400 5700 6200 6400 5400 5900 5400 6400 5900 6400 5500 6100 5500 6400 6100 5900 5500 6400 5500 5900 6400 5500 5900 6400 5900 5500 6400 6200 5900 5400 5900 6200 5400 6200 5700 5400 5700 6200 5400 5200 5700 6100 5700 5200 6100 6100 5500 5200 5500 6100 5200 5500 6100 6400 6100 5500 6400 5200 5200 5900 6200 5400 5200 6200 5700 5700 6100 5200 6400 5900 5500 5500 6100 6400 6200 5700 5200 5400 5900 6200 6400 5900 5400 5200 5700 6100 6400 5500 5200 6100 6200 5200 5700 5700 5400 6200 6400 5400 5900 6400 5500 6100 5900 5500 6400 5500 5900 6400 6200 5900 5400 6200 5700 5400 5200 5700 6100 6100 5500 5200 5500 6100 6400 5200 6100 6400 5500 6400 6100 5500 5400 6400 5900 6400 5400 5900 5900 6200 5400 6200 5900 5400 5200 6200 5700 6200 5200 5700 5700 6100 5200 6100 5700 5200 6400 5900 5500 5900 6400 5500 5500 6100 6400 6100 5500 6400 6200 5700 5200 5700 6200 5200 5400 5900 6200 5900 5400 6200 6400 5900 5400 5900 6400 5400 5200 5700 6100 5700 5200 6100 6400 6400 5500 5200 6100 5200 5500 6100 6200 5200 5700 5200 6200 5700 5700 5400 6200 5400 5700 6200 6400 5400 5900 5400 6400 5900 6400 5500 6100 5500 6400 6100 5900 5500 6400 5500 5900 6400 5500 5900 6400 5900 5500 6400 6200 5900 5400 5900 6200 5400 6200 5700 5400 5700 6200 5400 5200 5700 6100 5700 5200 6100 6100 5500 5200 5500 6100 5200 5500 6100 6400 6100 5500 6400 5200 5200 5900 6200 5400 5200 6200 5700 5700 6100 5200 6400 5900 5500 5500 6100 6400 6200 5700 5200 5400 5900 6200 6400 5900 5400 5200 5700 6100 6400 5500 5200 6100 6200 5200 5700 5700 5400 6200 6400 5400 5900 6400 5500 6100 5900 5500 6400 5500 5900 6400 6200 5900 5400 6200 5700 5400 5200 5700 6100 6100 5500 5200 5500 6100 6400 5200 5900 6400 5400 5900 6400 5400 6100 5700 6200 5400 5400 5700 5200 6200 5900 6200 6100 5700 6400 6400 6200 5700 6100 5900 5900 5900 6400 5500 5900 6400 5500 6400 5900 5400 6400 5900 5400 5700 6200 5400 5700 6200 5400 6200 5700 5200 6200 5700 5200 5500 6100 5200 5500 6100 5200 5900 6400 5500 5900 6400 5500 6400 5900 5400 6400 5900 5400 5700 6200 5400 5700 6200 5400 6200 5700 5200 6200 5700 5200 5500 6100 5200 5500 6100 5200 5400 6400 6100 6200 5500 5200 5400 5900 5500 6400 6100 6400 5200 5700 5400 6200 5900 5700 5900 6200 5200 6400 5200 5700 5400 5900 6100 6100 5700 5400 5500 5200 6200 6200 5900 5500 5700 5400 6400 5200 5400 5900 5500 6100 6200 6400 6100 5700 5900 5500 5200 5400 5500 6100 5700 6200 6400 6400 6200 5900 6100 5500 5400 5700 6100 5900 6400 5200 5500 6400 5200 5700 6200 6100 6200 5500 5200 5400 6100 5900 5400 6400 6100 6200 5500 5700 5200 5400 5900 5500 6400 6100 6400 5200 5700 5400 6200 5900 5700 5900 6200 6400 5500 5200 6400 5200 5700 5400 5900 6100 6100 5700 5400 5500 5200 6200 6200 5900 5500 5700 5400 6400 5200 5400 5900 5500 6100 6200 6400 6100 5700 5900 5500 5200 5400 5500 6100 5700 6200 6400 6400 6200 5900 6100 5500 5400 5700 6100 5900 6400 5200 5500 6400 5200 5700 6200 6100 6200 5500 5200 5400 5500 6400 5700 5900 6100 6200 5500 5400 6400 5700 5900 6200 5400 5200 6400 5500 5400 5200 5900 6100 6400 5700 5500 5900 5700 6400 5200 5400 6200 5900 5700 6400 5400 5500 6100 6200 5200 5700 5500 5400 6100 6200 6400 5200 5400 5500 6200 6100 5900 5400 5500 5700 6400 6200 6100 6400 6100 5900 5200 5500 5700 6400 6200 6100 5400 5500 5900 5500 5700 5900 5200 6400 6100 5200 6400 6200 5500 5700 6100 5400 5200 6200 6100 6100 6100 6200 6400 5400 5500 5700 5900 6200 6400 5200 5400 5700 5900 5900 6100 5200 6200 5900 5500 5400 5200 6400 6100 6200 6400 5200 5500 5700 5200 5400 5700 5900 6100 5900 6100 6100 6100 6100 6100 6100 6100 6100 6100 6100 6100 6100 6100 6100 6100) (list 6100 6100 6100 5500 6400 6400 6400 6400 6400 6400 6400 6400 5200 5400 6200 6100 5900 5700 5400 5200 6400 6200 5900 5700 5500 5400 6400 6200 6100 6100 5200 5400 5500 5900 6200 5200 5400 5500 5700 6100 5900 5700 5500 5200 6400 6200 6100 5900 5700 5400 5200 5500 5500 5400 6400 6200 6100 5900 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 6400 5400 6200 5900 6200 5400 5900 5400 6200 5900 6200 5400 5900 5400 6200 5900 6200 5400 5900 5400 6200 5900 6200 5400 5900 6100 6200 6400 5400 5500 5700 5900 6200 6400 5200 5400 5700 5900 5900 5500 5400 5200 6400 6100 6100 5700 5500 5400 5200 6200 6200 6400 5200 5500 5700 5900 6100 6200 5200 5400 6400 5200 5400 5700 5900 6100 6200 5900 5700 5200 5400 5500 5900 6100 6400 6100 5900 5700 5500 5200 5400 5500 5700 6100 6200 6400 5200 6400 6200 5900 5700 5400 5700 5900 6100 6200 5200 6200 6100 5700 5500 5400 6400 5500 5200 5700 5700 5700 5700 5700 5700 5700 5700 5700 5700 5700 5700 5700 5700 5200 6400 6200 5900 5700 5400 5700 5900 6100 6200 6400 6200 6100 5700 5500 5400 6400 5500 5400 6400 6200 5900 5700 5500 5400 6400 6200 6100 5900 5500 5400 5200 6400 6100 5900 5700 5500 5200 6400 6200 6100 5700 5500 5400 5400 5500 5900 6100 6200 6400 5500 5400 5200 6400 6100 5900 5700 5400 5500 5700 6100 6200 6400 5200 5200 6200 6100 5900 5900 6200 6400 5200 5200 6400 6100 5900 5700 5500 5200 6100 6400 5400 5500 6200 5700 5200 5900 5900 5900 5900 5900 5900 6400 6400 6400 6400 6400 6400 5700 5200 6400 6100 6100 5200 5200 5500 6400 5500 5200 5700 5700 5700 5500 5500 5500 5500 5500 5500 5500 5200 5200 6100 6100 5500 5500 6200 6200 5200 5200 5700 5700 5200 5200 6200 6200 5700 5700 6200 6200 5400 5400 5700 5700 5400 5400 6200 6200 5700 5700 6400 6400 5400 5400 5900 5900 5400 5400 6400 6400 5900 5900 6100 6100 5500 5500 5200 5200 5500 5500 6100 6100 5200 5200 6100 6100 5700 5700 5200 5200 5700 5700 6100 6100 5200 5200 6200 6200 5700 5700 5400 5400 5700 5700 6200 6200 5400 5400 6400 6400 6100 6100 5500 5500 5700 5700 6100 6100 5200 5200 6100 6100 5700 5700 5200 5200 5700 5700 6200 6200 5200 5200 6200 6200 5700 5700 5200 5200 6200 6200 5400 5400 6200 6200 5900 5900 5400 5400 5500 5500 5900 5900 6400 6400 6200 6200 5900 5900 5400 5400 5900 5900 5500 5500 6400 6400 6400 6400 5500 5500 5900 5900 5900 5900 5500 5500 6400 6400 6400 6400 5500 5500 5900 5900 6400 6400 5900 5900 5500 5500 5400 5400 5900 5900 6200 6200 6100 6100 5200 5200 5500 5500 5200 5200 6100 6100 5500 5500 6200 6200 5200 5200 5700 5700 5200 5200 6200 6200 5700 5700 6200 6200 5400 5400 5700 5700 5400 5400 6200 6200 5700 5700 6400 6400 5400 5400 5900 5900 5400 5400 6400 6400 5900 5900 6100 6100 5500 5500 5200 5200 5500 5500 6100 6100 5200 5200 6100 6100 5700 5700 5200 5200 5700 5700 6100 6100 5200 5200 6200 6200 5700 5700 5400 5400 5700 5700 6200 6200 5400 5400 5500 5500 6100 6100 6400 6400 6100 6100 5500 5500 6400 6400 5700 5700 6100 6100 5200 5200 6100 6100 5700 5700 5200 5200 5700 5700 6200 6200 5200 5200 6200 6200 5700 5700 5200 5200 5900 5900 6200 6200 5400 5400 6200 6200 5900 5900 5400 5400 5500 5500 5900 5900 6400 6400 6200 6200 5900 5900 5400 5400 5900 5900 5500 5500 6400 6400 6400 6400 5500 5500 5900 5900 5900 5900 5500 5500 6400 6400 6400 6400 5500 5500 5900 5900 6400 6400 5900 5900 5500 5500 5400 5400 5900 5900 6200 6200 6100 6100 5200 5200 5500 5500 5200 5200 6100 6100 5500 5500 6200 6200 5200 5200 5700 5700 5200 5200 6200 6200 5700 5700 6200 6200 5400 5400 5700 5700 5400 5400 6200 6200 5700 5700 6400 6400 5400 5400 5900 5900 5400 5400 6400 6400 5900 5900 6100 6100 5500 5500 5200 5200 5500 5500 6100 6100 5200 5200 6100 6100 5700 5700 5200 5200 5700 5700 6100 6100 5200 5200 6200 6200 5700 5700 5400 5400 5700 5700 6200 6200 5400 5400 5500 5500 6100 6100 6400 6400 6100 6100 5500 5500 6400 6400 5700 5700 6100 6100 5200 5200 6100 6100 5700 5700 5200 5200 5700 5700 6200 6200 5200 5200 6200 6200 5700 5700 5200 5200 5900 5900 6200 6200 5400 5400 6200 6200 5900 5900 5400 5400 5500 5500 5900 5900 6400 6400 6200 6200 5900 5900 5400 5400 5900 5900 5500 5500 6400 6400 6400 6400 5500 5500 5900 5900 5900 5900 5500 5500 6400 6400 6400 6400 5500 5500 5900 5900 6400 6400 5900 5900 5500 5500 5400 5400 5900 5900 6200 6200 6100 6100 5200 5200 5500 5500 5200 5200 6100 6100 5500 5500 6200 6200 5200 5200 5700 5700 5200 5200 6200 6200 5700 5700 6200 6200 5400 5400 5700 5700 5400 5400 6200 6200 5700 5700 6400 6400 5400 5400 5900 5900 5400 5400 6400 6400 5900 5900 6100 6100 5500 5500 5200 5200 5500 5500 6100 6100 5200 5200 6100 6100 5700 5700 5200 5200 5700 5700 6100 6100 5200 5200 6200 6200 5700 5700 5400 5400 5700 5700 6200 6200 5400 5400 5500 5500 6100 6100 6400 6400 6100 6100 5500 5500 6400 6400 5700 5700 6100 6100 5200 5200 6100 6100 5700 5700 5200 5200 5700 5700 6200 6200 5200 5200 6200 6200 5700 5700 5200 5200 5900 5900 6200 6200 5400 5400 6200 6200 5900 5900 5400 5400 5500 5500 5900 5900 6400 6400 6200 6200 5900 5900 5400 5400 5900 5900 5500 5500 6400 6400 6400 6400 5500 5500 5900 5900 5900 5900 5500 5500 6400 6400 6400 6400 5500 5500 5900 5900 6400 6400 5900 5900 5500 5500 5400 5400 5900 5900 6200 6200 5500 5500 5200 5200 6100 6100 5700 5700 5200 5200 6200 6200 5700 5700 5400 5400 6200 6200 5900 5900 5400 5400 6400 6400 5200 5200 5500 5500 6100 6100 5200 5200 5700 5700 6100 6100 5400 5400 5700 5700 6200 6200 6400 6400 6100 6100 5500 5500 5200 5200 6100 6100 5700 5700 5200 5200 6200 6200 5700 5700 5400 5400 6200 6200 5900 5900 5500 5500 5900 5900 6400 6400 6200 6200 5900 5900 5400 5400 5900 5900 5500 5500 6400 6400 6400 6400 5500 5500 5900 5900 5500 5500 5200 5200 6100 6100 5700 5700 5200 5200 6200 6200 5700 5700 5400 5400 6200 6200 5900 5900 5400 5400 6400 6400 5200 5200 5500 5500 6100 6100 5200 5200 5700 5700 6100 6100 5400 5400 5700 5700 6200 6200 5200 5200 6100 6100 5700 5700 5200 5200 6200 6200 5700 5700 5400 5400 6200 6200 5900 5900 6200 6200 5900 5900 5400 5400 5900 5900 5500 5500 6400 6400 6400 6400 5500 5500 5900 5900 6100 5200 5700 5400 6200 5700 6200 5400 5900 5900 5700 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5400 6100 6200 5200 5400 5700 5400 5200 6400 5900 6200 5700 5500 5400 6400 6100 6200 5200 5400 5500 5900 6100 6200 6400 6100 5900 5700 5500 5200 5400 5500 5700 6100 6200 6400 5200 6200 6100 5900 5700 5400 5200 6400 6200 5900 5700 5500 5400 6400 6200 6100 5200 5400 5500 5900 5900 6400 6100 5900 5500 5400 5200 6400 6100 5200 5400 5500 5700 6100 5700 5700 5500 5200 6200 6100 5900 5700 5900 6200 6400 5200 5700 5500 5400 5400 5400 5400 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 6100 5700 5500 5400 5200 6200 6400 5200 5500 5700 5900 5900 6200 5400 6200 5900 5400 5900 6200 5400 6200 5900 5400 5900 6200 5400 6200 5900 5400 5900 6200 5400 6200 5900 5400 5700 5900 6200 6400 5200 5500 6100 6400 6400 6400 5400 5500 5700 5900 6200 6100 5900 5700 5400 5200 6400 6200 6100 6100 6100 6200 5200 5400 5500 5900 6100 6400 6100 5900 5700 5500 5200 5400 5500 5700 6100 6200 6400 5200 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 6400 5200 5400 5500 5900 6100 6400 6400 6100 5900 5700 5500 5200 6100 6100 6100 6100 6100 6100 6100 6100 6100 6100 6100 6100 6100 6100 6100 6100 6100 6100 6100 6100 6100 6100 6100 6100 6100 6100 6100 6100 6100 6100 6100 6100 6100 6100 6100 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 5500 6400 6200 6400 5400 5500 5700 5700 5400 5200 6400 6200 5900 6200 6400 5200 5500 5700 5900 5900 5500 5400 5200 6400 6100 6100 5700 5500 5400 5200 6200 6400 5200 5400 5700 5900 6100 6200 5900 5700 5500 5400 6400 6400 6400 6400 5200 6400 5500 5500 5500 6200 6200 6400 6400 6400 6400 6400 6200 6400 6400 6400 6200 6100 6100 6100 5200 6100 5200 5900 5900))) nil "Notas"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMQUANTIFY" (quote omquantify) (quote ((om-load-inputfun (quote input-funbox) "durations (list)" "SELF" (list 100)) (om-load-inputfun (quote input-funbox) "tempi (number or list)" "TEMPI" 76) (om-load-inputfun (quote input-funbox) "list of time signature(s)" "MEASURES" (list 4 4)) (om-load-inputfun (quote input-funbox) "maximum subdivision" "MAX/" 8))) (om-make-point 798 269) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE 2" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 796 421) (om-make-point 130 70) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (63/4 (((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) (1 (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) 1 (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((3 4) ((1 (1 1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1339 418) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 935 220) (om-make-point 36 32) 48 "48" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 973 220) (om-make-point 43 32) 400 "400" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 406 138) (om-make-point 28 32) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 493 95) (om-make-point 38 32) (list 0) "(0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "Intervalos" (quote ("elements" "Intervalos")) (quote ((om-load-inputfun (quote input-funbox) "" "Lista de Alturas" (list 1 2 3 4 5)) (om-load-inputfun (quote input-funbox) "" "Notas desloca" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 344 181) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 517 384) (om-make-point 36 32) 60 "60" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 615 217) (om-make-point 28 32) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 577 217) (om-make-point 36 32) 48 "48" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Notas" (om-load-lisp-abspatch "Notas" 6.2 "(lambda ( toques tonic tra)$$         (setq tot     (length toques)$               notas  '( )$               escala '(0 2 3 5 7 9 10 12)$               i        0$         )$         (repeat tot$                 (setq toq    (nth i    toques)$                       j      (mod toq (length escala))  $                 )$                 (setq alt    (+ (* 100 tonic) (* 100 (nth j escala)) tra)$                       i      (+ i 1)$                       notas  (append notas (list alt))  $                 )$         ) $         notas  $)$") (quote ((om-load-inputfun (quote input-funbox) "" "TOQUES" nil) (om-load-inputfun (quote input-funbox) "" "TONIC" nil) (om-load-inputfun (quote input-funbox) "" "TRA" nil))) (om-make-point 560 266) nil (list (append (list 5500 5500 5300 5800 6000 5100 4800 5100 5800 5800 5500 4800 5300 5000 5500 5700 5800 5300 5300 5100 5300 5700 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 4800 5800 5300 5800 4800 5300 4800 5800 5300 5800 4800 5300 4800 5800 5300 5800 4800 5300 4800 5800 5300 5800 4800 5300 4800 5800 5300 5800 4800 5300 4800 5800 5300 5800 4800 5300 4800 5800 5300 5800 4800 5300 4800 5800 5300 5800 4800 5300 4800 5700 5300 5700 4800 5300 4800 5700 5300 5700 4800 5300 4800 5700 5300 5700 4800 5300 4800 5700 5300 5700 4800 5300 4800 5700 5300 5700 4800 5300 4800 5700 5300 5700 4800 5300 4800 5700 5300 5700 4800 5300 4800 5700 5300 5700 4800 5300 6000 5700 5100 5700 6000 5100 6000 5700 5100 5700 6000 5100 6000 5700 5100 5700 6000 5100 6000 5700 5100 5700 6000 5100 6000 5700 5100 5700 6000 5100 6000 5700 5100 5700 6000 5100 6000 5700 5100 5700 6000 5100 6000 5700 5100 5700 6000 5100 6000 5500 5100 5500 6000 5100 6000 5500 5100 5500 6000 5100 6000 5500 5100 5500 6000 5100 6000 5500 5100 5500 6000 5100 6000 5500 5100 5500 6000 5100 6000 5500 5100 5500 6000 5100 6000 5500 5100 5500 6000 5100 6000 5500 5100 5500 6000 5100 4800 5100 5700 5100 4800 5700 4800 5100 5700 5100 4800 5700 4800 5100 5700 5100 4800 5700 4800 5100 5700 5100 4800 5700 4800 5100 5700 5100 4800 5700 4800 5100 5700 5100 4800 5700 4800 5100 5700 5100 4800 5700 4800 5100 5700 5100 4800 5700 4800 5300 5700 5300 4800 5700 4800 5300 5700 5300 4800 5700 4800 5300 5700 5300 4800 5700 4800 5300 5700 5300 4800 5700 4800 5300 5700 5300 4800 5700 4800 5300 5700 5300 4800 5700 4800 5300 5700 5300 4800 5700 4800 5300 5700 5300 4800 5700 5000 5300 5800 5300 5000 5800 5000 5300 5800 5300 5000 5800 5000 5300 5800 5300 5000 5800 5000 5300 5800 5300 5000 5800 5000 5300 5800 5300 5000 5800 5000 5300 5800 5300 5000 5800 5000 5300 5800 5300 5000 5800 5000 5300 5800 5300 5000 5800 5000 5500 5800 5500 5000 5800 5000 5500 5800 5500 5000 5800 5000 5500 5800 5500 5000 5800 5000 5500 5800 5500 5000 5800 5000 5500 5800 5500 5000 5800 5000 5500 5800 5500 5000 5800 5000 5500 5800 5500 5000 5800 5000 5500 5800 5500 5000 5800 5500 5100 6000 5100 5500 6000 5500 5100 6000 5100 5500 6000 5500 5100 6000 5100 5500 6000 5500 5100 6000 5100 5500 6000 5500 5100 6000 5100 5500 6000 5500 5100 6000 5100 5500 6000 5500 5100 6000 5100 5500 6000 5500 5100 6000 5100 5500 6000 5500 5000 6000 5000 5500 6000 5500 5000 6000 5000 5500 6000 5500 5000 6000 5000 5500 6000 5500 5000 6000 5000 5500 6000 5500 5000 6000 5000 5500 6000 5500 5000 6000 5000 5500 6000 5500 5000 6000 5000 5500 6000 5500 5000 6000 5000 5500 6000 5300 5000 5800 5000 5300 5800 5300 5000 5800 5000 5300 5800 5300 5000 5800 5000 5300 5800 5300 5000 5800 5000 5300 5800 5300 5000 5800 5000 5300 5800 5300 5000 5800 5000 5300 5800 5300 5000 5800 5000 5300 5800 5300 5000 5800 5000 5300 5800 5300 4800 5800 4800 5300 5300 4800 5800 4800 5300 5800 5300 4800 5800 4800 5300 5800 5300 4800 5800 4800 5300 5800 5300 4800 5800 4800 5300 5800 5300 4800 5800 4800 5300 5800 5300 4800 5800 4800 5300 5800 5300 4800 5800 4800 5300 5800 6000 5100 5500 5100 6000 5500 6000 5100 5500 5100 6000 5500 6000 5100 5500 5100 6000 5500 6000 5100 5500 5100 6000 5500 6000 5100 5500 5100 6000 5500 6000 5100 5500 5100 6000 5500 6000 5100 5500 5100 6000 5500 6000 5100 5500 5100 6000 5500 5700 6000 5100 6000 5700 5100 5700 6000 5100 6000 5700 5100 5700 6000 5100 6000 5700 5100 5700 6000 5100 6000 5700 5100 5700 6000 5100 6000 5700 5100 5700 6000 5100 6000 5700 5100 5700 6000 5100 6000 5700 5100 5700 6000 5100 6000 5700 5100 5700 4800 5100 4800 5700 5100 5700 4800 5100 4800 5700 5100 5700 4800 5100 4800 5700 5100 5700 4800 5100 4800 5700 5100 5700 4800 5100 4800 5700 5100 5700 4800 5100 4800 5700 5100 5700 4800 5100 4800 5700 5100 5700 4800 5100 4800 5700 5100 5100 5700 6000 5700 5100 6000 5100 5700 6000 5700 5100 6000 5100 5700 6000 5700 5100 6000 5100 5700 6000 5700 5100 6000 5100 5700 6000 5700 5100 6000 5100 5700 6000 5700 5100 6000 5100 5700 6000 5700 5100 6000 5100 5700 6000 5700 5100 6000 5300 5700 4800 5700 5300 4800 5300 5700 4800 5700 5300 4800 5300 5700 4800 5700 5300 4800 5300 5700 4800 5700 5300 4800 5300 5700 4800 5700 5300 4800 5300 5700 4800 5700 5300 4800 5300 5700 4800 5700 5300 4800 5300 5700 4800 5700 5300 4800 5300 5800 4800 5800 5300 4800 5300 5800 4800 5800 5300 4800 5300 5800 4800 5800 5300 4800 5300 5800 4800 5800 5300 4800 5300 5800 4800 5800 5300 4800 5300 5800 4800 5800 5300 4800 5300 5800 4800 5800 5300 4800 5300 5800 4800 5800 5300 4800 5000 6000 5500 6000 5000 5500 5000 6000 5500 6000 5000 5500 5000 6000 5500 6000 5000 5500 5000 6000 5500 6000 5000 5500 5000 6000 5500 6000 5000 5500 5000 6000 5500 6000 5000 5500 5000 6000 5500 6000 5000 5500 5000 6000 5500 6000 5000 5500 5000 5800 5500 5800 5000 5500 5000 5800 5500 5800 5000 5500 5000 5800 5500 5800 5000 5500 5000 5800 5500 5800 5000 5500 5000 5800 5500 5800 5000 5500 5000 5800 5500 5800 5000 5500 5000 5800 5500 5800 5000 5500 5000 5800 5500 5800 5000 5500 6000 5700 5100 5700 6000 5100 6000 5700 5100 5700 6000 5100 6000 5700 5100 5700 6000 5100 6000 5700 5100 5700 6000 5100 6000 5700 5100 5700 6000 5100 6000 5700 5100 5700 6000 5100 6000 5700 5100 5700 6000 5100 6000 5700 5100 5700 6000 5100 6000 5500 5000 5500 6000 5000 6000 5500 5000 5500 6000 5000 6000 5500 5000 5500 6000 5000 6000 5500 5000 5500 6000 5000 6000 5500 5000 5500 6000 5000 6000 5500 5000 5500 6000 5000 6000 5500 5000 5500 6000 5000 6000 5500 5000 5500 6000 5000 5800 5500 5000 5500 5800 5000 5800 5500 5000 5500 5800 5000 5800 5500 5000 5500 5800 5000 5800 5500 5000 5500 5800 5000 5800 5500 5000 5500 5800 5000 5800 5500 5000 5500 5800 5000 5800 5500 5000 5500 5800 5000 5800 5500 5000 5500 5800 5000 4800 5300 5700 5300 4800 5700 4800 5300 5700 5300 4800 5700 4800 5300 5700 5300 4800 5700 4800 5300 5700 5300 4800 5700 4800 5300 5700 5300 4800 5700 4800 5300 5700 5300 4800 5700 4800 5300 5700 5300 4800 5700 4800 5300 5700 5300 4800 5700 4800 5300 5800 5300 4800 5800 4800 5300 5800 5300 4800 5800 4800 5300 5800 5300 4800 5800 4800 5300 5800 5300 4800 5800 4800 5300 5800 5300 4800 5800 4800 5300 5800 5300 4800 5800 4800 5300 5800 5300 4800 5800 4800 5300 5800 5300 4800 5800 6000 6000 6000 6000 6000 6000 6000 6000 6000 6000 6000 6000 6000 6000 6000 6000 5700 5700 6000 5100 6000 5700 5100 5000 6000 5500 6000 5000 5500 5500 5800 5000 5800 5500 5000 4800 5800 5300 5800 4800 5300 5300 5700 4800 5700 5300 4800 6000 5500 5100 5500 6000 5100 5100 5700 6000 5700 5100 6000 5800 5300 4800 5300 5800 4800 5000 5500 5800 5500 5000 5800 6000 5500 5000 5500 6000 5000 4800 5300 5700 5300 4800 5700 6000 6000 5100 4800 5700 4800 5100 5700 5800 4800 5300 4800 5800 5300 5300 5000 5800 5000 5300 5800 6000 5000 5500 5000 6000 5500 6000 5100 5700 5100 6000 5700 5500 5100 6000 5100 5500 6000 5100 5500 6000 5500 5100 6000 5800 5500 5000 5500 5800 5000 5800 5300 5000 5300 5800 5000 4800 5300 5700 5300 4800 5700 5700 5100 4800 5100 5700 4800 5100 5700 6000 5700 5100 6000 4800 4800 5500 5800 5000 4800 5800 5300 5300 5700 4800 6000 5500 5100 5100 5700 6000 5800 5300 4800 5000 5500 5800 6000 5500 5000 4800 5300 5700 6000 5100 4800 5700 5800 4800 5300 5300 5000 5800 6000 5000 5500 6000 5100 5700 5500 5100 6000 5100 5500 6000 5800 5500 5000 5800 5300 5000 4800 5300 5700 5700 5100 4800 5100 5700 6000 4800 5700 6000 5100 6000 5700 5100 5000 6000 5500 6000 5000 5500 5500 5800 5000 5800 5500 5000 4800 5800 5300 5800 4800 5300 5300 5700 4800 5700 5300 4800 6000 5500 5100 5500 6000 5100 5100 5700 6000 5700 5100 6000 5800 5300 4800 5300 5800 4800 5000 5500 5800 5500 5000 5800 6000 5500 5000 5500 6000 5000 4800 5300 5700 5300 4800 5700 6000 6000 5100 4800 5700 4800 5100 5700 5800 4800 5300 4800 5800 5300 5300 5000 5800 5000 5300 5800 6000 5000 5500 5000 6000 5500 6000 5100 5700 5100 6000 5700 5500 5100 6000 5100 5500 6000 5100 5500 6000 5500 5100 6000 5800 5500 5000 5500 5800 5000 5800 5300 5000 5300 5800 5000 4800 5300 5700 5300 4800 5700 5700 5100 4800 5100 5700 4800 5100 5700 6000 5700 5100 6000 4800 4800 5500 5800 5000 4800 5800 5300 5300 5700 4800 6000 5500 5100 5100 5700 6000 5800 5300 4800 5000 5500 5800 6000 5500 5000 4800 5300 5700 6000 5100 4800 5700 5800 4800 5300 5300 5000 5800 6000 5000 5500 6000 5100 5700 5500 5100 6000 5100 5500 6000 5800 5500 5000 5800 5300 5000 4800 5300 5700 5700 5100 4800 5100 5700 6000 4800 5500 6000 5000 5500 6000 5000 5700 5300 5800 5000 5000 5300 4800 5800 5500 5800 5700 5300 6000 6000 5800 5300 5700 5500 5500 5500 6000 5100 5500 6000 5100 6000 5500 5000 6000 5500 5000 5300 5800 5000 5300 5800 5000 5800 5300 4800 5800 5300 4800 5100 5700 4800 5100 5700 4800 5500 6000 5100 5500 6000 5100 6000 5500 5000 6000 5500 5000 5300 5800 5000 5300 5800 5000 5800 5300 4800 5800 5300 4800 5100 5700 4800 5100 5700 4800 5000 6000 5700 5800 5100 4800 5000 5500 5100 6000 5700 6000 4800 5300 5000 5800 5500 5300 5500 5800 4800 6000 4800 5300 5000 5500 5700 5700 5300 5000 5100 4800 5800 5800 5500 5100 5300 5000 6000 4800 5000 5500 5100 5700 5800 6000 5700 5300 5500 5100 4800 5000 5100 5700 5300 5800 6000 6000 5800 5500 5700 5100 5000 5300 5700 5500 6000 4800 5100 6000 4800 5300 5800 5700 5800 5100 4800 5000 5700 5500 5000 6000 5700 5800 5100 5300 4800 5000 5500 5100 6000 5700 6000 4800 5300 5000 5800 5500 5300 5500 5800 6000 5100 4800 6000 4800 5300 5000 5500 5700 5700 5300 5000 5100 4800 5800 5800 5500 5100 5300 5000 6000 4800 5000 5500 5100 5700 5800 6000 5700 5300 5500 5100 4800 5000 5100 5700 5300 5800 6000 6000 5800 5500 5700 5100 5000 5300 5700 5500 6000 4800 5100 6000 4800 5300 5800 5700 5800 5100 4800 5000 5100 6000 5300 5500 5700 5800 5100 5000 6000 5300 5500 5800 5000 4800 6000 5100 5000 4800 5500 5700 6000 5300 5100 5500 5300 6000 4800 5000 5800 5500 5300 6000 5000 5100 5700 5800 4800 5300 5100 5000 5700 5800 6000 4800 5000 5100 5800 5700 5500 5000 5100 5300 6000 5800 5700 6000 5700 5500 4800 5100 5300 6000 5800 5700 5000 5100 5500 5100 5300 5500 4800 6000 5700 4800 6000 5800 5100 5300 5700 5000 4800 5800 5700 5700 5700 5800 6000 5000 5100 5300 5500 5800 6000 4800 5000 5300 5500 5500 5700 4800 5800 5500 5100 5000 4800 6000 5700 5800 6000 4800 5100 5300 4800 5000 5300 5500 5700 5500 5700 5700 5700 5700 5700 5700 5700 5700 5700 5700 5700 5700 5700 5700 5700) (list 5700 5700 5700 5100 6000 6000 6000 6000 6000 6000 6000 6000 4800 5000 5800 5700 5500 5300 5000 4800 6000 5800 5500 5300 5100 5000 6000 5800 5700 5700 4800 5000 5100 5500 5800 4800 5000 5100 5300 5700 5500 5300 5100 4800 6000 5800 5700 5500 5300 5000 4800 5100 5100 5000 6000 5800 5700 5500 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 6000 5000 5800 5500 5800 5000 5500 5000 5800 5500 5800 5000 5500 5000 5800 5500 5800 5000 5500 5000 5800 5500 5800 5000 5500 5700 5800 6000 5000 5100 5300 5500 5800 6000 4800 5000 5300 5500 5500 5100 5000 4800 6000 5700 5700 5300 5100 5000 4800 5800 5800 6000 4800 5100 5300 5500 5700 5800 4800 5000 6000 4800 5000 5300 5500 5700 5800 5500 5300 4800 5000 5100 5500 5700 6000 5700 5500 5300 5100 4800 5000 5100 5300 5700 5800 6000 4800 6000 5800 5500 5300 5000 5300 5500 5700 5800 4800 5800 5700 5300 5100 5000 6000 5100 4800 5300 5300 5300 5300 5300 5300 5300 5300 5300 5300 5300 5300 5300 5300 4800 6000 5800 5500 5300 5000 5300 5500 5700 5800 6000 5800 5700 5300 5100 5000 6000 5100 5000 6000 5800 5500 5300 5100 5000 6000 5800 5700 5500 5100 5000 4800 6000 5700 5500 5300 5100 4800 6000 5800 5700 5300 5100 5000 5000 5100 5500 5700 5800 6000 5100 5000 4800 6000 5700 5500 5300 5000 5100 5300 5700 5800 6000 4800 4800 5800 5700 5500 5500 5800 6000 4800 4800 6000 5700 5500 5300 5100 4800 5700 6000 5000 5100 5800 5300 4800 5500 5500 5500 5500 5500 5500 6000 6000 6000 6000 6000 6000 5300 4800 6000 5700 5700 4800 4800 5100 6000 5100 4800 5300 5300 5300 5100 5100 5100 5100 5100 5100 5100 4800 4800 5700 5700 5100 5100 5800 5800 4800 4800 5300 5300 4800 4800 5800 5800 5300 5300 5800 5800 5000 5000 5300 5300 5000 5000 5800 5800 5300 5300 6000 6000 5000 5000 5500 5500 5000 5000 6000 6000 5500 5500 5700 5700 5100 5100 4800 4800 5100 5100 5700 5700 4800 4800 5700 5700 5300 5300 4800 4800 5300 5300 5700 5700 4800 4800 5800 5800 5300 5300 5000 5000 5300 5300 5800 5800 5000 5000 6000 6000 5700 5700 5100 5100 5300 5300 5700 5700 4800 4800 5700 5700 5300 5300 4800 4800 5300 5300 5800 5800 4800 4800 5800 5800 5300 5300 4800 4800 5800 5800 5000 5000 5800 5800 5500 5500 5000 5000 5100 5100 5500 5500 6000 6000 5800 5800 5500 5500 5000 5000 5500 5500 5100 5100 6000 6000 6000 6000 5100 5100 5500 5500 5500 5500 5100 5100 6000 6000 6000 6000 5100 5100 5500 5500 6000 6000 5500 5500 5100 5100 5000 5000 5500 5500 5800 5800 5700 5700 4800 4800 5100 5100 4800 4800 5700 5700 5100 5100 5800 5800 4800 4800 5300 5300 4800 4800 5800 5800 5300 5300 5800 5800 5000 5000 5300 5300 5000 5000 5800 5800 5300 5300 6000 6000 5000 5000 5500 5500 5000 5000 6000 6000 5500 5500 5700 5700 5100 5100 4800 4800 5100 5100 5700 5700 4800 4800 5700 5700 5300 5300 4800 4800 5300 5300 5700 5700 4800 4800 5800 5800 5300 5300 5000 5000 5300 5300 5800 5800 5000 5000 5100 5100 5700 5700 6000 6000 5700 5700 5100 5100 6000 6000 5300 5300 5700 5700 4800 4800 5700 5700 5300 5300 4800 4800 5300 5300 5800 5800 4800 4800 5800 5800 5300 5300 4800 4800 5500 5500 5800 5800 5000 5000 5800 5800 5500 5500 5000 5000 5100 5100 5500 5500 6000 6000 5800 5800 5500 5500 5000 5000 5500 5500 5100 5100 6000 6000 6000 6000 5100 5100 5500 5500 5500 5500 5100 5100 6000 6000 6000 6000 5100 5100 5500 5500 6000 6000 5500 5500 5100 5100 5000 5000 5500 5500 5800 5800 5700 5700 4800 4800 5100 5100 4800 4800 5700 5700 5100 5100 5800 5800 4800 4800 5300 5300 4800 4800 5800 5800 5300 5300 5800 5800 5000 5000 5300 5300 5000 5000 5800 5800 5300 5300 6000 6000 5000 5000 5500 5500 5000 5000 6000 6000 5500 5500 5700 5700 5100 5100 4800 4800 5100 5100 5700 5700 4800 4800 5700 5700 5300 5300 4800 4800 5300 5300 5700 5700 4800 4800 5800 5800 5300 5300 5000 5000 5300 5300 5800 5800 5000 5000 5100 5100 5700 5700 6000 6000 5700 5700 5100 5100 6000 6000 5300 5300 5700 5700 4800 4800 5700 5700 5300 5300 4800 4800 5300 5300 5800 5800 4800 4800 5800 5800 5300 5300 4800 4800 5500 5500 5800 5800 5000 5000 5800 5800 5500 5500 5000 5000 5100 5100 5500 5500 6000 6000 5800 5800 5500 5500 5000 5000 5500 5500 5100 5100 6000 6000 6000 6000 5100 5100 5500 5500 5500 5500 5100 5100 6000 6000 6000 6000 5100 5100 5500 5500 6000 6000 5500 5500 5100 5100 5000 5000 5500 5500 5800 5800 5700 5700 4800 4800 5100 5100 4800 4800 5700 5700 5100 5100 5800 5800 4800 4800 5300 5300 4800 4800 5800 5800 5300 5300 5800 5800 5000 5000 5300 5300 5000 5000 5800 5800 5300 5300 6000 6000 5000 5000 5500 5500 5000 5000 6000 6000 5500 5500 5700 5700 5100 5100 4800 4800 5100 5100 5700 5700 4800 4800 5700 5700 5300 5300 4800 4800 5300 5300 5700 5700 4800 4800 5800 5800 5300 5300 5000 5000 5300 5300 5800 5800 5000 5000 5100 5100 5700 5700 6000 6000 5700 5700 5100 5100 6000 6000 5300 5300 5700 5700 4800 4800 5700 5700 5300 5300 4800 4800 5300 5300 5800 5800 4800 4800 5800 5800 5300 5300 4800 4800 5500 5500 5800 5800 5000 5000 5800 5800 5500 5500 5000 5000 5100 5100 5500 5500 6000 6000 5800 5800 5500 5500 5000 5000 5500 5500 5100 5100 6000 6000 6000 6000 5100 5100 5500 5500 5500 5500 5100 5100 6000 6000 6000 6000 5100 5100 5500 5500 6000 6000 5500 5500 5100 5100 5000 5000 5500 5500 5800 5800 5100 5100 4800 4800 5700 5700 5300 5300 4800 4800 5800 5800 5300 5300 5000 5000 5800 5800 5500 5500 5000 5000 6000 6000 4800 4800 5100 5100 5700 5700 4800 4800 5300 5300 5700 5700 5000 5000 5300 5300 5800 5800 6000 6000 5700 5700 5100 5100 4800 4800 5700 5700 5300 5300 4800 4800 5800 5800 5300 5300 5000 5000 5800 5800 5500 5500 5100 5100 5500 5500 6000 6000 5800 5800 5500 5500 5000 5000 5500 5500 5100 5100 6000 6000 6000 6000 5100 5100 5500 5500 5100 5100 4800 4800 5700 5700 5300 5300 4800 4800 5800 5800 5300 5300 5000 5000 5800 5800 5500 5500 5000 5000 6000 6000 4800 4800 5100 5100 5700 5700 4800 4800 5300 5300 5700 5700 5000 5000 5300 5300 5800 5800 4800 4800 5700 5700 5300 5300 4800 4800 5800 5800 5300 5300 5000 5000 5800 5800 5500 5500 5800 5800 5500 5500 5000 5000 5500 5500 5100 5100 6000 6000 6000 6000 5100 5100 5500 5500 5700 4800 5300 5000 5800 5300 5800 5000 5500 5500 5300 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5000 5700 5800 4800 5000 5300 5000 4800 6000 5500 5800 5300 5100 5000 6000 5700 5800 4800 5000 5100 5500 5700 5800 6000 5700 5500 5300 5100 4800 5000 5100 5300 5700 5800 6000 4800 5800 5700 5500 5300 5000 4800 6000 5800 5500 5300 5100 5000 6000 5800 5700 4800 5000 5100 5500 5500 6000 5700 5500 5100 5000 4800 6000 5700 4800 5000 5100 5300 5700 5300 5300 5100 4800 5800 5700 5500 5300 5500 5800 6000 4800 5300 5100 5000 5000 5000 5000 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5700 5300 5100 5000 4800 5800 6000 4800 5100 5300 5500 5500 5800 5000 5800 5500 5000 5500 5800 5000 5800 5500 5000 5500 5800 5000 5800 5500 5000 5500 5800 5000 5800 5500 5000 5300 5500 5800 6000 4800 5100 5700 6000 6000 6000 5000 5100 5300 5500 5800 5700 5500 5300 5000 4800 6000 5800 5700 5700 5700 5800 4800 5000 5100 5500 5700 6000 5700 5500 5300 5100 4800 5000 5100 5300 5700 5800 6000 4800 6000 6000 6000 6000 6000 6000 6000 6000 6000 6000 6000 6000 6000 6000 6000 6000 6000 6000 6000 6000 6000 6000 6000 6000 6000 6000 6000 6000 4800 5000 5100 5500 5700 6000 6000 5700 5500 5300 5100 4800 5700 5700 5700 5700 5700 5700 5700 5700 5700 5700 5700 5700 5700 5700 5700 5700 5700 5700 5700 5700 5700 5700 5700 5700 5700 5700 5700 5700 5700 5700 5700 5700 5700 5700 5700 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 5100 6000 5800 6000 5000 5100 5300 5300 5000 4800 6000 5800 5500 5800 6000 4800 5100 5300 5500 5500 5100 5000 4800 6000 5700 5700 5300 5100 5000 4800 5800 6000 4800 5000 5300 5500 5700 5800 5500 5300 5100 5000 6000 6000 6000 6000 4800 6000 5100 5100 5100 5800 5800 6000 6000 6000 6000 6000 5800 6000 6000 6000 5800 5700 5700 5700 4800 5700 4800 5500 5500))) nil "Notas"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 438 418) (om-make-point 130 70) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (43/4 (((4 4) ((1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1)) (1 (1 1 1)) (1 (1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)) (1 (1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)))) ((3 4) ((1 (1 1 -1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1339 418) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 514 217) (om-make-point 28 32) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 17" (quote t) (quote nil) (om-make-point 462 217) (om-make-point 50 32) (list 4 4) "(4 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 16" (quote t) (quote nil) (om-make-point 423 217) (om-make-point 36 32) 76 "76" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMQUANTIFY 4" (quote omquantify) (quote ((om-load-inputfun (quote input-funbox) "durations (list)" "SELF" (list 100)) (om-load-inputfun (quote input-funbox) "tempi (number or list)" "TEMPI" 76) (om-load-inputfun (quote input-funbox) "list of time signature(s)" "MEASURES" (list 4 4)) (om-load-inputfun (quote input-funbox) "maximum subdivision" "MAX/" 8))) (om-make-point 440 266) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SAVE-AS-MIDI" (quote save-as-midi) (quote ((om-load-inputfun (quote input-funbox) "" "OBJECT" nil))) (om-make-point 987 779) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Agrupa XYZ" (om-load-patch-abs1 "Agrupa XYZ" (quote ((let ((box (om-load-boxout "output 4" 3 (om-make-point 329 270) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "Lista" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 255 382) (om-make-point 28 32) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 3" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 252 491) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH 3" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" 0) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 258 436) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 160 492) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH 2" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" 0) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 166 437) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 163 383) (om-make-point 28 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 3" 2 (om-make-point 264 606) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "Z" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 2" 1 (om-make-point 172 605) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "Y" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 89 605) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "X" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 77 494) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" 0) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 83 439) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 80 385) (om-make-point 28 36) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "Arquivo" 0 (om-make-point 171 12) "" "Arquivo" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "STRING-TO-NUMBER" (quote string-to-number) (quote ((om-load-inputfun (quote input-funbox) "STRING" "STRING" nil))) (om-make-point 82 84) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 4" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 160 170) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "N-GROUP-LIST" (quote n-group-list) (quote ((om-load-inputfun (quote input-funbox) "tree" "TREE" (list 1 2)) (om-load-inputfun (quote input-funbox) "nth-elem" "N-ELEM" 3))) (om-make-point 158 283) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 198 245) (om-make-point 28 32) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((15 0 0 0 nil 0) (3 0 2 0 nil 0) (16 0 2 1 nil 0) (1 0 3 0 nil 0) (5 0 4 0 nil 0) (16 0 4 1 nil 0) (6 0 5 0 nil 0) (2 0 7 0 nil 0) (4 0 8 0 nil 0) (10 0 9 0 nil 0) (11 0 10 0 nil 0) (16 0 10 1 nil 0) (12 0 11 0 nil 0) (14 0 15 0 nil 0) (13 0 15 1 nil 0) (15 0 16 0 nil 0) (17 0 16 1 nil 0))) 6.2 nil "" (om-make-point -8 -8) (om-make-point 1920 938)) (quote ((om-load-inputfun (quote input-funbox) "" "Arquivo" nil))) (om-make-point 719 33) nil (list (append (list 445 445 445 445 445 443 443 443 445 445 445 445 445 445 445 445 445 445 445 445 445 445 258 258 258 258 258 258 258 258 284 284 284 284 284 284 284 284 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 258 258 258 258 258 258 258 258 284 284 284 284 284 284 284 284 445 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 667 667 667 643 643 643 662 662 662 662 649 649 649 649 649 649 649 649 661 659 441 441 441 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 330 330 330 330 330 330 330 330 330 330 330 330 330 330 330 330 330 330 330 330 330 330 330 330 330 330 330 330 330 330 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 448 448 448 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 351 330 259 259 259 259 259 259 259 259 259 259 259 259 283 259 259 259 259 283 283 283 283 283 283 259 259 259 259 259 259 259 259 259 259 259 307 308 309 311 304 303 302 301 299 291 289 287 286 293 294) (list 296 297 298 258 286 288 287 292 289 291 296 298 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 267 265 283 283 283 283 283 283 261 262 261 262 263 263 265 265 266 266 267 267 268 268 270 270 271 271 272 272 273 273 275 275 276 276 277 278 280 281 282 259 259 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 652 653 657 658 654 656 651 649 661 659 662 663 664 648 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 300 300 300 300 300 300 300 284 284 259 259 258 662 662 257 255 254 253 252 251 257 255 254 253 252 251 257 258 257 425 425 425 425 566 566 574 588 648 666 667 277 278 280 281 282 451 451 451 451 451 451 425 425 425 425 425 425 451 451 451 451 451 451 425 425 425 425 425 425 451 451 451 451 451 451 425 425 425 425 425 425 451 451 451 451 451 451 425 425 425 425 425 425 451 451 451 451 451 451 425 425 425 425 425 425 451 451 451 451 451 451 425 425 425 425 425 425 451 451 451 451 451 451 425 425 451 451 451 451 451 451 425 425 425 425 451 451 451 451 451 451 425 425 425 425 425 425 451 451 451 451 451 451 425 425 425 425 451 451 451 451 451 451 425 425 451 451 451 451 451 451 451 451 451 451 451 451 451 451 451 451 451 451 451 451 451 451 451 451 425 425 425 425 425 425 425 425 425 425 425 425 425 425 425 425 425 425 425 425 425 425 425 425 478 478 478 478 503 503 503 503 503 503 478 478 478 478 478 478 503 503 503 503 503 503 478 478 478 478 478 478 503 503 503 503 503 503 478 478 478 478 478 478 503 503 503 503 503 503 478 478 478 478 478 478 503 503 503 503 503 503 478 478 478 478 478 478 503 503 503 503 503 503 478 478 478 478 478 478 503 503 503 503 503 503 478 478 478 478 478 478 503 503 503 503 503 503 478 478 478 478 478 478 503 503 503 503 503 503 478 478 478 478 478 478 503 503 503 503 503 503 478 478 478 478 478 478 503 503 503 503 503 503 478 478 503 503 503 503 503 503 503 503 503 503 503 503 503 503 503 503 503 503 503 503 503 503 503 503 478 478 478 478 478 478 478 478 478 478 478 478 478 478 478 478 478 478 478 478 478 478 478 478 530 530 530 530 556 556 556 556 556 556 530 530 530 530 530 530 556 556 556 556 556 556 530 530 530 530 530 530 556 556 556 556 556 556 530 530 530 530 530 530 556 556 556 556 556 556 530 530 530 530 530 530 556 556 556 556 556 556 530 530 530 530 530 530 556 556 556 556 556 556 530 530 530 530 530 530 556 556 556 556 556 556 530 530 530 530 530 530 556 556 556 556 556 556 530 530 530 530 530 530 556 556 556 556 556 556 530 530 530 530 530 530 556 556 556 556 556 556 530 530 530 530 530 530 556 556 556 556 556 556 530 530 556 556 556 556 556 556 556 556 556 556 556 556 556 556 556 556 556 556 556 556 556 556 556 556 530 530 530 530 530 530 530 530 530 530 530 530 530 530 530 530 530 530 530 530 530 530 530 530 583 583 583 583 608 608 608 608 608 608 583 583 583 583 583 583 608 608 608 608 608 608 583 583 583 583 583 583 608 608 608 608 608 608 583 583 583 583 583 583 608 608 608 608 608 608 583 583 583 583 583 583 608 608 608 608 608 608 583 583 583 583 583 583 608 608 608 608 608 608 583 583 583 583 583 583 608 608 608 608 608 608 583 583 583 583 583 583 608 608 608 608 608 608 583 583 583 583 583 583 608 608 608 608 608 608 583 583 583 583 583 583 608 608 608 608 608 608 583 583 583 583 583 583 608 608 608 608 608 608 583 583 608 608 608 608 608 608 608 608 608 608 608 608 608 608 608 608 608 608 608 608 608 608 608 608 583 583 583 583 583 583 583 583 583 583 583 583 583 583 583 583 583 583 583 583 583 583 583 583 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 330 330 330 330 330 330 330 330 330 283 271 267 268 270 271 275 273 272 276 277 278 280 282 281 266 265 263 262 259 261 259 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 283 283 283 283 283 283 283 283 283 283 283 283 283 259 259 259 261 262 264 268 270 275 273 271 276 282 281 279 278 283 283 283 283 283 283 283 283 283 283 283 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 259 259 259 259 259 259 259 293 294 297 283 283 283 283 283 283 283 283 283 283 283 283 288 292 306 259 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 284 286 298 297 296 294 293 292 286 287 288 289 297 296 294 293 292 327 326 324 323 322 314 316 317 318 319 321 313 313 313 313 313 313 313 313 313 313 313 313 284 286 287 288 289 291 292 293 294 296 297 298 299 301 302 303 304 306 307 308 309 311 312 313 314 316 317 318 319 321 326 324 323 322 327 546 547 548 549 551 552 553 554 556 557 558 559 561 493 494 496 497 498 499 501 291 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 287 288 283 283 283 283 259 667 313 300 300 298 299 284 284 283 283 289 291 259 305 304 303 300 302 396 425 425)) (append (list 452 452 451 454 455 458 472 474 462 454 452 464 459 457 468 469 470 467 467 466 467 469 361 361 361 361 361 361 361 361 361 361 361 361 361 361 361 361 376 374 371 374 376 371 376 374 371 374 376 371 376 374 371 374 376 371 376 374 371 374 376 371 376 374 371 374 376 371 376 374 371 374 376 371 376 374 371 374 376 371 376 374 371 374 376 371 384 381 379 381 384 379 384 381 379 381 384 379 384 381 379 381 384 379 384 381 379 381 384 379 384 381 379 381 384 379 384 381 379 381 384 379 384 381 379 381 384 379 384 381 379 381 384 379 391 389 386 389 391 386 391 389 386 389 391 386 391 389 386 389 391 386 391 389 386 389 391 386 391 389 386 389 391 386 391 389 386 389 391 386 391 389 386 389 391 386 391 389 386 389 391 386 399 396 394 396 399 394 399 396 394 396 399 394 399 396 394 396 399 394 399 396 394 396 399 394 399 396 394 396 399 394 399 396 394 396 399 394 399 396 394 396 399 394 399 396 394 396 399 394 424 426 429 426 424 429 424 426 429 426 424 429 424 426 429 426 424 429 424 426 429 426 424 429 424 426 429 426 424 429 424 426 429 426 424 429 424 426 429 426 424 429 424 426 429 426 424 429 416 419 421 419 416 421 416 419 421 419 416 421 416 419 421 419 416 421 416 419 421 419 416 421 416 419 421 419 416 421 416 419 421 419 416 421 416 419 421 419 416 421 416 419 421 419 416 421 409 411 414 411 409 414 409 411 414 411 409 414 409 411 414 411 409 414 409 411 414 411 409 414 409 411 414 411 409 414 409 411 414 411 409 414 409 411 414 411 409 414 409 411 414 411 409 414 401 404 406 404 401 406 401 404 406 404 401 406 401 404 406 404 401 406 401 404 406 404 401 406 401 404 406 404 401 406 401 404 406 404 401 406 401 404 406 404 401 406 401 404 406 404 401 406 436 434 431 434 436 431 436 434 431 434 436 431 436 434 431 434 436 431 436 434 431 434 436 431 436 434 431 434 436 431 436 434 431 434 436 431 436 434 431 434 436 431 436 434 431 434 436 431 452 449 447 449 452 447 452 449 447 449 452 447 452 449 447 449 452 447 452 449 447 449 452 447 452 449 447 449 452 447 452 449 447 449 452 447 452 449 447 449 452 447 452 449 447 449 452 447 459 457 454 457 459 454 459 457 454 457 459 454 459 457 454 457 459 454 459 457 454 457 459 454 459 457 454 457 459 454 459 457 454 457 459 454 459 457 454 457 459 454 459 457 454 457 459 454 467 464 462 464 467 467 464 462 464 467 462 467 464 462 464 467 462 467 464 462 464 467 462 467 464 462 464 467 462 467 464 462 464 467 462 467 464 462 464 467 462 467 464 462 464 467 462 439 442 444 442 439 444 439 442 444 442 439 444 439 442 444 442 439 444 439 442 444 442 439 444 439 442 444 442 439 444 439 442 444 442 439 444 439 442 444 442 439 444 439 442 444 442 439 444 477 479 482 479 477 482 477 479 482 479 477 482 477 479 482 479 477 482 477 479 482 479 477 482 477 479 482 479 477 482 477 479 482 479 477 482 477 479 482 479 477 482 477 479 482 479 477 482 469 472 474 472 469 474 469 472 474 472 469 474 469 472 474 472 469 474 469 472 474 472 469 474 469 472 474 472 469 474 469 472 474 472 469 474 469 472 474 472 469 474 469 472 474 472 469 474 514 517 519 517 514 519 514 517 519 517 514 519 514 517 519 517 514 519 514 517 519 517 514 519 514 517 519 517 514 519 514 517 519 517 514 519 514 517 519 517 514 519 514 517 519 517 514 519 507 509 512 509 507 512 507 509 512 509 507 512 507 509 512 509 507 512 507 509 512 509 507 512 507 509 512 509 507 512 507 509 512 509 507 512 507 509 512 509 507 512 507 509 512 509 507 512 499 502 504 502 499 504 499 502 504 502 499 504 499 502 504 502 499 504 499 502 504 502 499 504 499 502 504 502 499 504 499 502 504 502 499 504 499 502 504 502 499 504 499 502 504 502 499 504 489 487 484 487 489 484 489 487 484 487 489 484 489 487 484 487 489 484 489 487 484 487 489 484 489 487 484 487 489 484 489 487 484 487 489 484 489 487 484 487 489 484 489 487 484 487 489 484 497 494 492 494 497 492 497 494 492 494 497 492 497 494 492 494 497 492 497 494 492 494 497 492 497 494 492 494 497 492 497 494 492 494 497 492 497 494 492 494 497 492 497 494 492 494 497 492 527 525 522 525 527 522 527 525 522 525 527 522 527 525 522 525 527 522 527 525 522 525 527 522 527 525 522 525 527 522 527 525 522 525 527 522 527 525 522 525 527 522 527 525 522 525 527 522 535 532 529 532 535 529 535 532 529 532 535 529 535 532 529 532 535 529 535 532 529 532 535 529 535 532 529 532 535 529 535 532 529 532 535 529 535 532 529 532 535 529 535 532 529 532 535 529 542 540 537 540 542 537 542 540 537 540 542 537 542 540 537 540 542 537 542 540 537 540 542 537 542 540 537 540 542 537 542 540 537 540 542 537 542 540 537 540 542 537 542 540 537 540 542 537 552 555 557 555 552 557 552 555 557 555 552 557 552 555 557 555 552 557 552 555 557 555 552 557 552 555 557 555 552 557 552 555 557 555 552 557 552 555 557 555 552 557 552 555 557 555 552 557 544 547 550 547 544 550 544 547 550 547 544 550 544 547 550 547 544 550 544 547 550 547 544 550 544 547 550 547 544 550 544 547 550 547 544 550 544 547 550 547 544 550 544 547 550 547 544 550 559 559 559 559 559 559 559 559 559 559 559 559 559 559 559 559 453 477 479 482 479 477 482 489 487 484 487 489 484 492 494 497 494 492 497 504 502 499 502 504 499 507 509 512 509 507 512 527 524 522 524 527 522 514 517 519 517 514 519 550 547 544 547 550 544 537 540 542 540 537 542 535 532 529 532 535 529 552 555 557 555 552 557 559 559 474 472 469 472 474 469 462 464 467 464 462 467 459 457 454 457 459 454 447 449 452 449 447 452 431 434 437 434 431 437 444 442 439 442 444 439 394 396 399 396 394 399 406 404 401 404 406 401 414 411 409 411 414 409 416 419 421 419 416 421 429 426 424 426 429 424 386 389 391 389 386 391 384 384 492 494 497 504 502 499 507 509 512 527 524 522 514 517 519 550 547 544 537 540 542 535 532 529 552 555 557 559 474 472 469 462 464 467 459 457 454 447 449 452 431 434 437 444 442 439 394 396 399 406 404 401 414 411 409 416 419 421 429 426 424 386 389 391 384 477 479 482 479 477 482 489 487 484 487 489 484 492 494 497 494 492 497 504 502 499 502 504 499 507 509 512 509 507 512 527 524 522 524 527 522 514 517 519 517 514 519 550 547 544 547 550 544 537 540 542 540 537 542 535 532 529 532 535 529 552 555 557 555 552 557 559 559 474 472 469 472 474 469 462 464 467 464 462 467 459 457 454 457 459 454 447 449 452 449 447 452 431 434 437 434 431 437 444 442 439 442 444 439 394 396 399 396 394 399 406 404 401 404 406 401 414 411 409 411 414 409 416 419 421 419 416 421 429 426 424 426 429 424 386 389 391 389 386 391 384 384 492 494 497 504 502 499 507 509 512 527 524 522 514 517 519 550 547 544 537 540 542 535 532 529 552 555 557 559 474 472 469 462 464 467 459 457 454 447 449 452 431 434 437 444 442 439 394 396 399 406 404 401 414 411 409 416 419 421 429 426 424 386 389 391 384 484 487 489 484 487 489 381 379 374 369 369 371 376 374 364 366 381 379 383 383 470 467 469 436 436 444 439 442 444 439 442 447 452 449 447 452 449 459 454 457 459 454 457 462 467 464 462 467 464 474 469 472 474 469 472 444 439 442 444 439 442 447 452 449 447 452 449 459 454 457 459 454 457 462 467 464 462 467 464 474 469 472 474 469 472 465 463 461 462 466 456 457 460 458 455 453 471 472 475 473 470 468 451 452 446 448 431 432 435 433 436 437 445 443 441 442 440 438 430 428 426 427 425 423 416 417 420 418 421 422 415 413 411 412 410 408 401 402 405 403 406 407 399 398 396 397 394 393 387 389 388 391 392 386 383 384 379 382 381 374 378 376 377 373 372 465 463 461 462 466 467 456 457 460 458 455 453 471 472 475 473 470 468 451 452 446 447 450 448 431 432 435 433 436 437 445 443 441 442 440 438 430 428 426 427 425 423 416 417 420 418 421 422 415 413 411 412 410 408 401 402 405 403 406 407 399 398 396 397 394 393 387 389 388 391 392 386 383 384 379 382 381 374 378 376 377 450 447 467 460 461 462 466 465 463 467 468 470 473 472 471 458 457 456 452 453 455 451 450 436 435 431 432 433 430 428 427 423 425 426 437 438 440 443 442 441 445 446 447 416 417 418 422 421 420 401 402 403 407 406 405 415 413 412 408 410 411 399 398 397 393 394 396 386 387 388 392 391 389 384 383 382 378 379 381 377 376 374 461 461 461 462 463 465 466 467 468 470 471 472 473 475 476 476 477 480 478 460 458 457 456 455 453 446 447 448 450 451 432 433 435 436 397 396 437 437 437 437 437 437 437 437 437 437 437 437 437 437 437) (list 437 437 437 450 423 423 423 423 423 423 423 423 480 481 478 477 476 475 473 472 471 470 468 467 466 465 463 462 461 453 456 457 458 460 438 440 441 442 443 445 452 451 450 448 447 446 437 436 435 433 432 362 362 385 383 382 381 380 378 482 482 482 482 482 482 482 482 482 482 482 482 482 482 482 482 482 482 482 482 482 482 482 482 482 482 482 482 482 482 482 482 455 369 366 364 366 369 364 369 366 364 366 369 364 369 366 364 366 369 364 369 366 364 366 369 364 461 462 463 465 466 467 468 470 471 472 473 475 476 460 458 457 456 455 453 445 443 442 441 440 438 446 447 448 450 451 452 477 478 480 481 431 432 433 435 436 437 430 428 427 416 417 418 420 421 415 413 412 411 410 408 401 402 403 405 406 407 520 519 518 516 515 521 523 524 525 526 528 534 533 531 530 529 535 538 536 539 539 539 539 539 539 539 539 539 539 539 539 539 539 520 519 518 516 515 521 523 524 525 526 527 534 533 531 530 529 535 538 537 431 430 428 427 426 425 423 422 421 420 418 417 416 415 413 412 411 410 408 407 406 405 403 402 401 393 394 396 397 398 399 394 393 392 391 389 388 387 385 378 379 381 382 383 384 376 374 373 372 364 366 367 368 416 415 413 412 411 410 408 437 423 481 482 462 371 376 452 452 452 452 452 452 447 447 447 447 447 447 451 448 447 469 469 472 472 394 399 394 392 539 539 539 482 482 482 482 482 474 474 472 472 469 469 474 474 462 462 464 464 467 467 464 464 462 462 467 467 454 454 457 457 459 459 457 457 454 454 459 459 447 447 449 449 452 452 449 449 447 447 452 452 429 429 426 426 424 424 426 426 429 429 424 424 421 421 419 419 416 416 419 419 421 421 416 416 414 414 411 411 409 409 411 411 414 414 409 409 391 391 389 389 386 386 379 379 381 381 384 384 381 381 379 379 384 384 371 371 374 374 376 376 374 374 371 371 376 376 366 366 369 369 366 366 364 364 369 369 394 394 396 396 399 399 406 406 404 404 401 401 436 436 434 434 431 431 439 439 442 442 444 444 436 436 434 434 431 431 439 439 442 442 444 444 399 399 396 396 394 394 401 401 404 404 406 406 469 469 472 472 474 474 472 472 469 469 474 474 462 462 464 464 467 467 464 464 462 462 467 467 454 454 457 457 459 459 457 457 454 454 459 459 447 447 449 449 452 452 449 449 447 447 452 452 429 429 426 426 424 424 426 426 429 429 424 424 421 421 419 419 416 416 419 419 421 421 416 416 414 414 411 411 409 409 411 411 414 414 409 409 386 386 389 389 391 391 389 389 386 386 391 391 379 379 381 381 384 384 381 381 379 379 384 384 371 371 374 374 376 376 374 374 371 371 376 376 364 364 366 366 369 369 366 366 364 364 369 369 394 394 396 396 399 399 406 406 404 404 401 401 436 436 434 434 431 431 439 439 442 442 444 444 436 436 434 434 431 431 439 439 442 442 444 444 399 399 396 396 394 394 401 401 404 404 406 406 469 469 472 472 474 474 472 472 469 469 474 474 462 462 464 464 467 467 464 464 462 462 467 467 454 454 457 457 459 459 457 457 454 454 459 459 447 447 449 449 452 452 449 449 447 447 452 452 429 429 426 426 424 424 426 426 429 429 424 424 421 421 419 419 416 416 419 419 421 421 416 416 414 414 411 411 409 409 411 411 414 414 409 409 386 386 389 389 391 391 389 389 386 386 391 391 379 379 381 381 384 384 381 381 379 379 384 384 371 371 374 374 376 376 374 374 371 371 376 376 364 364 366 366 369 369 366 366 364 364 369 369 394 394 396 396 399 399 406 406 404 404 401 401 436 436 434 434 431 431 439 439 442 442 444 444 436 436 434 434 431 431 439 439 442 442 444 444 399 399 396 396 394 394 401 401 404 404 406 406 469 469 472 472 474 474 472 472 469 469 474 474 462 462 464 464 467 467 464 464 462 462 467 467 454 454 457 457 459 459 457 457 454 454 459 459 447 447 449 449 452 452 449 449 447 447 452 452 429 429 426 426 424 424 426 426 429 429 424 424 421 421 419 419 416 416 419 419 421 421 416 416 414 414 411 411 409 409 411 411 414 414 409 409 386 386 389 389 391 391 389 389 386 386 391 391 379 379 381 381 384 384 381 381 379 379 384 384 371 371 374 374 376 376 374 374 371 371 376 376 364 364 366 366 369 369 366 366 364 364 369 369 394 394 396 396 399 399 406 406 404 404 401 401 436 436 434 434 431 431 439 439 442 442 444 444 436 436 434 434 431 431 439 439 442 442 444 444 399 399 396 396 394 394 401 401 404 404 406 406 474 474 472 472 469 469 467 467 464 464 462 462 459 459 457 457 454 454 452 452 449 449 447 447 424 424 426 426 429 429 416 416 419 419 421 421 409 409 411 411 414 414 391 391 389 389 386 386 384 384 381 381 379 379 376 376 374 374 371 371 369 369 366 366 364 364 394 394 396 396 399 399 406 406 404 404 401 401 436 436 434 434 431 431 439 439 442 442 444 444 474 474 472 472 469 469 467 467 464 464 462 462 459 459 457 457 454 454 452 452 449 449 447 447 424 424 426 426 429 429 416 416 419 419 421 421 409 409 411 411 414 414 384 384 381 381 379 379 376 376 374 374 371 371 369 369 366 366 364 364 406 406 404 404 401 401 436 436 434 434 431 431 439 439 442 442 444 444 421 416 419 409 414 411 406 401 404 436 371 482 482 482 482 482 482 482 482 482 482 482 482 482 482 482 482 482 482 482 481 477 478 480 481 475 473 472 471 468 470 467 466 465 463 461 462 416 417 418 420 421 422 415 413 412 411 410 408 401 402 403 405 406 407 480 478 477 476 475 473 472 471 470 468 467 466 465 463 462 453 456 457 458 460 452 455 461 460 458 457 456 455 453 440 441 442 443 445 363 371 362 376 374 373 372 371 364 366 367 368 363 362 369 377 369 377 362 362 362 362 362 362 362 362 362 362 362 362 362 362 445 443 442 441 440 446 447 448 450 451 452 364 366 369 366 364 369 364 366 369 366 364 369 364 366 369 366 364 369 364 366 369 366 364 369 451 452 446 447 448 450 437 423 423 423 425 426 427 428 430 437 436 435 433 432 431 438 437 437 437 398 416 417 418 420 421 415 413 412 411 410 408 401 402 403 405 406 407 400 399 399 399 399 399 399 399 399 423 423 423 423 423 423 423 423 423 423 423 423 423 423 423 423 423 423 423 423 416 417 418 420 421 423 415 413 412 411 410 408 437 437 437 437 437 437 437 437 437 437 437 437 437 437 437 437 437 437 437 437 437 437 437 437 437 437 437 437 437 437 437 437 437 437 437 362 362 362 362 362 362 362 362 362 362 362 362 362 362 362 362 362 362 362 362 423 462 463 465 466 467 475 473 472 471 470 468 446 447 448 450 451 452 460 458 457 456 455 453 445 443 442 441 440 438 431 432 433 435 436 437 430 428 427 426 425 423 399 399 423 424 423 482 482 514 422 422 423 423 423 423 423 422 423 399 399 438 405 405 405 408 405 448 364 364)) (append (list -41 -41 -41 -41 -41 -42 -42 -42 -42 -42 -42 -42 -42 -42 -41 -41 -41 -41 -41 -41 -42 -42 -30 -32 -24 -27 -18 -21 -13 -15 -30 -32 -24 -27 -18 -21 -13 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -30 -32 -24 -27 -18 -21 -13 -15 -30 -32 -24 -27 -18 -21 -13 -15 -41 -31 -31 -31 -34 -34 -34 -31 -31 -31 -34 -34 -34 -31 -31 -31 -34 -34 -34 -31 -31 -31 -34 -34 -34 -31 -31 -31 -34 -34 -34 -31 -31 -31 -34 -34 -34 -31 -31 -31 -34 -34 -34 -31 -31 -31 -34 -34 -34 -31 -31 -31 -34 -34 -34 -31 -31 -31 -34 -34 -34 -31 -31 -31 -34 -34 -34 -31 -34 -31 -31 -31 -34 -34 -34 -31 -31 -31 -34 -34 -34 -31 -31 -31 -34 -34 -34 -31 -31 -31 -34 -34 -34 -31 -31 -31 -34 -34 -34 -31 -31 -31 -34 -34 -34 -31 -31 -31 -34 -34 -34 -31 -31 -31 -34 -34 -34 -31 -31 -31 -34 -34 -34 -31 -31 -31 -34 -34 -34 -31 -31 -31 -34 -34 -34 -31 -31 -31 -34 -34 -34 -31 -34 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -31 -31 -31 -34 -34 -34 -31 -31 -31 -34 -34 -34 -31 -31 -31 -34 -34 -34 -31 -31 -31 -34 -34 -34 -31 -31 -31 -34 -34 -34 -31 -31 -31 -34 -34 -34 -31 -31 -31 -34 -34 -34 -31 -31 -31 -34 -34 -34 -31 -31 -31 -34 -34 -34 -31 -31 -31 -34 -34 -34 -31 -31 -31 -34 -34 -34 -31 -34 -31 -31 -31 -34 -34 -34 -31 -31 -31 -34 -34 -34 -31 -31 -31 -34 -34 -34 -31 -31 -31 -34 -34 -34 -31 -31 -31 -34 -34 -34 -31 -31 -31 -34 -34 -34 -31 -31 -31 -34 -34 -34 -31 -31 -31 -34 -34 -34 -31 -31 -31 -34 -34 -34 -31 -31 -31 -34 -34 -34 -31 -31 -31 -34 -34 -34 -31 -31 -31 -34 -34 -34 -31 -34 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -37 -35 -35 -35 -35 -35 -35 -35 -35 -35 -35 -35 -35 -30 -30 -42 -42 -42 -36 -37 -36 -36 -36 -37 -37 -37 -36 -36 -36 -37 -37 -37 -36 -36 -36 -37 -37 -37 -36 -36 -36 -37 -37 -37 -36 -36 -36 -37 -37 -37 -36 -36 -36 -37 -37 -37 -36 -36 -36 -37 -37 -37 -36 -36 -36 -37 -37 -37 -36 -36 -36 -37 -37 -37 -36 -36 -36 -37 -37 -37 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -41 -41 -41 -41 -41 -41 -41 -41 -41 -41 -41 -41 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -41 -41 -41 -41 -41 -41 -41 -41 -41 -41 -41 -41 -41 -41 -41 -41 -41 -41 -41 -41 -41 -41 -41 -41 -41 -41 -41 -41 -41 -41 -41 -42 -42 -41 -41 -42 -42 -42 -42 -42 -42 -41 -41 -41 -41 -41 -41 -42 -42 -42 -42 -42 -42 -41 -41 -41 -41 -41 -41 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -41 -41 -41 -41 -41 -41 -41 -41 -41 -41 -41 -41 -41 -41 -41 -41 -41 -41 -41 -41 -41 -41 -41 -41 -41 -41 -41 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42) (list -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -39 -39 -38 -39 -38 -39 -38 -39 -38 -39 -38 -39 -38 -39 -38 -39 -38 -39 -38 -39 -38 -39 -38 -39 -38 -38 -38 -38 -38 -38 -38 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -42 -42 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -42 -42 -42 -42 -42 -42 -42 -42 -42 -39 -39 -32 -35 -35 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -36 -37 -36 -37 -42 -42 -42 -42 -42 -42 -42 -39 -39 -39 -39 -39 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -37 -36 -36 -36 -36 -36 -36 -36 -36 -36 -38 -19 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -42 -42 -42 -42 -42 -42 -42 -39 -39 -39 -39 -39 -39 -39 -42 -42 -42 -42 -42 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -30 -30 -30 -32 -32 -32 -24 -24 -24 -27 -27 -27 -18 -18 -18 -21 -21 -21 -13 -13 -13 -15 -15 -15 -39 -39 -39 -39 -39 -39 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -38 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -42 -38 -38 -42 -42 -42 -42 -42 -42 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -38 -42 -42 -42 -42 -42 -42 -42 -36 -37)) (append (list 445 452 -41 445 452 -41 445 451 -41 445 454 -41 445 455 -41 443 458 -42 443 472 -42 443 474 -42 445 462 -42 445 454 -42 445 452 -42 445 464 -42 445 459 -42 445 457 -42 445 468 -41 445 469 -41 445 470 -41 445 467 -41 445 467 -41 445 466 -41 445 467 -42 445 469 -42 258 361 -30 258 361 -32 258 361 -24 258 361 -27 258 361 -18 258 361 -21 258 361 -13 258 361 -15 284 361 -30 284 361 -32 284 361 -24 284 361 -27 284 361 -18 284 361 -21 284 361 -13 284 361 -15 258 376 -30 258 374 -30 258 371 -30 258 374 -32 258 376 -32 258 371 -32 258 376 -24 258 374 -24 258 371 -24 258 374 -27 258 376 -27 258 371 -27 258 376 -18 258 374 -18 258 371 -18 258 374 -21 258 376 -21 258 371 -21 258 376 -13 258 374 -13 258 371 -13 258 374 -15 258 376 -15 258 371 -15 284 376 -30 284 374 -30 284 371 -30 284 374 -32 284 376 -32 284 371 -32 284 376 -24 284 374 -24 284 371 -24 284 374 -27 284 376 -27 284 371 -27 284 376 -18 284 374 -18 284 371 -18 284 374 -21 284 376 -21 284 371 -21 284 376 -13 284 374 -13 284 371 -13 284 374 -15 284 376 -15 284 371 -15 258 384 -30 258 381 -30 258 379 -30 258 381 -32 258 384 -32 258 379 -32 258 384 -24 258 381 -24 258 379 -24 258 381 -27 258 384 -27 258 379 -27 258 384 -18 258 381 -18 258 379 -18 258 381 -21 258 384 -21 258 379 -21 258 384 -13 258 381 -13 258 379 -13 258 381 -15 258 384 -15 258 379 -15 284 384 -30 284 381 -30 284 379 -30 284 381 -32 284 384 -32 284 379 -32 284 384 -24 284 381 -24 284 379 -24 284 381 -27 284 384 -27 284 379 -27 284 384 -18 284 381 -18 284 379 -18 284 381 -21 284 384 -21 284 379 -21 284 384 -13 284 381 -13 284 379 -13 284 381 -15 284 384 -15 284 379 -15 258 391 -30 258 389 -30 258 386 -30 258 389 -32 258 391 -32 258 386 -32 258 391 -24 258 389 -24 258 386 -24 258 389 -27 258 391 -27 258 386 -27 258 391 -18 258 389 -18 258 386 -18 258 389 -21 258 391 -21 258 386 -21 258 391 -13 258 389 -13 258 386 -13 258 389 -15 258 391 -15 258 386 -15 284 391 -30 284 389 -30 284 386 -30 284 389 -32 284 391 -32 284 386 -32 284 391 -24 284 389 -24 284 386 -24 284 389 -27 284 391 -27 284 386 -27 284 391 -18 284 389 -18 284 386 -18 284 389 -21 284 391 -21 284 386 -21 284 391 -13 284 389 -13 284 386 -13 284 389 -15 284 391 -15 284 386 -15 258 399 -30 258 396 -30 258 394 -30 258 396 -32 258 399 -32 258 394 -32 258 399 -24 258 396 -24 258 394 -24 258 396 -27 258 399 -27 258 394 -27 258 399 -18 258 396 -18 258 394 -18 258 396 -21 258 399 -21 258 394 -21 258 399 -13 258 396 -13 258 394 -13 258 396 -15 258 399 -15 258 394 -15 284 399 -30 284 396 -30 284 394 -30 284 396 -32 284 399 -32 284 394 -32 284 399 -24 284 396 -24 284 394 -24 284 396 -27 284 399 -27 284 394 -27 284 399 -18 284 396 -18 284 394 -18 284 396 -21 284 399 -21 284 394 -21 284 399 -13 284 396 -13 284 394 -13 284 396 -15 284 399 -15 284 394 -15 258 424 -30 258 426 -30 258 429 -30 258 426 -32 258 424 -32 258 429 -32 258 424 -24 258 426 -24 258 429 -24 258 426 -27 258 424 -27 258 429 -27 258 424 -18 258 426 -18 258 429 -18 258 426 -21 258 424 -21 258 429 -21 258 424 -13 258 426 -13 258 429 -13 258 426 -15 258 424 -15 258 429 -15 284 424 -30 284 426 -30 284 429 -30 284 426 -32 284 424 -32 284 429 -32 284 424 -24 284 426 -24 284 429 -24 284 426 -27 284 424 -27 284 429 -27 284 424 -18 284 426 -18 284 429 -18 284 426 -21 284 424 -21 284 429 -21 284 424 -13 284 426 -13 284 429 -13 284 426 -15 284 424 -15 284 429 -15 258 416 -30 258 419 -30 258 421 -30 258 419 -32 258 416 -32 258 421 -32 258 416 -24 258 419 -24 258 421 -24 258 419 -27 258 416 -27 258 421 -27 258 416 -18 258 419 -18 258 421 -18 258 419 -21 258 416 -21 258 421 -21 258 416 -13 258 419 -13 258 421 -13 258 419 -15 258 416 -15 258 421 -15 284 416 -30 284 419 -30 284 421 -30 284 419 -32 284 416 -32 284 421 -32 284 416 -24 284 419 -24 284 421 -24 284 419 -27 284 416 -27 284 421 -27 284 416 -18 284 419 -18 284 421 -18 284 419 -21 284 416 -21 284 421 -21 284 416 -13 284 419 -13 284 421 -13 284 419 -15 284 416 -15 284 421 -15 258 409 -30 258 411 -30 258 414 -30 258 411 -32 258 409 -32 258 414 -32 258 409 -24 258 411 -24 258 414 -24 258 411 -27 258 409 -27 258 414 -27 258 409 -18 258 411 -18 258 414 -18 258 411 -21 258 409 -21 258 414 -21 258 409 -13 258 411 -13 258 414 -13 258 411 -15 258 409 -15 258 414 -15 284 409 -30 284 411 -30 284 414 -30 284 411 -32 284 409 -32 284 414 -32 284 409 -24 284 411 -24 284 414 -24 284 411 -27 284 409 -27 284 414 -27 284 409 -18 284 411 -18 284 414 -18 284 411 -21 284 409 -21 284 414 -21 284 409 -13 284 411 -13 284 414 -13 284 411 -15 284 409 -15 284 414 -15 258 401 -30 258 404 -30 258 406 -30 258 404 -32 258 401 -32 258 406 -32 258 401 -24 258 404 -24 258 406 -24 258 404 -27 258 401 -27 258 406 -27 258 401 -18 258 404 -18 258 406 -18 258 404 -21 258 401 -21 258 406 -21 258 401 -13 258 404 -13 258 406 -13 258 404 -15 258 401 -15 258 406 -15 284 401 -30 284 404 -30 284 406 -30 284 404 -32 284 401 -32 284 406 -32 284 401 -24 284 404 -24 284 406 -24 284 404 -27 284 401 -27 284 406 -27 284 401 -18 284 404 -18 284 406 -18 284 404 -21 284 401 -21 284 406 -21 284 401 -13 284 404 -13 284 406 -13 284 404 -15 284 401 -15 284 406 -15 258 436 -30 258 434 -30 258 431 -30 258 434 -32 258 436 -32 258 431 -32 258 436 -24 258 434 -24 258 431 -24 258 434 -27 258 436 -27 258 431 -27 258 436 -18 258 434 -18 258 431 -18 258 434 -21 258 436 -21 258 431 -21 258 436 -13 258 434 -13 258 431 -13 258 434 -15 258 436 -15 258 431 -15 284 436 -30 284 434 -30 284 431 -30 284 434 -32 284 436 -32 284 431 -32 284 436 -24 284 434 -24 284 431 -24 284 434 -27 284 436 -27 284 431 -27 284 436 -18 284 434 -18 284 431 -18 284 434 -21 284 436 -21 284 431 -21 284 436 -13 284 434 -13 284 431 -13 284 434 -15 284 436 -15 284 431 -15 258 452 -30 258 449 -30 258 447 -30 258 449 -32 258 452 -32 258 447 -32 258 452 -24 258 449 -24 258 447 -24 258 449 -27 258 452 -27 258 447 -27 258 452 -18 258 449 -18 258 447 -18 258 449 -21 258 452 -21 258 447 -21 258 452 -13 258 449 -13 258 447 -13 258 449 -15 258 452 -15 258 447 -15 284 452 -30 284 449 -30 284 447 -30 284 449 -32 284 452 -32 284 447 -32 284 452 -24 284 449 -24 284 447 -24 284 449 -27 284 452 -27 284 447 -27 284 452 -18 284 449 -18 284 447 -18 284 449 -21 284 452 -21 284 447 -21 284 452 -13 284 449 -13 284 447 -13 284 449 -15 284 452 -15 284 447 -15 258 459 -30 258 457 -30 258 454 -30 258 457 -32 258 459 -32 258 454 -32 258 459 -24 258 457 -24 258 454 -24 258 457 -27 258 459 -27 258 454 -27 258 459 -18 258 457 -18 258 454 -18 258 457 -21 258 459 -21 258 454 -21 258 459 -13 258 457 -13 258 454 -13 258 457 -15 258 459 -15 258 454 -15 284 459 -30 284 457 -30 284 454 -30 284 457 -32 284 459 -32 284 454 -32 284 459 -24 284 457 -24 284 454 -24 284 457 -27 284 459 -27 284 454 -27 284 459 -18 284 457 -18 284 454 -18 284 457 -21 284 459 -21 284 454 -21 284 459 -13 284 457 -13 284 454 -13 284 457 -15 284 459 -15 284 454 -15 258 467 -30 258 464 -30 258 462 -30 258 464 -32 258 467 -32 258 467 -24 258 464 -24 258 462 -24 258 464 -27 258 467 -27 258 462 -27 258 467 -18 258 464 -18 258 462 -18 258 464 -21 258 467 -21 258 462 -21 258 467 -13 258 464 -13 258 462 -13 258 464 -15 258 467 -15 258 462 -15 284 467 -30 284 464 -30 284 462 -30 284 464 -32 284 467 -32 284 462 -32 284 467 -24 284 464 -24 284 462 -24 284 464 -27 284 467 -27 284 462 -27 284 467 -18 284 464 -18 284 462 -18 284 464 -21 284 467 -21 284 462 -21 284 467 -13 284 464 -13 284 462 -13 284 464 -15 284 467 -15 284 462 -15 258 439 -30 258 442 -30 258 444 -30 258 442 -32 258 439 -32 258 444 -32 258 439 -24 258 442 -24 258 444 -24 258 442 -27 258 439 -27 258 444 -27 258 439 -18 258 442 -18 258 444 -18 258 442 -21 258 439 -21 258 444 -21 258 439 -13 258 442 -13 258 444 -13 258 442 -15 258 439 -15 258 444 -15 284 439 -30 284 442 -30 284 444 -30 284 442 -32 284 439 -32 284 444 -32 284 439 -24 284 442 -24 284 444 -24 284 442 -27 284 439 -27 284 444 -27 284 439 -18 284 442 -18 284 444 -18 284 442 -21 284 439 -21 284 444 -21 284 439 -13 284 442 -13 284 444 -13 284 442 -15 284 439 -15 284 444 -15 258 477 -30 258 479 -30 258 482 -30 258 479 -32 258 477 -32 258 482 -32 258 477 -24 258 479 -24 258 482 -24 258 479 -27 258 477 -27 258 482 -27 258 477 -18 258 479 -18 258 482 -18 258 479 -21 258 477 -21 258 482 -21 258 477 -13 258 479 -13 258 482 -13 258) (list 479 -15 258 477 -15 258 482 -15 284 477 -30 284 479 -30 284 482 -30 284 479 -32 284 477 -32 284 482 -32 284 477 -24 284 479 -24 284 482 -24 284 479 -27 284 477 -27 284 482 -27 284 477 -18 284 479 -18 284 482 -18 284 479 -21 284 477 -21 284 482 -21 284 477 -13 284 479 -13 284 482 -13 284 479 -15 284 477 -15 284 482 -15 258 469 -30 258 472 -30 258 474 -30 258 472 -32 258 469 -32 258 474 -32 258 469 -24 258 472 -24 258 474 -24 258 472 -27 258 469 -27 258 474 -27 258 469 -18 258 472 -18 258 474 -18 258 472 -21 258 469 -21 258 474 -21 258 469 -13 258 472 -13 258 474 -13 258 472 -15 258 469 -15 258 474 -15 284 469 -30 284 472 -30 284 474 -30 284 472 -32 284 469 -32 284 474 -32 284 469 -24 284 472 -24 284 474 -24 284 472 -27 284 469 -27 284 474 -27 284 469 -18 284 472 -18 284 474 -18 284 472 -21 284 469 -21 284 474 -21 284 469 -13 284 472 -13 284 474 -13 284 472 -15 284 469 -15 284 474 -15 258 514 -30 258 517 -30 258 519 -30 258 517 -32 258 514 -32 258 519 -32 258 514 -24 258 517 -24 258 519 -24 258 517 -27 258 514 -27 258 519 -27 258 514 -18 258 517 -18 258 519 -18 258 517 -21 258 514 -21 258 519 -21 258 514 -13 258 517 -13 258 519 -13 258 517 -15 258 514 -15 258 519 -15 284 514 -30 284 517 -30 284 519 -30 284 517 -32 284 514 -32 284 519 -32 284 514 -24 284 517 -24 284 519 -24 284 517 -27 284 514 -27 284 519 -27 284 514 -18 284 517 -18 284 519 -18 284 517 -21 284 514 -21 284 519 -21 284 514 -13 284 517 -13 284 519 -13 284 517 -15 284 514 -15 284 519 -15 258 507 -30 258 509 -30 258 512 -30 258 509 -32 258 507 -32 258 512 -32 258 507 -24 258 509 -24 258 512 -24 258 509 -27 258 507 -27 258 512 -27 258 507 -18 258 509 -18 258 512 -18 258 509 -21 258 507 -21 258 512 -21 258 507 -13 258 509 -13 258 512 -13 258 509 -15 258 507 -15 258 512 -15 284 507 -30 284 509 -30 284 512 -30 284 509 -32 284 507 -32 284 512 -32 284 507 -24 284 509 -24 284 512 -24 284 509 -27 284 507 -27 284 512 -27 284 507 -18 284 509 -18 284 512 -18 284 509 -21 284 507 -21 284 512 -21 284 507 -13 284 509 -13 284 512 -13 284 509 -15 284 507 -15 284 512 -15 258 499 -30 258 502 -30 258 504 -30 258 502 -32 258 499 -32 258 504 -32 258 499 -24 258 502 -24 258 504 -24 258 502 -27 258 499 -27 258 504 -27 258 499 -18 258 502 -18 258 504 -18 258 502 -21 258 499 -21 258 504 -21 258 499 -13 258 502 -13 258 504 -13 258 502 -15 258 499 -15 258 504 -15 284 499 -30 284 502 -30 284 504 -30 284 502 -32 284 499 -32 284 504 -32 284 499 -24 284 502 -24 284 504 -24 284 502 -27 284 499 -27 284 504 -27 284 499 -18 284 502 -18 284 504 -18 284 502 -21 284 499 -21 284 504 -21 284 499 -13 284 502 -13 284 504 -13 284 502 -15 284 499 -15 284 504 -15 258 489 -30 258 487 -30 258 484 -30 258 487 -32 258 489 -32 258 484 -32 258 489 -24 258 487 -24 258 484 -24 258 487 -27 258 489 -27 258 484 -27 258 489 -18 258 487 -18 258 484 -18 258 487 -21 258 489 -21 258 484 -21 258 489 -13 258 487 -13 258 484 -13 258 487 -15 258 489 -15 258 484 -15 284 489 -30 284 487 -30 284 484 -30 284 487 -32 284 489 -32 284 484 -32 284 489 -24 284 487 -24 284 484 -24 284 487 -27 284 489 -27 284 484 -27 284 489 -18 284 487 -18 284 484 -18 284 487 -21 284 489 -21 284 484 -21 284 489 -13 284 487 -13 284 484 -13 284 487 -15 284 489 -15 284 484 -15 258 497 -30 258 494 -30 258 492 -30 258 494 -32 258 497 -32 258 492 -32 258 497 -24 258 494 -24 258 492 -24 258 494 -27 258 497 -27 258 492 -27 258 497 -18 258 494 -18 258 492 -18 258 494 -21 258 497 -21 258 492 -21 258 497 -13 258 494 -13 258 492 -13 258 494 -15 258 497 -15 258 492 -15 284 497 -30 284 494 -30 284 492 -30 284 494 -32 284 497 -32 284 492 -32 284 497 -24 284 494 -24 284 492 -24 284 494 -27 284 497 -27 284 492 -27 284 497 -18 284 494 -18 284 492 -18 284 494 -21 284 497 -21 284 492 -21 284 497 -13 284 494 -13 284 492 -13 284 494 -15 284 497 -15 284 492 -15 258 527 -30 258 525 -30 258 522 -30 258 525 -32 258 527 -32 258 522 -32 258 527 -24 258 525 -24 258 522 -24 258 525 -27 258 527 -27 258 522 -27 258 527 -18 258 525 -18 258 522 -18 258 525 -21 258 527 -21 258 522 -21 258 527 -13 258 525 -13 258 522 -13 258 525 -15 258 527 -15 258 522 -15 284 527 -30 284 525 -30 284 522 -30 284 525 -32 284 527 -32 284 522 -32 284 527 -24 284 525 -24 284 522 -24 284 525 -27 284 527 -27 284 522 -27 284 527 -18 284 525 -18 284 522 -18 284 525 -21 284 527 -21 284 522 -21 284 527 -13 284 525 -13 284 522 -13 284 525 -15 284 527 -15 284 522 -15 258 535 -30 258 532 -30 258 529 -30 258 532 -32 258 535 -32 258 529 -32 258 535 -24 258 532 -24 258 529 -24 258 532 -27 258 535 -27 258 529 -27 258 535 -18 258 532 -18 258 529 -18 258 532 -21 258 535 -21 258 529 -21 258 535 -13 258 532 -13 258 529 -13 258 532 -15 258 535 -15 258 529 -15 284 535 -30 284 532 -30 284 529 -30 284 532 -32 284 535 -32 284 529 -32 284 535 -24 284 532 -24 284 529 -24 284 532 -27 284 535 -27 284 529 -27 284 535 -18 284 532 -18 284 529 -18 284 532 -21 284 535 -21 284 529 -21 284 535 -13 284 532 -13 284 529 -13 284 532 -15 284 535 -15 284 529 -15 258 542 -30 258 540 -30 258 537 -30 258 540 -32 258 542 -32 258 537 -32 258 542 -24 258 540 -24 258 537 -24 258 540 -27 258 542 -27 258 537 -27 258 542 -18 258 540 -18 258 537 -18 258 540 -21 258 542 -21 258 537 -21 258 542 -13 258 540 -13 258 537 -13 258 540 -15 258 542 -15 258 537 -15 284 542 -30 284 540 -30 284 537 -30 284 540 -32 284 542 -32 284 537 -32 284 542 -24 284 540 -24 284 537 -24 284 540 -27 284 542 -27 284 537 -27 284 542 -18 284 540 -18 284 537 -18 284 540 -21 284 542 -21 284 537 -21 284 542 -13 284 540 -13 284 537 -13 284 540 -15 284 542 -15 284 537 -15 258 552 -30 258 555 -30 258 557 -30 258 555 -32 258 552 -32 258 557 -32 258 552 -24 258 555 -24 258 557 -24 258 555 -27 258 552 -27 258 557 -27 258 552 -18 258 555 -18 258 557 -18 258 555 -21 258 552 -21 258 557 -21 258 552 -13 258 555 -13 258 557 -13 258 555 -15 258 552 -15 258 557 -15 284 552 -30 284 555 -30 284 557 -30 284 555 -32 284 552 -32 284 557 -32 284 552 -24 284 555 -24 284 557 -24 284 555 -27 284 552 -27 284 557 -27 284 552 -18 284 555 -18 284 557 -18 284 555 -21 284 552 -21 284 557 -21 284 552 -13 284 555 -13 284 557 -13 284 555 -15 284 552 -15 284 557 -15 258 544 -30 258 547 -30 258 550 -30 258 547 -32 258 544 -32 258 550 -32 258 544 -24 258 547 -24 258 550 -24 258 547 -27 258 544 -27 258 550 -27 258 544 -18 258 547 -18 258 550 -18 258 547 -21 258 544 -21 258 550 -21 258 544 -13 258 547 -13 258 550 -13 258 547 -15 258 544 -15 258 550 -15 284 544 -30 284 547 -30 284 550 -30 284 547 -32 284 544 -32 284 550 -32 284 544 -24 284 547 -24 284 550 -24 284 547 -27 284 544 -27 284 550 -27 284 544 -18 284 547 -18 284 550 -18 284 547 -21 284 544 -21 284 550 -21 284 544 -13 284 547 -13 284 550 -13 284 547 -15 284 544 -15 284 550 -15 258 559 -30 258 559 -32 258 559 -24 258 559 -27 258 559 -18 258 559 -21 258 559 -13 258 559 -15 284 559 -30 284 559 -32 284 559 -24 284 559 -27 284 559 -18 284 559 -21 284 559 -13 284 559 -15 445 453 -41 667 477 -31 667 479 -31 667 482 -31 667 479 -34 667 477 -34 667 482 -34 667 489 -31 667 487 -31 667 484 -31 667 487 -34 667 489 -34 667 484 -34 667 492 -31 667 494 -31 667 497 -31 667 494 -34 667 492 -34 667 497 -34 667 504 -31 667 502 -31 667 499 -31 667 502 -34 667 504 -34 667 499 -34 667 507 -31 667 509 -31 667 512 -31 667 509 -34 667 507 -34 667 512 -34 667 527 -31 667 524 -31 667 522 -31 667 524 -34 667 527 -34 667 522 -34 667 514 -31 667 517 -31 667 519 -31 667 517 -34 667 514 -34 667 519 -34 667 550 -31 667 547 -31 667 544 -31 667 547 -34 667 550 -34 667 544 -34 667 537 -31 667 540 -31 667 542 -31 667 540 -34 667 537 -34 667 542 -34 667 535 -31 667 532 -31 667 529 -31 667 532 -34 667 535 -34 667 529 -34 667 552 -31 667 555 -31 667 557 -31 667 555 -34 667 552 -34 667 557 -34 667 559 -31 667 559 -34 667 474 -31 667 472 -31 667 469 -31 667 472 -34 667 474 -34 667 469 -34 667 462 -31 667 464 -31 667 467 -31 667 464 -34 667 462 -34 667 467 -34 667 459 -31 667 457 -31 667 454 -31 667 457 -34 667 459 -34 667 454 -34 667 447 -31 667 449 -31 667 452 -31 667 449 -34 667 447 -34 667 452 -34 667 431 -31 667 434 -31 667 437 -31 667 434 -34 667 431 -34 667 437 -34 667 444 -31 667 442 -31 667 439 -31 667 442 -34 667 444 -34 667 439 -34 667 394 -31 667 396 -31 667 399 -31 667 396 -34 667 394 -34 667 399 -34 667 406) (list -31 667 404 -31 667 401 -31 667 404 -34 667 406 -34 667 401 -34 667 414 -31 667 411 -31 667 409 -31 667 411 -34 667 414 -34 667 409 -34 667 416 -31 667 419 -31 667 421 -31 667 419 -34 667 416 -34 667 421 -34 667 429 -31 667 426 -31 667 424 -31 667 426 -34 667 429 -34 667 424 -34 667 386 -31 667 389 -31 667 391 -31 667 389 -34 667 386 -34 667 391 -34 667 384 -31 667 384 -34 667 492 -37 667 494 -37 667 497 -37 667 504 -37 667 502 -37 667 499 -37 667 507 -37 667 509 -37 667 512 -37 667 527 -37 667 524 -37 667 522 -37 667 514 -37 667 517 -37 667 519 -37 667 550 -37 667 547 -37 667 544 -37 667 537 -37 667 540 -37 667 542 -37 667 535 -37 667 532 -37 667 529 -37 667 552 -37 667 555 -37 667 557 -37 667 559 -37 667 474 -37 667 472 -37 667 469 -37 667 462 -37 667 464 -37 667 467 -37 667 459 -37 667 457 -37 667 454 -37 667 447 -37 667 449 -37 667 452 -37 667 431 -37 667 434 -37 667 437 -37 667 444 -37 667 442 -37 667 439 -37 667 394 -37 667 396 -37 667 399 -37 667 406 -37 667 404 -37 667 401 -37 667 414 -37 667 411 -37 667 409 -37 667 416 -37 667 419 -37 667 421 -37 667 429 -37 667 426 -37 667 424 -37 667 386 -37 667 389 -37 667 391 -37 667 384 -37 643 477 -31 643 479 -31 643 482 -31 643 479 -34 643 477 -34 643 482 -34 643 489 -31 643 487 -31 643 484 -31 643 487 -34 643 489 -34 643 484 -34 643 492 -31 643 494 -31 643 497 -31 643 494 -34 643 492 -34 643 497 -34 643 504 -31 643 502 -31 643 499 -31 643 502 -34 643 504 -34 643 499 -34 643 507 -31 643 509 -31 643 512 -31 643 509 -34 643 507 -34 643 512 -34 643 527 -31 643 524 -31 643 522 -31 643 524 -34 643 527 -34 643 522 -34 643 514 -31 643 517 -31 643 519 -31 643 517 -34 643 514 -34 643 519 -34 643 550 -31 643 547 -31 643 544 -31 643 547 -34 643 550 -34 643 544 -34 643 537 -31 643 540 -31 643 542 -31 643 540 -34 643 537 -34 643 542 -34 643 535 -31 643 532 -31 643 529 -31 643 532 -34 643 535 -34 643 529 -34 643 552 -31 643 555 -31 643 557 -31 643 555 -34 643 552 -34 643 557 -34 643 559 -31 643 559 -34 643 474 -31 643 472 -31 643 469 -31 643 472 -34 643 474 -34 643 469 -34 643 462 -31 643 464 -31 643 467 -31 643 464 -34 643 462 -34 643 467 -34 643 459 -31 643 457 -31 643 454 -31 643 457 -34 643 459 -34 643 454 -34 643 447 -31 643 449 -31 643 452 -31 643 449 -34 643 447 -34 643 452 -34 643 431 -31 643 434 -31 643 437 -31 643 434 -34 643 431 -34 643 437 -34 643 444 -31 643 442 -31 643 439 -31 643 442 -34 643 444 -34 643 439 -34 643 394 -31 643 396 -31 643 399 -31 643 396 -34 643 394 -34 643 399 -34 643 406 -31 643 404 -31 643 401 -31 643 404 -34 643 406 -34 643 401 -34 643 414 -31 643 411 -31 643 409 -31 643 411 -34 643 414 -34 643 409 -34 643 416 -31 643 419 -31 643 421 -31 643 419 -34 643 416 -34 643 421 -34 643 429 -31 643 426 -31 643 424 -31 643 426 -34 643 429 -34 643 424 -34 643 386 -31 643 389 -31 643 391 -31 643 389 -34 643 386 -34 643 391 -34 643 384 -31 643 384 -34 643 492 -37 643 494 -37 643 497 -37 643 504 -37 643 502 -37 643 499 -37 643 507 -37 643 509 -37 643 512 -37 643 527 -37 643 524 -37 643 522 -37 643 514 -37 643 517 -37 643 519 -37 643 550 -37 643 547 -37 643 544 -37 643 537 -37 643 540 -37 643 542 -37 643 535 -37 643 532 -37 643 529 -37 643 552 -37 643 555 -37 643 557 -37 643 559 -37 643 474 -37 643 472 -37 643 469 -37 643 462 -37 643 464 -37 643 467 -37 643 459 -37 643 457 -37 643 454 -37 643 447 -37 643 449 -37 643 452 -37 643 431 -37 643 434 -37 643 437 -37 643 444 -37 643 442 -37 643 439 -37 643 394 -37 643 396 -37 643 399 -37 643 406 -37 643 404 -37 643 401 -37 643 414 -37 643 411 -37 643 409 -37 643 416 -37 643 419 -37 643 421 -37 643 429 -37 643 426 -37 643 424 -37 643 386 -37 643 389 -37 643 391 -37 643 384 -37 667 484 -37 667 487 -37 667 489 -37 643 484 -37 643 487 -37 643 489 -37 662 381 -35 662 379 -35 662 374 -35 662 369 -35 649 369 -35 649 371 -35 649 376 -35 649 374 -35 649 364 -35 649 366 -35 649 381 -35 649 379 -35 661 383 -30 659 383 -30 441 470 -42 441 467 -42 441 469 -42 351 436 -36 351 436 -37 351 444 -36 351 439 -36 351 442 -36 351 444 -37 351 439 -37 351 442 -37 351 447 -36 351 452 -36 351 449 -36 351 447 -37 351 452 -37 351 449 -37 351 459 -36 351 454 -36 351 457 -36 351 459 -37 351 454 -37 351 457 -37 351 462 -36 351 467 -36 351 464 -36 351 462 -37 351 467 -37 351 464 -37 351 474 -36 351 469 -36 351 472 -36 351 474 -37 351 469 -37 351 472 -37 330 444 -36 330 439 -36 330 442 -36 330 444 -37 330 439 -37 330 442 -37 330 447 -36 330 452 -36 330 449 -36 330 447 -37 330 452 -37 330 449 -37 330 459 -36 330 454 -36 330 457 -36 330 459 -37 330 454 -37 330 457 -37 330 462 -36 330 467 -36 330 464 -36 330 462 -37 330 467 -37 330 464 -37 330 474 -36 330 469 -36 330 472 -36 330 474 -37 330 469 -37 330 472 -37 448 465 -42 448 463 -42 448 461 -42 448 462 -42 448 466 -42 448 456 -42 448 457 -42 448 460 -42 448 458 -42 448 455 -42 448 453 -42 448 471 -42 448 472 -42 448 475 -42 448 473 -42 448 470 -42 448 468 -42 448 451 -42 448 452 -42 448 446 -42 448 448 -42 448 431 -41 448 432 -41 448 435 -41 448 433 -41 448 436 -41 448 437 -41 448 445 -41 448 443 -41 448 441 -41 448 442 -41 448 440 -41 448 438 -41 448 430 -42 448 428 -42 448 426 -42 448 427 -42 448 425 -42 448 423 -42 448 416 -42 448 417 -42 448 420 -42 448 418 -42 448 421 -42 448 422 -42 448 415 -42 448 413 -42 448 411 -42 448 412 -42 448 410 -42 448 408 -42 448 401 -41 448 402 -41 448 405 -41 448 403 -41 448 406 -41 448 407 -41 448 399 -41 448 398 -41 448 396 -41 448 397 -41 448 394 -41 448 393 -41 448 387 -41 448 389 -41 448 388 -41 448 391 -41 448 392 -41 448 386 -41 448 383 -41 448 384 -41 448 379 -41 448 382 -41 448 381 -41 448 374 -41 448 378 -41 448 376 -41 448 377 -41 448 373 -41 448 372 -41 427 465 -41 427 463 -41 427 461 -42 427 462 -42 427 466 -41 427 467 -41 427 456 -42 427 457 -42 427 460 -42 427 458 -42 427 455 -42 427 453 -42 427 471 -41 427 472 -41 427 475 -41 427 473 -41 427 470 -41 427 468 -41 427 451 -42 427 452 -42 427 446 -42 427 447 -42 427 450 -42 427 448 -42 427 431 -41 427 432 -41 427 435 -41 427 433 -41 427 436 -41 427 437 -41 427 445 -42 427 443 -42 427 441 -42 427 442 -42 427 440 -42 427 438 -42 427 430 -42 427 428 -42 427 426 -42 427 427 -42 427 425 -42 427 423 -42 427 416 -42 427 417 -42 427 420 -42 427 418 -42 427 421 -42 427 422 -42 427 415 -42 427 413 -42 427 411 -42 427 412 -42 427 410 -42 427 408 -42 427 401 -41 427 402 -41 427 405 -41 427 403 -41 427 406 -41 427 407 -41 427 399 -41 427 398 -41 427 396 -41 427 397 -41 427 394 -41 427 393 -41 427 387 -41 427 389 -41 427 388 -41 427 391 -41 427 392 -41 427 386 -41 427 383 -41 427 384 -41 427 379 -41 427 382 -41 427 381 -41 427 374 -41 427 378 -41 427 376 -41 427 377 -41 448 450 -42 448 447 -42 448 467 -42 396 460 -42 396 461 -42 396 462 -42 396 466 -42 396 465 -42 396 463 -42 396 467 -42 396 468 -42 396 470 -42 396 473 -42 396 472 -42 396 471 -42 396 458 -42 396 457 -42 396 456 -42 396 452 -42 396 453 -42 396 455 -42 396 451 -42 396 450 -42 396 436 -42 396 435 -42 396 431 -42 396 432 -42 396 433 -42 396 430 -42 396 428 -42 396 427 -42 396 423 -42 396 425 -42 396 426 -42 396 437 -42 396 438 -42 396 440 -42 396 443 -42 396 442 -42 396 441 -42 396 445 -42 396 446 -42 396 447 -42 396 416 -42 396 417 -42 396 418 -42 396 422 -42 396 421 -42 396 420 -42 396 401 -42 396 402 -42 396 403 -42 396 407 -42 396 406 -42 396 405 -42 396 415 -42 396 413 -42 396 412 -42 396 408 -42 396 410 -42 396 411 -42 396 399 -42 396 398 -42 396 397 -42 396 393 -42 396 394 -42 396 396 -42 396 386 -42 396 387 -42 396 388 -42 396 392 -42 396 391 -42 396 389 -42 396 384 -42 396 383 -42 396 382 -42 396 378 -42 396 379 -42 396 381 -42 396 377 -42 396 376 -42 396 374 -42 351 461 -42 330 461 -42 259 461 -42 259 462 -42 259 463 -42 259 465 -42 259 466 -42 259 467 -42 259 468 -42 259 470 -42 259 471 -42 259 472 -42 259 473 -42 259 475 -42 283 476 -42 259 476 -42 259 477 -42 259 480 -42 259 478 -42 283 460 -42 283 458 -42 283 457 -42 283 456 -42 283 455 -42 283 453 -42 259 446 -42 259 447 -42 259 448 -42 259 450 -42 259 451 -42 259 432 -42 259 433 -42 259 435 -42 259 436 -42 259 397 -42 259 396 -42 307 437 -42 308 437 -42 309 437 -42 311 437 -42 304 437 -42 303 437 -42 302 437 -42 301 437 -42 299 437 -42 291 437 -42 289 437 -42 287 437 -42 286 437 -42 293 437 -42 294 437 -42) (list 296 437 -42 297 437 -42 298 437 -42 258 450 -42 286 423 -42 288 423 -42 287 423 -42 292 423 -42 289 423 -42 291 423 -42 296 423 -42 298 423 -42 259 480 -38 259 481 -38 259 478 -38 259 477 -38 259 476 -38 259 475 -38 259 473 -38 259 472 -38 259 471 -38 259 470 -38 259 468 -38 259 467 -38 259 466 -38 259 465 -38 259 463 -38 259 462 -38 259 461 -38 259 453 -38 259 456 -38 259 457 -38 259 458 -38 259 460 -38 259 438 -38 259 440 -38 259 441 -38 259 442 -38 259 443 -38 259 445 -38 259 452 -38 259 451 -38 259 450 -38 259 448 -38 259 447 -38 259 446 -38 259 437 -38 259 436 -38 259 435 -38 259 433 -38 259 432 -38 267 362 -38 265 362 -38 283 385 -38 283 383 -38 283 382 -38 283 381 -38 283 380 -38 283 378 -38 261 482 -38 262 482 -38 261 482 -39 262 482 -39 263 482 -38 263 482 -39 265 482 -38 265 482 -39 266 482 -38 266 482 -39 267 482 -38 267 482 -39 268 482 -38 268 482 -39 270 482 -38 270 482 -39 271 482 -38 271 482 -39 272 482 -38 272 482 -39 273 482 -38 273 482 -39 275 482 -38 275 482 -39 276 482 -38 276 482 -39 277 482 -38 278 482 -38 280 482 -38 281 482 -38 282 482 -38 259 482 -38 259 455 -38 258 369 -30 258 366 -30 258 364 -30 258 366 -32 258 369 -32 258 364 -32 258 369 -24 258 366 -24 258 364 -24 258 366 -27 258 369 -27 258 364 -27 258 369 -18 258 366 -18 258 364 -18 258 366 -21 258 369 -21 258 364 -21 258 369 -13 258 366 -13 258 364 -13 258 366 -15 258 369 -15 258 364 -15 283 461 -38 283 462 -38 283 463 -38 283 465 -38 283 466 -38 283 467 -38 283 468 -38 283 470 -38 283 471 -38 283 472 -38 283 473 -38 283 475 -38 283 476 -38 283 460 -38 283 458 -38 283 457 -38 283 456 -38 283 455 -38 283 453 -38 283 445 -38 283 443 -38 283 442 -38 283 441 -38 283 440 -38 283 438 -38 283 446 -38 283 447 -38 283 448 -38 283 450 -38 283 451 -38 283 452 -38 283 477 -38 283 478 -38 283 480 -38 283 481 -38 283 431 -38 283 432 -38 283 433 -38 283 435 -38 283 436 -38 283 437 -38 283 430 -38 283 428 -38 283 427 -38 283 416 -38 283 417 -38 283 418 -38 283 420 -38 283 421 -38 283 415 -38 283 413 -38 283 412 -38 283 411 -38 283 410 -38 283 408 -38 283 401 -38 283 402 -38 283 403 -38 283 405 -38 283 406 -38 283 407 -38 648 520 -42 648 519 -42 648 518 -42 648 516 -42 648 515 -42 648 521 -42 648 523 -42 648 524 -42 648 525 -42 648 526 -42 648 528 -42 648 534 -42 648 533 -42 648 531 -42 648 530 -42 648 529 -42 648 535 -42 648 538 -42 648 536 -42 652 539 -42 653 539 -42 657 539 -42 658 539 -42 654 539 -42 656 539 -42 651 539 -42 649 539 -42 661 539 -42 659 539 -42 662 539 -42 663 539 -42 664 539 -42 648 539 -42 667 520 -42 667 519 -42 667 518 -42 667 516 -42 667 515 -42 667 521 -42 667 523 -42 667 524 -42 667 525 -42 667 526 -42 667 527 -42 667 534 -42 667 533 -42 667 531 -42 667 530 -42 667 529 -42 667 535 -42 667 538 -42 667 537 -42 259 431 -38 259 430 -38 259 428 -38 259 427 -38 259 426 -38 259 425 -38 259 423 -38 259 422 -38 259 421 -38 259 420 -38 259 418 -38 259 417 -38 259 416 -38 259 415 -38 259 413 -38 259 412 -38 259 411 -38 259 410 -38 259 408 -38 259 407 -38 259 406 -38 259 405 -38 259 403 -38 259 402 -38 259 401 -38 259 393 -38 259 394 -38 259 396 -38 259 397 -38 259 398 -38 259 399 -38 259 394 -42 259 393 -42 259 392 -38 259 391 -38 259 389 -38 259 388 -38 259 387 -38 259 385 -38 259 378 -38 259 379 -38 259 381 -38 259 382 -38 259 383 -38 259 384 -38 259 376 -38 259 374 -38 259 373 -38 259 372 -38 259 364 -38 259 366 -38 259 367 -38 259 368 -38 300 416 -42 300 415 -42 300 413 -42 300 412 -42 300 411 -42 300 410 -42 300 408 -42 284 437 -42 284 423 -42 259 481 -39 259 482 -39 258 462 -32 662 371 -35 662 376 -35 257 452 -42 255 452 -42 254 452 -42 253 452 -42 252 452 -42 251 452 -42 257 447 -42 255 447 -42 254 447 -42 253 447 -42 252 447 -42 251 447 -42 257 451 -42 258 448 -42 257 447 -42 425 469 -36 425 469 -37 425 472 -36 425 472 -37 566 394 -42 566 399 -42 574 394 -42 588 392 -42 648 539 -42 666 539 -42 667 539 -42 277 482 -39 278 482 -39 280 482 -39 281 482 -39 282 482 -39 451 474 -36 451 474 -37 451 472 -36 451 472 -37 451 469 -36 451 469 -37 425 474 -36 425 474 -37 425 462 -36 425 462 -37 425 464 -36 425 464 -37 451 467 -36 451 467 -37 451 464 -36 451 464 -37 451 462 -36 451 462 -37 425 467 -36 425 467 -37 425 454 -36 425 454 -37 425 457 -36 425 457 -37 451 459 -36 451 459 -37 451 457 -36 451 457 -37 451 454 -36 451 454 -37 425 459 -36 425 459 -37 425 447 -36 425 447 -37 425 449 -36 425 449 -37 451 452 -36 451 452 -37 451 449 -36 451 449 -37 451 447 -36 451 447 -37 425 452 -36 425 452 -37 425 429 -36 425 429 -37 425 426 -36 425 426 -37 451 424 -36 451 424 -37 451 426 -36 451 426 -37 451 429 -36 451 429 -37 425 424 -36 425 424 -37 425 421 -36 425 421 -37 425 419 -36 425 419 -37 451 416 -36 451 416 -37 451 419 -36 451 419 -37 451 421 -36 451 421 -37 425 416 -36 425 416 -37 425 414 -36 425 414 -37 425 411 -36 425 411 -37 451 409 -36 451 409 -37 451 411 -36 451 411 -37 451 414 -36 451 414 -37 425 409 -36 425 409 -37 451 391 -36 451 391 -37 451 389 -36 451 389 -37 451 386 -36 451 386 -37 425 379 -36 425 379 -37 425 381 -36 425 381 -37 451 384 -36 451 384 -37 451 381 -36 451 381 -37 451 379 -36 451 379 -37 425 384 -36 425 384 -37 425 371 -36 425 371 -37 425 374 -36 425 374 -37 451 376 -36 451 376 -37 451 374 -36 451 374 -37 451 371 -36 451 371 -37 425 376 -36 425 376 -37 425 366 -36 425 366 -37 451 369 -36 451 369 -37 451 366 -36 451 366 -37 451 364 -36 451 364 -37 425 369 -36 425 369 -37 451 394 -36 451 394 -37 451 396 -36 451 396 -37 451 399 -36 451 399 -37 451 406 -36 451 406 -37 451 404 -36 451 404 -37 451 401 -36 451 401 -37 451 436 -36 451 436 -37 451 434 -36 451 434 -37 451 431 -36 451 431 -37 451 439 -36 451 439 -37 451 442 -36 451 442 -37 451 444 -36 451 444 -37 425 436 -36 425 436 -37 425 434 -36 425 434 -37 425 431 -36 425 431 -37 425 439 -36 425 439 -37 425 442 -36 425 442 -37 425 444 -36 425 444 -37 425 399 -36 425 399 -37 425 396 -36 425 396 -37 425 394 -36 425 394 -37 425 401 -36 425 401 -37 425 404 -36 425 404 -37 425 406 -36 425 406 -37 478 469 -36 478 469 -37 478 472 -36 478 472 -37 503 474 -36 503 474 -37 503 472 -36 503 472 -37 503 469 -36 503 469 -37 478 474 -36 478 474 -37 478 462 -36 478 462 -37 478 464 -36 478 464 -37 503 467 -36 503 467 -37 503 464 -36 503 464 -37 503 462 -36 503 462 -37 478 467 -36 478 467 -37 478 454 -36 478 454 -37 478 457 -36 478 457 -37 503 459 -36 503 459 -37 503 457 -36 503 457 -37 503 454 -36 503 454 -37 478 459 -36 478 459 -37 478 447 -36 478 447 -37 478 449 -36 478 449 -37 503 452 -36 503 452 -37 503 449 -36 503 449 -37 503 447 -36 503 447 -37 478 452 -36 478 452 -37 478 429 -36 478 429 -37 478 426 -36 478 426 -37 503 424 -36 503 424 -37 503 426 -36 503 426 -37 503 429 -36 503 429 -37 478 424 -36 478 424 -37 478 421 -36 478 421 -37 478 419 -36 478 419 -37 503 416 -36 503 416 -37 503 419 -36 503 419 -37 503 421 -36 503 421 -37 478 416 -36 478 416 -37 478 414 -36 478 414 -37 478 411 -36 478 411 -37 503 409 -36 503 409 -37 503 411 -36 503 411 -37 503 414 -36 503 414 -37 478 409 -36 478 409 -37 478 386 -36 478 386 -37 478 389 -36 478 389 -37 503 391 -36 503 391 -37 503 389 -36 503 389 -37 503 386 -36 503 386 -37 478 391 -36 478 391 -37 478 379 -36 478 379 -37 478 381 -36 478 381 -37 503 384 -36 503 384 -37 503 381 -36 503 381 -37 503 379 -36 503 379 -37 478 384 -36 478 384 -37 478 371 -36 478 371 -37 478 374 -36 478 374 -37 503 376 -36 503 376 -37 503 374 -36 503 374 -37 503 371 -36 503 371 -37 478 376 -36 478 376 -37 478 364 -36 478 364 -37 478 366 -36 478 366 -37 503 369 -36 503 369 -37 503 366 -36 503 366 -37 503 364 -36 503 364 -37 478 369 -36 478 369 -37 503 394 -36 503 394 -37 503 396 -36 503 396 -37 503 399 -36 503 399 -37 503 406 -36 503 406 -37 503 404 -36 503 404 -37 503 401 -36 503 401 -37 503 436 -36 503 436 -37 503 434 -36 503 434 -37 503 431 -36 503 431 -37 503 439 -36 503 439 -37 503 442 -36 503 442 -37 503 444 -36 503 444 -37 478 436 -36 478 436 -37 478 434 -36 478 434 -37 478 431 -36 478 431 -37 478 439 -36 478 439 -37 478 442 -36 478 442 -37 478 444 -36 478 444 -37 478 399 -36 478 399 -37 478 396 -36 478 396 -37 478 394 -36 478 394 -37 478 401 -36 478 401 -37 478 404 -36 478 404 -37 478 406 -36 478 406 -37 530 469 -36 530 469 -37 530 472 -36 530 472 -37 556 474 -36 556 474 -37 556 472 -36 556) (list 472 -37 556 469 -36 556 469 -37 530 474 -36 530 474 -37 530 462 -36 530 462 -37 530 464 -36 530 464 -37 556 467 -36 556 467 -37 556 464 -36 556 464 -37 556 462 -36 556 462 -37 530 467 -36 530 467 -37 530 454 -36 530 454 -37 530 457 -36 530 457 -37 556 459 -36 556 459 -37 556 457 -36 556 457 -37 556 454 -36 556 454 -37 530 459 -36 530 459 -37 530 447 -36 530 447 -37 530 449 -36 530 449 -37 556 452 -36 556 452 -37 556 449 -36 556 449 -37 556 447 -36 556 447 -37 530 452 -36 530 452 -37 530 429 -36 530 429 -37 530 426 -36 530 426 -37 556 424 -36 556 424 -37 556 426 -36 556 426 -37 556 429 -36 556 429 -37 530 424 -36 530 424 -37 530 421 -36 530 421 -37 530 419 -36 530 419 -37 556 416 -36 556 416 -37 556 419 -36 556 419 -37 556 421 -36 556 421 -37 530 416 -36 530 416 -37 530 414 -36 530 414 -37 530 411 -36 530 411 -37 556 409 -36 556 409 -37 556 411 -36 556 411 -37 556 414 -36 556 414 -37 530 409 -36 530 409 -37 530 386 -36 530 386 -37 530 389 -36 530 389 -37 556 391 -36 556 391 -37 556 389 -36 556 389 -37 556 386 -36 556 386 -37 530 391 -36 530 391 -37 530 379 -36 530 379 -37 530 381 -36 530 381 -37 556 384 -36 556 384 -37 556 381 -36 556 381 -37 556 379 -36 556 379 -37 530 384 -36 530 384 -37 530 371 -36 530 371 -37 530 374 -36 530 374 -37 556 376 -36 556 376 -37 556 374 -36 556 374 -37 556 371 -36 556 371 -37 530 376 -36 530 376 -37 530 364 -36 530 364 -37 530 366 -36 530 366 -37 556 369 -36 556 369 -37 556 366 -36 556 366 -37 556 364 -36 556 364 -37 530 369 -36 530 369 -37 556 394 -36 556 394 -37 556 396 -36 556 396 -37 556 399 -36 556 399 -37 556 406 -36 556 406 -37 556 404 -36 556 404 -37 556 401 -36 556 401 -37 556 436 -36 556 436 -37 556 434 -36 556 434 -37 556 431 -36 556 431 -37 556 439 -36 556 439 -37 556 442 -36 556 442 -37 556 444 -36 556 444 -37 530 436 -36 530 436 -37 530 434 -36 530 434 -37 530 431 -36 530 431 -37 530 439 -36 530 439 -37 530 442 -36 530 442 -37 530 444 -36 530 444 -37 530 399 -36 530 399 -37 530 396 -36 530 396 -37 530 394 -36 530 394 -37 530 401 -36 530 401 -37 530 404 -36 530 404 -37 530 406 -36 530 406 -37 583 469 -36 583 469 -37 583 472 -36 583 472 -37 608 474 -36 608 474 -37 608 472 -36 608 472 -37 608 469 -36 608 469 -37 583 474 -36 583 474 -37 583 462 -36 583 462 -37 583 464 -36 583 464 -37 608 467 -36 608 467 -37 608 464 -36 608 464 -37 608 462 -36 608 462 -37 583 467 -36 583 467 -37 583 454 -36 583 454 -37 583 457 -36 583 457 -37 608 459 -36 608 459 -37 608 457 -36 608 457 -37 608 454 -36 608 454 -37 583 459 -36 583 459 -37 583 447 -36 583 447 -37 583 449 -36 583 449 -37 608 452 -36 608 452 -37 608 449 -36 608 449 -37 608 447 -36 608 447 -37 583 452 -36 583 452 -37 583 429 -36 583 429 -37 583 426 -36 583 426 -37 608 424 -36 608 424 -37 608 426 -36 608 426 -37 608 429 -36 608 429 -37 583 424 -36 583 424 -37 583 421 -36 583 421 -37 583 419 -36 583 419 -37 608 416 -36 608 416 -37 608 419 -36 608 419 -37 608 421 -36 608 421 -37 583 416 -36 583 416 -37 583 414 -36 583 414 -37 583 411 -36 583 411 -37 608 409 -36 608 409 -37 608 411 -36 608 411 -37 608 414 -36 608 414 -37 583 409 -36 583 409 -37 583 386 -36 583 386 -37 583 389 -36 583 389 -37 608 391 -36 608 391 -37 608 389 -36 608 389 -37 608 386 -36 608 386 -37 583 391 -36 583 391 -37 583 379 -36 583 379 -37 583 381 -36 583 381 -37 608 384 -36 608 384 -37 608 381 -36 608 381 -37 608 379 -36 608 379 -37 583 384 -36 583 384 -37 583 371 -36 583 371 -37 583 374 -36 583 374 -37 608 376 -36 608 376 -37 608 374 -36 608 374 -37 608 371 -36 608 371 -37 583 376 -36 583 376 -37 583 364 -36 583 364 -37 583 366 -36 583 366 -37 608 369 -36 608 369 -37 608 366 -36 608 366 -37 608 364 -36 608 364 -37 583 369 -36 583 369 -37 608 394 -36 608 394 -37 608 396 -36 608 396 -37 608 399 -36 608 399 -37 608 406 -36 608 406 -37 608 404 -36 608 404 -37 608 401 -36 608 401 -37 608 436 -36 608 436 -37 608 434 -36 608 434 -37 608 431 -36 608 431 -37 608 439 -36 608 439 -37 608 442 -36 608 442 -37 608 444 -36 608 444 -37 583 436 -36 583 436 -37 583 434 -36 583 434 -37 583 431 -36 583 431 -37 583 439 -36 583 439 -37 583 442 -36 583 442 -37 583 444 -36 583 444 -37 583 399 -36 583 399 -37 583 396 -36 583 396 -37 583 394 -36 583 394 -37 583 401 -36 583 401 -37 583 404 -36 583 404 -37 583 406 -36 583 406 -37 398 474 -36 398 474 -37 398 472 -36 398 472 -37 398 469 -36 398 469 -37 398 467 -36 398 467 -37 398 464 -36 398 464 -37 398 462 -36 398 462 -37 398 459 -36 398 459 -37 398 457 -36 398 457 -37 398 454 -36 398 454 -37 398 452 -36 398 452 -37 398 449 -36 398 449 -37 398 447 -36 398 447 -37 398 424 -36 398 424 -37 398 426 -36 398 426 -37 398 429 -36 398 429 -37 398 416 -36 398 416 -37 398 419 -36 398 419 -37 398 421 -36 398 421 -37 398 409 -36 398 409 -37 398 411 -36 398 411 -37 398 414 -36 398 414 -37 398 391 -36 398 391 -37 398 389 -36 398 389 -37 398 386 -36 398 386 -37 398 384 -36 398 384 -37 398 381 -36 398 381 -37 398 379 -36 398 379 -37 398 376 -36 398 376 -37 398 374 -36 398 374 -37 398 371 -36 398 371 -37 398 369 -36 398 369 -37 398 366 -36 398 366 -37 398 364 -36 398 364 -37 398 394 -36 398 394 -37 398 396 -36 398 396 -37 398 399 -36 398 399 -37 398 406 -36 398 406 -37 398 404 -36 398 404 -37 398 401 -36 398 401 -37 398 436 -36 398 436 -37 398 434 -36 398 434 -37 398 431 -36 398 431 -37 398 439 -36 398 439 -37 398 442 -36 398 442 -37 398 444 -36 398 444 -37 375 474 -36 375 474 -37 375 472 -36 375 472 -37 375 469 -36 375 469 -37 375 467 -36 375 467 -37 375 464 -36 375 464 -37 375 462 -36 375 462 -37 375 459 -36 375 459 -37 375 457 -36 375 457 -37 375 454 -36 375 454 -37 375 452 -36 375 452 -37 375 449 -36 375 449 -37 375 447 -36 375 447 -37 375 424 -36 375 424 -37 375 426 -36 375 426 -37 375 429 -36 375 429 -37 375 416 -36 375 416 -37 375 419 -36 375 419 -37 375 421 -36 375 421 -37 375 409 -36 375 409 -37 375 411 -36 375 411 -37 375 414 -36 375 414 -37 375 384 -36 375 384 -37 375 381 -36 375 381 -37 375 379 -36 375 379 -37 375 376 -36 375 376 -37 375 374 -36 375 374 -37 375 371 -36 375 371 -37 375 369 -36 375 369 -37 375 366 -36 375 366 -37 375 364 -36 375 364 -37 375 406 -36 375 406 -37 375 404 -36 375 404 -37 375 401 -36 375 401 -37 375 436 -36 375 436 -37 375 434 -36 375 434 -37 375 431 -36 375 431 -37 375 439 -36 375 439 -37 375 442 -36 375 442 -37 375 444 -36 375 444 -37 330 421 -36 330 416 -36 330 419 -36 330 409 -36 330 414 -36 330 411 -36 330 406 -36 330 401 -36 330 404 -36 283 436 -38 271 371 -19 267 482 -42 268 482 -42 270 482 -42 271 482 -42 275 482 -42 273 482 -42 272 482 -42 276 482 -42 277 482 -42 278 482 -42 280 482 -42 282 482 -42 281 482 -42 266 482 -42 265 482 -42 263 482 -42 262 482 -42 259 482 -42 261 482 -42 259 481 -42 283 477 -42 283 478 -42 283 480 -42 283 481 -42 283 475 -42 283 473 -42 283 472 -42 283 471 -42 283 468 -42 283 470 -42 283 467 -42 283 466 -42 283 465 -42 283 463 -42 283 461 -42 283 462 -42 283 416 -42 283 417 -42 283 418 -42 283 420 -42 283 421 -42 283 422 -42 283 415 -42 283 413 -42 283 412 -42 283 411 -42 283 410 -42 283 408 -42 283 401 -42 283 402 -42 283 403 -42 283 405 -42 283 406 -42 283 407 -42 259 480 -39 259 478 -39 259 477 -39 259 476 -39 259 475 -39 259 473 -39 259 472 -39 259 471 -39 259 470 -39 259 468 -39 259 467 -39 259 466 -39 259 465 -39 259 463 -39 259 462 -39 259 453 -42 259 456 -42 259 457 -42 259 458 -42 259 460 -42 259 452 -42 259 455 -42 259 461 -39 259 460 -39 259 458 -39 259 457 -39 259 456 -39 259 455 -39 259 453 -39 259 440 -42 259 441 -42 259 442 -42 259 443 -42 259 445 -42 259 363 -38 259 371 -38 259 362 -38 283 376 -38 283 374 -38 283 373 -38 283 372 -38 283 371 -38 283 364 -38 283 366 -38 283 367 -38 283 368 -38 283 363 -38 283 362 -38 283 369 -38 283 377 -38 259 369 -38 259 377 -38 259 362 -38 261 362 -38 262 362 -38 264 362 -38 268 362 -38 270 362 -38 275 362 -38 273 362 -38 271 362 -38 276 362 -38 282 362 -38 281 362 -38 279 362 -38 278 362 -38 283 445 -42 283 443 -42 283 442 -42 283 441 -42 283 440 -42 283 446 -42 283 447 -42 283 448 -42 283 450 -42 283 451 -42 283 452 -42 284 364 -30 284 366 -30 284 369 -30 284 366 -32 284 364 -32 284 369 -32 284 364 -24 284 366 -24 284 369 -24 284 366 -27 284 364 -27 284 369 -27 284 364 -18 284 366 -18 284 369 -18 284 366 -21 284 364 -21 284 369 -21 284 364 -13 284 366) (list -13 284 369 -13 284 366 -15 284 364 -15 284 369 -15 259 451 -39 259 452 -39 259 446 -39 259 447 -39 259 448 -39 259 450 -39 259 437 -42 293 423 -42 294 423 -42 297 423 -42 283 425 -42 283 426 -42 283 427 -42 283 428 -42 283 430 -42 283 437 -42 283 436 -42 283 435 -42 283 433 -42 283 432 -42 283 431 -42 283 438 -42 288 437 -42 292 437 -42 306 437 -42 259 398 -42 300 416 -38 300 417 -38 300 418 -38 300 420 -38 300 421 -38 300 415 -38 300 413 -38 300 412 -38 300 411 -38 300 410 -38 300 408 -38 300 401 -38 300 402 -38 300 403 -38 300 405 -38 300 406 -38 300 407 -38 300 400 -38 284 399 -38 286 399 -38 298 399 -38 297 399 -38 296 399 -38 294 399 -38 293 399 -38 292 399 -38 286 423 -38 287 423 -38 288 423 -38 289 423 -38 297 423 -38 296 423 -38 294 423 -38 293 423 -38 292 423 -38 327 423 -38 326 423 -38 324 423 -38 323 423 -38 322 423 -38 314 423 -38 316 423 -38 317 423 -38 318 423 -38 319 423 -38 321 423 -38 313 416 -38 313 417 -38 313 418 -38 313 420 -38 313 421 -38 313 423 -38 313 415 -38 313 413 -38 313 412 -38 313 411 -38 313 410 -38 313 408 -38 284 437 -38 286 437 -38 287 437 -38 288 437 -38 289 437 -38 291 437 -38 292 437 -38 293 437 -38 294 437 -38 296 437 -38 297 437 -38 298 437 -38 299 437 -38 301 437 -38 302 437 -38 303 437 -38 304 437 -38 306 437 -38 307 437 -38 308 437 -38 309 437 -38 311 437 -38 312 437 -38 313 437 -38 314 437 -38 316 437 -38 317 437 -38 318 437 -38 319 437 -38 321 437 -38 326 437 -38 324 437 -38 323 437 -38 322 437 -38 327 437 -38 546 362 -42 547 362 -42 548 362 -42 549 362 -42 551 362 -42 552 362 -42 553 362 -42 554 362 -42 556 362 -42 557 362 -42 558 362 -42 559 362 -42 561 362 -42 493 362 -42 494 362 -42 496 362 -42 497 362 -42 498 362 -42 499 362 -42 501 362 -42 291 423 -38 351 462 -42 351 463 -42 351 465 -42 351 466 -42 351 467 -42 351 475 -42 351 473 -42 351 472 -42 351 471 -42 351 470 -42 351 468 -42 351 446 -42 351 447 -42 351 448 -42 351 450 -42 351 451 -42 351 452 -42 351 460 -42 351 458 -42 351 457 -42 351 456 -42 351 455 -42 351 453 -42 351 445 -42 351 443 -42 351 442 -42 351 441 -42 351 440 -42 351 438 -42 351 431 -42 351 432 -42 351 433 -42 351 435 -42 351 436 -42 351 437 -42 351 430 -42 351 428 -42 351 427 -42 351 426 -42 351 425 -42 351 423 -42 287 399 -38 288 399 -38 283 423 -42 283 424 -42 283 423 -42 283 482 -42 259 482 -42 667 514 -42 313 422 -38 300 422 -38 300 423 -38 298 423 -38 299 423 -38 284 423 -38 284 423 -38 283 422 -38 283 423 -38 289 399 -38 291 399 -38 259 438 -42 305 405 -42 304 405 -42 303 405 -42 300 408 -42 302 405 -42 396 448 -42 425 364 -36 425 364 -37))) nil "Agrupa XYZ"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 577 599) (om-make-point 545 161) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (43/4 (((4 4) ((1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1)) (1 (1 1 1)) (1 (1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)) (1 (1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)))) ((3 4) ((1 (1 1 -1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (63/4 (((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) (1 (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) 1 (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((3 4) ((1 (1 1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (43/4 (((4 4) ((1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1)) (1 (1 1 1)) (1 (1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)) (1 (1 1)))) ((4 4) ((1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)))) ((3 4) ((1 (1 1 -1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (63/4 (((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) (1 (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) 1 (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((3 4) ((1 (1 1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 1 28 (list (quote gf) (quote gf)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (2 2 2 2 2 2))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) (quote :default) nil (quote :midi-player) 117/100 nil 1000 4 (om-make-point 1707 613) (om-make-point 108 272) 1 3 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "ler arquivo XYZ" (quote file-box) (quote ((om-load-inputfun (quote input-funbox) "" "Arquivo txt com pontos" nil))) (om-make-point 222 39) nil nil "&" (list (let ((box (om-load-boxin "Arquivo txt com pontos" 0 (om-make-point 165 107) "" "Arquivo txt com pontos" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "WHILELOOP" (quote whileloop) (quote ((om-load-inputfun (quote input-funbox) "condition" "EXPR" nil))) (om-make-point 89 625) nil nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 119 468) (om-make-point 38 40) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 87 546) (om-make-point 71 60) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FILE-EOF-P" (quote file-eof-p) (quote ((om-load-inputfun (quote input-funbox) "a file pointer" "STREAM" nil))) (om-make-point 73 304) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 211 399) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FILE-READ-LINE" (quote file-read-line) (quote ((om-load-inputfun (quote input-funbox) "a file pointer" "STREAM" nil))) (om-make-point 192 304) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "StreamFile" (quote streamfile) (quote ((om-load-inputfun (quote input-funbox) "pathname or string" "PATHNAME" nil))) (om-make-point 203 183) nil nil nil nil 1))) (setf (filetype box) (quote text) (direction box) :input (if-ex box) :overwrite) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "init" (quote initdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 11 762) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 209 608) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 56 755) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((3 0 1 0 nil 0) (4 0 3 0 nil 0) (2 0 3 1 nil 0) (5 0 3 2 nil 0) (7 0 4 0 nil 0) (6 0 5 0 nil 0) (7 0 6 0 nil 0) (0 0 7 0 nil 0) (5 1 9 0 nil 0))) 1 "ler arquivo xyz" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FILE-CHOOSER" (quote file-chooser) (quote nil) (om-make-point 86 8) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((50 1 3 0 nil 0) (7 0 3 1 nil 0) (2 0 3 2 nil 0) (50 1 8 0 nil 0) (11 0 8 1 nil 0) (0 0 8 2 nil 0) (3 0 9 0 nil 0) (4 0 9 1 nil 0) (5 0 9 2 nil 0) (1 0 9 3 nil 0) (9 0 10 1 nil 0) (8 0 10 2 nil 0) (6 0 10 3 nil 0) (50 1 15 0 nil 0) (19 0 15 1 nil 0) (14 0 15 2 nil 0) (50 1 20 0 nil 0) (23 0 20 1 nil 0) (12 0 20 2 nil 0) (15 0 21 0 nil 0) (16 0 21 1 nil 0) (17 0 21 2 nil 0) (13 0 21 3 nil 0) (21 0 22 1 nil 0) (20 0 22 2 nil 0) (18 0 22 3 nil 0) (44 0 24 0 nil 0) (34 0 24 1 nil 0) (22 0 24 2 nil 0) (10 0 24 3 nil 0) (50 1 26 0 nil 0) (31 0 26 1 nil 0) (25 0 26 2 nil 0) (50 1 32 0 nil 0) (35 0 32 1 nil 0) (36 0 32 2 nil 0) (26 0 33 0 nil 0) (27 0 33 1 nil 0) (28 0 33 2 nil 0) (30 0 33 3 nil 0) (33 0 34 1 nil 0) (32 0 34 2 nil 0) (29 0 34 3 nil 0) (50 1 39 0 nil 0) (38 0 39 1 nil 0) (37 0 39 2 nil 0) (50 1 43 0 nil 0) (42 0 43 1 nil 0) (41 0 43 2 nil 0) (48 0 44 1 nil 0) (43 0 44 2 nil 0) (40 0 44 3 nil 0) (39 0 48 0 nil 0) (47 0 48 1 nil 0) (46 0 48 2 nil 0) (45 0 48 3 nil 0) (51 0 49 0 nil 0) (52 0 50 0 nil 0) (24 0 51 1 nil 0) (53 0 52 0 nil 0))) nil 6.2))
