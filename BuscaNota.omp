; OM File Header - Saved 2022/08/02 12:49:18
; (6.2 :patc (om-make-point 523.0 7) (om-make-point -99 85) (om-make-point 1920 678) "" 183 0 "2022/07/22 10:55:59" "2022/07/26 8:03:20")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "BuscaNota" (quote ((let ((box (om-load-boxin "Revert" 4 (om-make-point 593 3) "" "Revert" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "Voz" 3 (om-make-point 540 3) "" "Voz" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 309 632) (om-make-point 42 36) (list 4 4) "(4 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "tonica" 2 (om-make-point 479 4) "" "tonica" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "Esca" 1 (om-make-point 427 4) "" "Esca" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "Coord" 0 (om-make-point 361 3) "" "Coord" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF 2" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 471 586) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REVERSE 2" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 419 438) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 239 607) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 195 444) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "lispfunction" (om-load-lisp-abspatch "lispfunction" 6.2 "(lambda ( toques voz )$$         (setq i        0)$         (setq  ritmo  (append (list (/ 1 (* 4 voz))) '()))$$         (repeat (length toques)$$                    (setq div (cond $                                ((eq 0 (mod i   7))  (* 4 voz))$                                ((eq 0 (mod i   9))  (* 2 voz))$                                ((eq 0 (mod i  12))  (* 2 voz))$                                (t                   (* 4 voz))$                           ))$                    (setq  i      (1+ i))$                    (setq  ritmo  (append (list (/ 1 div)) ritmo))$         )$         ritmo  $)$") (quote ((om-load-inputfun (quote input-funbox) "" "TOQUES" nil) (om-load-inputfun (quote input-funbox) "" "VOZ" nil))) (om-make-point 226 281) nil (list nil) nil "lispfunction"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 2" 1 (om-make-point 460 787) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "Alturas" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 272 786) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "Tempos" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MKTREE" (quote mktree) (quote ((om-load-inputfun (quote input-funbox) "list of integer ratios" "RHYTHM" (list 1/4 1/4 1/4 1/4)) (om-load-inputfun (quote input-funbox) "list of time signatures" "TIMESIGNS" (list 4 4)))) (om-make-point 275 691) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "lispfunction" (om-load-lisp-abspatch "lispfunction" 6.2 "(lambda ( toques escala tonica voz)$$         (setq not  '( )$               i      0$               tot   (length toques)$               med   (/ tot 2)$               qua   (/ tot 4)$               dec   (/ tot 10)$               vic   (/ tot 20)$               escalan '()$         )$         (repeat tot (setq escalan (append escalan (list -1))))$             $         (repeat tot$                 (setq toq    (nth i    toques)$                       mod    (mod toq (length escala))  $                 )$                 (setq alt    (cond $                                   ((eq 0 (mod i 3)) (+ (* tonica 100) (* 100 (nth mod escala) (nth mod escalan))))$                                   (t                (+ (* tonica 100) (* 100 (nth mod escala)                  )))$                              ))$                 (setq i      (1+ i)$                       not    (append not (list alt))  $                 )$         ) $         not  $)$") (quote ((om-load-inputfun (quote input-funbox) "" "TOQUES" nil) (om-load-inputfun (quote input-funbox) "" "ESCALA" nil) (om-load-inputfun (quote input-funbox) "" "TONICA" nil) (om-load-inputfun (quote input-funbox) "" "VOZ" nil))) (om-make-point 450 161) nil (list nil) nil "lispfunction"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 6 0 nil 0) (7 0 6 1 nil 0) (14 0 6 2 nil 0) (14 0 7 0 nil 0) (0 0 8 0 nil 0) (9 0 8 1 nil 0) (10 0 8 2 nil 0) (10 0 9 0 nil 0) (14 0 10 0 nil 0) (1 0 10 1 nil 0) (6 0 11 0 nil 0) (13 0 12 0 nil 0) (8 0 13 0 nil 0) (2 0 13 1 nil 0) (5 0 14 0 nil 0) (4 0 14 1 nil 0) (3 0 14 2 nil 0) (1 0 14 3 nil 0))) nil 6.2))
