; OM File Header - Saved 2022/08/03 16:02:28
; (6.2 :patc (om-make-point 534 208) (om-make-point -117 49) (om-make-point 1920 918) "" 183 0 "2022/08/03 15:40:32" "2022/08/03 15:50:55")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "Acordes" (quote ((let ((box (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 418 261) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 3" 2 (om-make-point 406 378) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "duracao" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 2" 1 (om-make-point 356 378) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "onsets" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 357 262) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "inverte3" 4 (om-make-point 489 45) "" "inverte3" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "inverte2" 3 (om-make-point 422 45) "" "inverte2" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "inverte1" 2 (om-make-point 356 45) "" "inverte1" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "dura" 1 (om-make-point 306 45) "" "dura" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "grau" 0 (om-make-point 256 45) "" "grau" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 306 379) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "notas" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 312 264) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Acordes" (om-load-lisp-abspatch "Acordes" 6.2 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda ( grau dur i j k) $          $          (setq acorde (loop for n from grau to 100 by 12 collect (list (* 100 (+ n 0 i))$                                                                        (* 100 (+ n 4 j))$                                                                        (* 100 (+ n 7 k))$                                                                  ))$                                    $                onsets (loop for n from 0    to (1- (length acorde)) by  1 collect  (* n  dur))$          )$          (list  acorde  onsets  dur)$)") (quote ((om-load-inputfun (quote input-funbox) "" "GRAU" nil) (om-load-inputfun (quote input-funbox) "" "DUR" nil) (om-load-inputfun (quote input-funbox) "" "I" nil) (om-load-inputfun (quote input-funbox) "" "J" nil) (om-load-inputfun (quote input-funbox) "" "K" nil))) (om-make-point 356 181) nil (list (list (list (list 6000 6400 6700) (list 7200 7600 7900) (list 8400 8800 9100) (list 9600 10000 10300)) (list 0 500 1000 1500))) nil "Acordes"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((11 0 0 0 nil 0) (0 0 1 0 nil 0) (3 0 2 0 nil 0) (11 0 3 0 nil 0) (10 0 9 0 nil 0) (11 0 10 0 nil 0) (8 0 11 0 nil 0) (7 0 11 1 nil 0) (6 0 11 2 nil 0) (5 0 11 3 nil 0) (4 0 11 4 nil 0))) nil 6.2))
