; OM File Header - Saved 2022/08/05 10:30:57
; (6.2 :patc (om-make-point 804.0 190) (om-make-point 34 257) (om-make-point 1936 949) "" 183 0 "2022/08/04 11:06:29" "2022/08/05 10:30:57")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"C:Acordes.omp\"" "#P\"C:acordes_lista.omp\"" "#P\"C:A_Lorenz.omp\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "Patch" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 14" (quote t) (quote nil) (om-make-point 1047 155) (om-make-point 28 32) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 999 154) (om-make-point 36 32) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 938 156) (om-make-point 28 32) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "SeriesNumericas" (om-load-lisp-abspatch "SeriesNumericas" 6.2 ";;; Cria series numéricas$(lambda (a b c) $$             (defun serie (a b c) (loop for num from a to b by c collect num))$            $             (list $                  (serie a b c)$             )$)") (quote ((om-load-inputfun (quote input-funbox) "" "A" nil) (om-load-inputfun (quote input-funbox) "" "B" nil) (om-load-inputfun (quote input-funbox) "" "C" nil))) (om-make-point 966 226) nil (list (list (list 4 6 8 10))) nil "SeriesNumericas"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 1490.0 116) (om-make-point 28 32) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 1418.0 116) (om-make-point 51 32) 1000 "1000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 1342.0 118) (om-make-point 28 32) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 1266.0 107) (om-make-point 43 32) 500 "500" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 1152.0 99) (om-make-point 51 32) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "Acordes" (quote ("elements" "Acordes")) (quote ((om-load-inputfun (quote input-funbox) "" "grau" nil) (om-load-inputfun (quote input-funbox) "" "dura" nil) (om-load-inputfun (quote input-funbox) "" "inverte1" nil) (om-load-inputfun (quote input-funbox) "" "inverte2" nil) (om-load-inputfun (quote input-funbox) "" "inverte3" nil))) (om-make-point 1274.0 207) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 1359 297) (om-make-point 61 32) (quote boston) "Boston" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "lispfunction" (om-load-lisp-abspatch "lispfunction" 6.2 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (city) $$$  (defstruct (city (:type list) ) name long lat)$$  (defparameter *cities* $   '($      ( Atlanta          84.23     33.45 ) $      ( Los-Angeles     118.15     34.03 ) $      ( Boston           71.05     42.21 ) $      ( Memphis          90.03     35.09 ) $      ( Chicago          87.37     41.50 ) $      ( New-York         73.58     40.47 ) $      ( Denver          105.00     39.45 ) $      ( Oklahoma-City    97.28     35.26 ) $      ( Eugene          123.05     44.03 ) $      ( Pittsburgh       79.57     40.27 ) $      ( Flagstaff       111.41     35.13 ) $      ( Quebec           71.11     46.49 ) $      ( Grand-Jet       108.37     39.05 ) $      ( Reno            119.49     39.30 ) $      ( Houston         105.00     34.00 ) $      ( San-Francisco   122.26     37.47 ) $      ( Indianapolis     86.10     39.46 ) $      ( Tampa            82.27     27.57 ) $      ( Jacksonville     81.40     30.22 ) $      ( Victoria        123.21     48.25 ) $      ( Kansas-City      94.35     39.06 ) $      ( Wilmington       77.57     34.14 )$    )$  ) $$  (defun cidade  (city)  (assoc name *cities*)) $$  (cidade city)$)") (quote ((om-load-inputfun (quote input-funbox) "" "CITY" nil))) (om-make-point 1346 366) nil (list "Los-Angeles") nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 364 59) (om-make-point 43 32) 500 "500" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 305 52) (om-make-point 51 32) 2000 "2000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 267 307) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 248 250) (om-make-point 35 32) 67 "67" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 257 365) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 339 252) (om-make-point 51 32) 1000 "1000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 348 312) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 338 366) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 253 48) (om-make-point 28 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 376 409) (om-make-point 35 32) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "acordes_lista" (quote ("elements" "acordes_lista")) (quote ((om-load-inputfun (quote input-funbox) "" "grau" nil) (om-load-inputfun (quote input-funbox) "" "dura" nil) (om-load-inputfun (quote input-funbox) "" "inverte1" nil) (om-load-inputfun (quote input-funbox) "" "inverte2" nil) (om-load-inputfun (quote input-funbox) "" "inverte3" nil))) (om-make-point 332 450) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "A_Lorenz 2" (quote ("elements" "A_Lorenz")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil))) (om-make-point 280 166) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 31 532) (om-make-point 1271 71) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quotelonset (quote (200 3 161 76 62 188 44 268 79 245 6 103 187 90 359 206 390 134 211 135 113 463 385 622 385 439 24 61 545 606 963 802 867 387 161 525 823 1413 1439 1603 1104 725 241 912 1915 2327 2770 2385 1899 600 609 2285 3410 4467 4494 4085 2488 587 2103 4430 6672 7693 7806 6176 3540 521 4713 9037 12078 13624 12720 9626 4011 2799 10471 17170 21822 23349 20790 14133 4193 8270 20877 31402 38657 39076 33848 21437 3714 16825 36992 55091 63568 66660 55867 37677 10732 20590 52917 77659 100670 102865 102563 80678 54126 17236 22981 63593 95654 129951 138442 155527 139955 134182 102627 75837 38628 309 37575 74313 110679 132080 163952 165332 187272 171381 179906 152103 145305 112320 90462 58218 25344 4984 40807 71449 100231 131753 146152 175609 173984 197517 182149 196758 171136 174143 142800 132366 100587 77241 48100 15696 11838 46090 74681 102021 132178 146126 175181 174135 198513 184357 201132 176844 183245 152698 146429 114564 95234 65762 35970 8805 25496 53005 83468 112900 131959 161668 165977 192464 182924 203059 182315 193328 164732 163971 132072 118163 87539 61712 33928 682 26242 59372 87908 112560 142491 153258 181560 177759 201015 184799 200182 174547 179280 148211 140161 108548 87667 58718 28005 1086 33151 60773 90120 119670 136972 166450 168974 194853 183836 203076 181231 191060 161837 159666 127719 112404 82110 55211 27682 5945 32931 65522 94265 117600 147521 156688 184600 179351 201904 184538 198932 172512 175982 144626 135190 103769 81664 53024 21597 5261 39390 67207 95572 125255 141059 170326 171338 196657 184377 202770 179979 188671 158930 155411 123466 106824 76837 48957 21621 12295 39388 71373 100326 122336 152219 159836 187334 180704 202539 184080 197469 170322 172519 140937 130129 98928 75644 47294 15229 11606 45536 73560 100875 130666 144957 173975 173503 198232 184725 202244 178548 186077 155873 150996 119101 101154 71481 42677 15505 18613 45840 77130 106281 126920 156726 162799 189850 181866 202954 183437 195791 167963 168868 137113 124940 93986 69564 41486 8859 17985 51622 79861 106054 135923 148685 177415 175480 199589 184886 201502 176939 183278 152664 146422 114622 95392 66036 36367 9327 24901 52284 82793 112127 131352 161043 165580 192148 182839 203152 182610 193898 165438 165031 133159 119627 88945 63427 35601 2490 24395 57644 86100 111105 141020 152241 180644 177268 200729 184860 200542 175153 180276 149306 141693 110032 89546 60503 30034 3094 31154 58713 88355 117854 135629 165164 168177 194229 183625 203132 181601 191793 162749 161014 129077 114199 83807 57240 29643 3871 30827 63594 92267 116022 145948 155621 183660 178869 201651 184648 199365 173192 177074 145804 136818 105332 83621 54884 23682 3191 37365 65116 93809 123450 139745 169085 170588 196093 184222 202895 180409 189476 159899 156822 124871 108662 78574 51009 23614 10217 37273 69466 98351 120800 150699 158824 186462 180281 202355 184251 197973 171059 173676 142161 131803 100527 77625 49182 17318 9521 43527 71482 99149 128908 143697 172801 172814 197740 184632 202441 179037 186951 156893 152462 120546 103024 73248 44740 17518 16543 43724 75252 104339 125433 155269 161847 189048 181505 202842 183668 204152)) :ldur (quotelvel (quoteloffset (quotelchan (quotelegato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.2 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 7.0 28 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 4 (om-make-point 1920 998) (om-make-point -8 -8) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 3 0 nil 0) (1 0 3 1 nil 0) (0 0 3 2 nil 0) (8 0 9 0 nil 0) (7 0 9 1 nil 0) (6 0 9 2 nil 0) (5 0 9 3 nil 0) (4 0 9 4 nil 0) (10 0 11 0 nil 0) (15 0 14 0 nil 0) (14 0 16 0 nil 0) (23 0 16 1 nil 0) (17 0 18 0 nil 0) (18 0 19 0 nil 0) (23 1 19 1 nil 0) (16 0 22 0 nil 0) (19 0 22 1 nil 0) (21 0 22 2 nil 0) (21 0 22 3 nil 0) (21 0 22 4 nil 0) (20 0 23 0 nil 0) (13 0 23 1 nil 0) (12 0 23 2 nil 0) (22 0 24 1 nil 0) (22 1 24 2 nil 0))) nil 6.2))