; OM File Header - Saved 2022/08/02 16:32:47
; (6.2 :patc (om-make-point 804.0 10) (om-make-point 945 259) (om-make-point 516 339) "" 183 0 "2022/08/02 13:16:14" "2022/08/02 16:32:47")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "Matriz" (quote ((let ((box (om-load-boxin "input 3" 2 (om-make-point 259 68) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 200 68) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 147 69) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 198 261) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Matriz de numeros" (om-load-lisp-abspatch "Matriz de numeros" 6.2 "(lambda (x y n)   $      (loop for i from 0 to (1- y) collect$           (loop for j from 0 to (1- x) collect $              (if (null n) 0$                  (if (or (consp n) (numberp n)) $                       n$                      (funcall n j i)))))$)$") (quote ((om-load-inputfun (quote input-funbox) "" "X" nil) (om-load-inputfun (quote input-funbox) "" "Y" nil) (om-load-inputfun (quote input-funbox) "" "N" nil))) (om-make-point 164 169) (om-make-point 121 68) (list (list (list 34 34 34 34 34) (list 34 34 34 34 34) (list 34 34 34 34 34))) nil "Matriz de numeros"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 3 0 nil 0) (2 0 4 0 nil 0) (1 0 4 1 nil 0) (0 0 4 2 nil 0))) nil 6.2))