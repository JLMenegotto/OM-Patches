; OM File Header - Saved 2022/08/02 12:49:18
; (6.2 :patc (om-make-point 168 134) (om-make-point 331 265) (om-make-point 744 351) "" 183 0 "2022/07/30 9:15:54" "2022/08/01 15:27:08")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "M_OIRORI" (quote ((let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 90 350) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "tonica" 1 (om-make-point 275 24) "" "tonica" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 390 268) (om-make-point 28 32) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH 4" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 393 366) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 299 268) (om-make-point 28 32) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH 3" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 302 361) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 183 273) (om-make-point 28 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH 2" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 186 360) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 87 275) (om-make-point 28 32) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 4" 3 (om-make-point 393 502) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "RI" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 3" 2 (om-make-point 301 501) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "RO" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 2" 1 (om-make-point 186 502) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "I" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "intervalos" 0 (om-make-point 194 23) "" "intervalos" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 89 500) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "O" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "lispfunction" (om-load-lisp-abspatch "lispfunction" 6.2 "; Formação de escadas, inversões e retrogradações$; A tonica deve ser em numero MIDI entre 45 e 120$; 45 = A1 $; 48 = C2$; 60 = C3$; 72 = C4$;120 = C8$; escala cromatica ( 0 1 2 3 4 5 6 7 8 9 10 11 12)$; escalas maiores  ( 0   2   4 5   7   9    11 12)$; escalas menores  ( 0   2 3   5   7 8   10    12)$; escala tons int  ( 0   2   4   6   8   10    12) (1 3 5 7 9 11)$$(lambda ( escala tonica ) $$   (setq interv     (cond $                         ((eq escala 12) '( 0 1 2 3 4 5 6 7 8 9 10 11 12))$                         ((eq escala  0) '( 0   2 3   5   7 8   10    12))$                         ((eq escala  1) '( 0   2   4 5   7   9    11 12))          $                         ((eq escala  2) '( 0   2   4   6   8   10    12))$                         ((eq escala  3) '(   1   3   5   7   9    11   ))$                 $                    )$ $         q          (1- (length interv))$         Escala_O   (loop for i from 0 to q collect (* 100 (+ tonica (nth i interv))))$         Escala_I   (loop for i from 0 to q collect (* 100 (- tonica (nth i interv))))$         Escala_RO  (reverse Escala_O)$         Escala_RI  (reverse Escala_I)$   )$   (list  Escala_O  Escala_I  Escala_RO  Escala_RI)$$)$") (quote ((om-load-inputfun (quote input-funbox) "" "ESCALA" nil) (om-load-inputfun (quote input-funbox) "" "TONICA" nil))) (om-make-point 218 101) nil nil nil "lispfunction"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 0 0 nil 0) (14 0 0 1 nil 0) (2 0 3 0 nil 0) (14 0 3 1 nil 0) (4 0 5 0 nil 0) (14 0 5 1 nil 0) (6 0 7 0 nil 0) (14 0 7 1 nil 0) (3 0 9 0 nil 0) (5 0 10 0 nil 0) (7 0 11 0 nil 0) (0 0 13 0 nil 0) (12 0 14 0 nil 0) (1 0 14 1 nil 0))) nil 6.2))
