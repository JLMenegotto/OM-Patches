; OM File Header - Saved 2022/08/04 14:01:48
; (6.2 :patc (om-make-point 921.0 190) (om-make-point -8 -8) (om-make-point 1920 758) "" 183 0 "2022/07/26 7:10:33" "2022/08/01 16:04:15")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "unificado" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 583 533) (om-make-point 28 32) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 596 579) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 3" 3 (om-make-point 695 672) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "Duraçao" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 204 46) (quote "Durações em Métrica para trabalhar com objeto Voice") "" (om-make-point 173 326) nil (om-make-color 0.0 0.0 0.0) (om-make-font "Verdana" 15 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 230 54) (quote "Durações em Milisegundos para trabalhar com objeto Chord-seq$") "" (om-make-point 680 328) nil (om-make-color 0.0 0.0 0.0) (om-make-font "Verdana" 15 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 610 329) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 4" 2 (om-make-point 591 671) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "Onsets" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "normal" 6 (om-make-point 640 6) "" "normal" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "acorde" 5 (om-make-point 588 5) "" "acorde" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "voz" 4 (om-make-point 552 4) "" "voz" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "tempos" 3 (om-make-point 491 3) "" "tempos" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 486 328) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 384 330) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 415 532) (om-make-point 50 32) (list 4 4) "(4 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "tonica" 2 (om-make-point 444 4) "" "tonica" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "Esca" 1 (om-make-point 388 4) "" "Esca" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "Coord" 0 (om-make-point 331 3) "" "Coord" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 2" 1 (om-make-point 483 673) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "Alturas" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 378 672) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "Tempos" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MKTREE" (quote mktree) (quote ((om-load-inputfun (quote input-funbox) "list of integer ratios" "RHYTHM" (list 1/4 1/4 1/4 1/4)) (om-load-inputfun (quote input-funbox) "list of time signatures" "TIMESIGNS" (list 4 4)))) (om-make-point 381 586) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "lispfunction" (om-load-lisp-abspatch "lispfunction" 6.2 "; Para formação de escalas, inversões e retrogradações$; A tonica deve ser em numero MIDI entre 45 e 120$; 45 = A1 $; 48 = C2$; 60 = C3$; 72 = C4$;120 = C8$; escala cromatica ( 0 1 2 3 4 5 6 7 8 9 10 11 12)$; escalas maiores  ( 0   2   4 5   7   9    11 12)$; escalas menores  ( 0   2 3   7   7   9 10    12)$; escala tons int  ( 0   2   4   6   8   10    12) (1 3 5 7 9 11)$$(lambda ( toques interv tonica tempos voz aco normal)$$         (setq$               notas     '()$               ritmo     '()$               ritms     '()$               onset     '(* 1000 voz )$               durat      0$               funda      tonica$               i          0$               q          (1- (length interv))$               Escala_O   (loop for i from 0 to q collect (* 100 (+ funda (nth i interv))))$               Escala_I   (loop for i from 0 to q collect (* 100 (- funda (nth i interv))))$               Escala_RO  (reverse Escala_O)$               Escala_RI  (reverse Escala_I)$               escalat    (if normal  Escala_O  Escala_I)$$               tot       (length toques  )$               mt        (length tempos  )$               me        (length escalat )$$               parte1    (car (multiple-value-list (ceiling tot 36)))$               parte2    (* 2 parte1)$               parte3    (* 3 parte1)$               parte4    (* 4 parte1)$               parte5    (* 5 parte1)$               parte6    (* 6 parte1)$               parte7    (* 7 parte1)$               parte8    (* 8 parte1)$               parte9    (* 9 parte1)$$               notas      (loop for i from 1 to voz collect (* 100 funda))$               ritmo      (loop for i from 1 to voz collect        -1    ) $               salto      0        $          )$$          (setq escadinha  (loop for l from 0 to q collect l))$$          (repeat tot$                     (setq toq    (nth i toques))$                     ;; Altera fundamental $                     (setq funda $                                   (cond   $                                          ((eq (mod i 32) 0) (+ tonica  2 ))$                                          ((eq (mod i 16) 0) (- tonica  2 ))$                                          (t    funda)$                                   )$                     )$                    $                     (setq moda  (mod  toq  me ))  ; toque geometria para altura$                     (setq modd  (mod  toq  mt ))  ; toque geometria para duração$       $                     (setq altur  (cond $                                        ((eq 0 (mod toq  2)) (+ (* funda 100) (* 100 (nth moda interv)  2)))$                                        ((eq 0 (mod toq  1)) (+ (* funda 100) (* 100 (nth moda interv)  1)))$                                        (t                   (+ (* funda 100) (* 100 (nth moda interv)  0)))$                                  )$                           durac  (cond $                                        (t                   (/ 1 (if (eq (nth modd tempos) 2) 8 16)))$                                  )$                           durams (cond $                                        ((eq 0 (mod toq  5)) (/ 1000 (nth modd tempos)))$                                        ((eq 0 (mod toq  4)) (/  500 (nth modd tempos)))$                                        ((eq 0 (mod toq  3)) (/  250 (nth modd tempos)))$                                        ((eq 0 (mod toq  2)) (/ 1000 (nth modd tempos)))$                                        ((eq 0 (mod toq  1)) (/ 1000 (nth modd tempos)))$                                        (t                   (/ 1000 (nth modd tempos)))$                                 )$                           notas (append notas (list  (list altur )))$                           ritmo (append ritmo (list  durac ))$                           ritms (append ritms (list  durams))$                           durat (+ durat durams)$                           onset (append onset (list durat)) $                           i     (1+ i)$                     )$          ) $          (list ritmo notas ritms onset toques) $)$$") (quote ((om-load-inputfun (quote input-funbox) "" "TOQUES" nil) (om-load-inputfun (quote input-funbox) "" "INTERV" nil) (om-load-inputfun (quote input-funbox) "" "TONICA" nil) (om-load-inputfun (quote input-funbox) "" "TEMPOS" nil) (om-load-inputfun (quote input-funbox) "" "VOZ" nil) (om-load-inputfun (quote input-funbox) "" "ACO" nil) (om-load-inputfun (quote input-funbox) "" "NORMAL" nil))) (om-make-point 475 120) nil (list nil) nil "lispfunction"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (5 0 1 1 nil 0) (5 0 2 0 nil 0) (20 0 5 0 nil 0) (1 0 6 0 nil 0) (20 0 11 0 nil 0) (20 0 12 0 nil 0) (11 0 17 0 nil 0) (19 0 18 0 nil 0) (12 0 19 0 nil 0) (13 0 19 1 nil 0) (16 0 20 0 nil 0) (15 0 20 1 nil 0) (14 0 20 2 nil 0) (10 0 20 3 nil 0) (9 0 20 4 nil 0) (8 0 20 5 nil 0) (7 0 20 6 nil 0))) nil 6.2))
